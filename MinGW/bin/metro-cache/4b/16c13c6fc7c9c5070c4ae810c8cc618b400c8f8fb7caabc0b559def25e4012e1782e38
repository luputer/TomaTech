{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.nanoid = exports.customAlphabet = void 0;\n  // This alphabet uses `A-Za-z0-9_-` symbols.\n  // The order of characters is optimized for better gzip and brotli compression.\n  // References to the same file (works both for gzip and brotli):\n  // `'use`, `andom`, and `rict'`\n  // References to the brotli default dictionary:\n  // `-26T`, `1983`, `40px`, `75px`, `bush`, `jack`, `mind`, `very`, and `wolf`\n  let urlAlphabet = 'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict';\n  let customAlphabet = (alphabet, defaultSize = 21) => {\n    return (size = defaultSize) => {\n      let id = '';\n      // A compact alternative for `for (var i = 0; i < step; i++)`.\n      let i = size | 0;\n      while (i--) {\n        // `| 0` is more compact and faster than `Math.floor()`.\n        id += alphabet[Math.random() * alphabet.length | 0];\n      }\n      return id;\n    };\n  };\n  exports.customAlphabet = customAlphabet;\n  let nanoid = (size = 21) => {\n    let id = '';\n    // A compact alternative for `for (var i = 0; i < step; i++)`.\n    let i = size | 0;\n    while (i--) {\n      // `| 0` is more compact and faster than `Math.floor()`.\n      id += urlAlphabet[Math.random() * 64 | 0];\n    }\n    return id;\n  };\n  exports.nanoid = nanoid;\n});","lineCount":37,"map":[[6,2,1,0],[7,2,2,0],[8,2,3,0],[9,2,4,0],[10,2,5,0],[11,2,6,0],[12,2,7,0],[12,6,7,4,"urlAlphabet"],[12,17,7,15],[12,20,8,2],[12,86,8,68],[13,2,10,0],[13,6,10,4,"customAlphabet"],[13,20,10,18],[13,23,10,21,"customAlphabet"],[13,24,10,22,"alphabet"],[13,32,10,30],[13,34,10,32,"defaultSize"],[13,45,10,43],[13,48,10,46],[13,50,10,48],[13,55,10,53],[14,4,11,2],[14,11,11,9],[14,12,11,10,"size"],[14,16,11,14],[14,19,11,17,"defaultSize"],[14,30,11,28],[14,35,11,33],[15,6,12,4],[15,10,12,8,"id"],[15,12,12,10],[15,15,12,13],[15,17,12,15],[16,6,13,4],[17,6,14,4],[17,10,14,8,"i"],[17,11,14,9],[17,14,14,12,"size"],[17,18,14,16],[17,21,14,19],[17,22,14,20],[18,6,15,4],[18,13,15,11,"i"],[18,14,15,12],[18,16,15,14],[18,18,15,16],[19,8,16,6],[20,8,17,6,"id"],[20,10,17,8],[20,14,17,12,"alphabet"],[20,22,17,20],[20,23,17,22,"Math"],[20,27,17,26],[20,28,17,27,"random"],[20,34,17,33],[20,35,17,34],[20,36,17,35],[20,39,17,38,"alphabet"],[20,47,17,46],[20,48,17,47,"length"],[20,54,17,53],[20,57,17,57],[20,58,17,58],[20,59,17,59],[21,6,18,4],[22,6,19,4],[22,13,19,11,"id"],[22,15,19,13],[23,4,20,2],[23,5,20,3],[24,2,21,0],[24,3,21,1],[25,2,21,1,"exports"],[25,9,21,1],[25,10,21,1,"customAlphabet"],[25,24,21,1],[25,27,21,1,"customAlphabet"],[25,41,21,1],[26,2,23,0],[26,6,23,4,"nanoid"],[26,12,23,10],[26,15,23,13,"nanoid"],[26,16,23,14,"size"],[26,20,23,18],[26,23,23,21],[26,25,23,23],[26,30,23,28],[27,4,24,2],[27,8,24,6,"id"],[27,10,24,8],[27,13,24,11],[27,15,24,13],[28,4,25,2],[29,4,26,2],[29,8,26,6,"i"],[29,9,26,7],[29,12,26,10,"size"],[29,16,26,14],[29,19,26,17],[29,20,26,18],[30,4,27,2],[30,11,27,9,"i"],[30,12,27,10],[30,14,27,12],[30,16,27,14],[31,6,28,4],[32,6,29,4,"id"],[32,8,29,6],[32,12,29,10,"urlAlphabet"],[32,23,29,21],[32,24,29,23,"Math"],[32,28,29,27],[32,29,29,28,"random"],[32,35,29,34],[32,36,29,35],[32,37,29,36],[32,40,29,39],[32,42,29,41],[32,45,29,45],[32,46,29,46],[32,47,29,47],[33,4,30,2],[34,4,31,2],[34,11,31,9,"id"],[34,13,31,11],[35,2,32,0],[35,3,32,1],[36,2,32,1,"exports"],[36,9,32,1],[36,10,32,1,"nanoid"],[36,16,32,1],[36,19,32,1,"nanoid"],[36,25,32,1],[37,0,32,1],[37,3]],"functionMap":{"names":["<global>","customAlphabet","<anonymous>","nanoid"],"mappings":"AAA;qBCS;SCC;GDS;CDC;aGE;CHS"}},"type":"js/module"}]}