{"dependencies":[{"name":"./matchers","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":4,"column":19,"index":202},"end":{"line":4,"column":40,"index":223}}],"key":"r7IFX4/qJzuJVkO9YohL0nqjKek="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.generateDynamic = exports.extrapolateGroups = exports.getIgnoreList = exports.getRoutes = void 0;\n  const matchers_1 = require(_dependencyMap[0], \"./matchers\");\n  const validPlatforms = new Set(['android', 'ios', 'native', 'web']);\n  /**\n   * Given a Metro context module, return an array of nested routes.\n   *\n   * This is a two step process:\n   *  1. Convert the RequireContext keys (file paths) into a directory tree.\n   *      - This should extrapolate array syntax into multiple routes\n   *      - Routes are given a specificity score\n   *  2. Flatten the directory tree into routes\n   *      - Routes in directories without _layout files are hoisted to the nearest _layout\n   *      - The name of the route is relative to the nearest _layout\n   *      - If multiple routes have the same name, the most specific route is used\n   */\n  function getRoutes(contextModule, options) {\n    const directoryTree = getDirectoryTree(contextModule, options);\n    // If there are no routes\n    if (!directoryTree) {\n      return null;\n    }\n    const rootNode = flattenDirectoryTreeToRoutes(directoryTree, options);\n    if (!options.ignoreEntryPoints) {\n      crawlAndAppendInitialRoutesAndEntryFiles(rootNode, options);\n    }\n    return rootNode;\n  }\n  exports.getRoutes = getRoutes;\n  /**\n   * Converts the RequireContext keys (file paths) into a directory tree.\n   */\n  function getDirectoryTree(contextModule, options) {\n    const importMode = options.importMode || \"sync\";\n    const ignoreList = [/^\\.\\/\\+(html|native-intent)\\.[tj]sx?$/]; // Ignore the top level ./+html file\n    if (options.ignore) {\n      ignoreList.push(...options.ignore);\n    }\n    if (!options.preserveApiRoutes) {\n      ignoreList.push(/\\+api\\.[tj]sx?$/);\n    }\n    const rootDirectory = {\n      files: new Map(),\n      subdirectories: new Map()\n    };\n    let hasRoutes = false;\n    let isValid = false;\n    for (const filePath of contextModule.keys()) {\n      if (ignoreList.some(regex => regex.test(filePath))) {\n        continue;\n      }\n      isValid = true;\n      const meta = getFileMeta(filePath, options);\n      // This is a file that should be ignored. e.g maybe it has an invalid platform?\n      if (meta.specificity < 0) {\n        continue;\n      }\n      let node = {\n        type: meta.isApi ? 'api' : meta.isLayout ? 'layout' : 'route',\n        loadRoute() {\n          let routeModule;\n          if (options.ignoreRequireErrors) {\n            try {\n              routeModule = contextModule(filePath);\n            } catch {\n              routeModule = {};\n            }\n          } else {\n            routeModule = contextModule(filePath);\n          }\n          if (process.env.NODE_ENV === 'development' && importMode === 'sync') {\n            // In development mode, when async routes are disabled, add some extra error handling to improve the developer experience.\n            // This can be useful when you accidentally use an async function in a route file for the default export.\n            if (routeModule instanceof Promise) {\n              throw new Error(`Route \"${filePath}\" cannot be a promise when async routes is disabled.`);\n            }\n            const defaultExport = routeModule?.default;\n            if (defaultExport instanceof Promise) {\n              throw new Error(`The default export from route \"${filePath}\" is a promise. Ensure the React Component does not use async or promises.`);\n            }\n            // check if default is an async function without invoking it\n            if (defaultExport instanceof Function &&\n            // This only works on web because Hermes support async functions so we have to transform them out.\n            defaultExport.constructor.name === 'AsyncFunction') {\n              throw new Error(`The default export from route \"${filePath}\" is an async function. Ensure the React Component does not use async or promises.`);\n            }\n          }\n          return routeModule;\n        },\n        contextKey: filePath,\n        route: '',\n        dynamic: null,\n        children: [] // While we are building the directory tree, we don't know the node's children just yet. This is added during hoisting\n      };\n      if (process.env.NODE_ENV === 'development') {\n        // If the user has set the `EXPO_ROUTER_IMPORT_MODE` to `sync` then we should\n        // filter the missing routes.\n        if (node.type !== 'api' && importMode === 'sync') {\n          const routeItem = node.loadRoute();\n          // Have a warning for nullish ex\n          const route = routeItem?.default;\n          if (route == null) {\n            // Do not throw an error since a user may just be creating a new route.\n            console.warn(`Route \"${filePath}\" is missing the required default export. Ensure a React component is exported as default.`);\n            continue;\n          }\n          if (['boolean', 'number', 'string'].includes(typeof route)) {\n            throw new Error(`The default export from route \"${filePath}\" is an unsupported type: \"${typeof route}\". Only React Components are supported as default exports from route files.`);\n          }\n        }\n      }\n      /**\n       * A single filepath may be extrapolated into multiple routes if it contains array syntax.\n       * Another way to thinking about is that a filepath node is present in multiple leaves of the directory tree.\n       */\n      for (const route of extrapolateGroups(meta.route)) {\n        // Traverse the directory tree to its leaf node, creating any missing directories along the way\n        const subdirectoryParts = route.split('/').slice(0, -1);\n        // Start at the root directory and traverse the path to the leaf directory\n        let directory = rootDirectory;\n        for (const part of subdirectoryParts) {\n          let subDirectory = directory.subdirectories.get(part);\n          // Create any missing subdirectories\n          if (!subDirectory) {\n            subDirectory = {\n              files: new Map(),\n              subdirectories: new Map()\n            };\n            directory.subdirectories.set(part, subDirectory);\n          }\n          directory = subDirectory;\n        }\n        // Clone the node for this route\n        node = {\n          ...node,\n          route\n        };\n        if (meta.isLayout) {\n          directory.layout ??= [];\n          const existing = directory.layout[meta.specificity];\n          if (existing) {\n            // In production, use the first route found\n            if (process.env.NODE_ENV !== 'production') {\n              throw new Error(`The layouts \"${filePath}\" and \"${existing.contextKey}\" conflict on the route \"/${route}\". Please remove or rename one of these files.`);\n            }\n          } else {\n            node = getLayoutNode(node, options);\n            directory.layout[meta.specificity] = node;\n          }\n        } else if (meta.isApi) {\n          const fileKey = `${route}+api`;\n          let nodes = directory.files.get(fileKey);\n          if (!nodes) {\n            nodes = [];\n            directory.files.set(fileKey, nodes);\n          }\n          // API Routes have no specificity, they are always the first node\n          const existing = nodes[0];\n          if (existing) {\n            // In production, use the first route found\n            if (process.env.NODE_ENV !== 'production') {\n              throw new Error(`The API route file \"${filePath}\" and \"${existing.contextKey}\" conflict on the route \"/${route}\". Please remove or rename one of these files.`);\n            }\n          } else {\n            nodes[0] = node;\n          }\n        } else {\n          let nodes = directory.files.get(route);\n          if (!nodes) {\n            nodes = [];\n            directory.files.set(route, nodes);\n          }\n          /**\n           * If there is an existing node with the same specificity, then we have a conflict.\n           * NOTE(Platform Routes):\n           *    We cannot check for specificity conflicts here, as we haven't processed all the context keys yet!\n           *    This will be checked during hoisting, as well as enforcing that all routes have a non-platform route.\n           */\n          const existing = nodes[meta.specificity];\n          if (existing) {\n            // In production, use the first route found\n            if (process.env.NODE_ENV !== 'production') {\n              throw new Error(`The route files \"${filePath}\" and \"${existing.contextKey}\" conflict on the route \"/${route}\". Please remove or rename one of these files.`);\n            }\n          } else {\n            hasRoutes ||= true;\n            nodes[meta.specificity] = node;\n          }\n        }\n      }\n    }\n    // If there are no routes/layouts then we should display the tutorial.\n    if (!isValid) {\n      return null;\n    }\n    /**\n     * If there are no top-level _layout, add a default _layout\n     * While this is a generated route, it will still be generated even if skipGenerated is true.\n     */\n    if (!rootDirectory.layout) {\n      rootDirectory.layout = [options.getSystemRoute({\n        type: 'layout',\n        route: ''\n      })];\n    }\n    // Only include the sitemap if there are routes.\n    if (!options.skipGenerated) {\n      if (hasRoutes && options.sitemap !== false) {\n        appendSitemapRoute(rootDirectory, options);\n      }\n      if (options.notFound !== false) {\n        appendNotFoundRoute(rootDirectory, options);\n      }\n    }\n    return rootDirectory;\n  }\n  /**\n   * Flatten the directory tree into routes, hoisting routes to the nearest _layout.\n   */\n  function flattenDirectoryTreeToRoutes(directory, options, /* The nearest _layout file in the directory tree */\n  layout, /* Route names are relative to their layout */\n  pathToRemove = '') {\n    /**\n     * This directory has a _layout file so it becomes the new target for hoisting routes.\n     */\n    if (directory.layout) {\n      const previousLayout = layout;\n      layout = getMostSpecific(directory.layout);\n      // Add the new layout as a child of its parent\n      if (previousLayout) {\n        previousLayout.children.push(layout);\n      }\n      if (options.internal_stripLoadRoute) {\n        delete layout.loadRoute;\n      }\n      // `route` is the absolute pathname. We need to make this relative to the last _layout\n      const newRoute = layout.route.replace(pathToRemove, '');\n      pathToRemove = layout.route ? `${layout.route}/` : '';\n      // Now update this layout with the new relative route and dynamic conventions\n      layout.route = newRoute;\n      layout.dynamic = generateDynamic(layout.contextKey.slice(0));\n    }\n    // This should never occur as there will always be a root layout, but it makes the type system happy\n    if (!layout) throw new Error('Expo Router Internal Error: No nearest layout');\n    for (const routes of directory.files.values()) {\n      const routeNode = getMostSpecific(routes);\n      // `route` is the absolute pathname. We need to make this relative to the nearest layout\n      routeNode.route = routeNode.route.replace(pathToRemove, '');\n      routeNode.dynamic = generateDynamic(routeNode.route);\n      if (options.internal_stripLoadRoute) {\n        delete routeNode.loadRoute;\n      }\n      layout.children.push(routeNode);\n    }\n    // Recursively flatten the subdirectories\n    for (const child of directory.subdirectories.values()) {\n      flattenDirectoryTreeToRoutes(child, options, layout, pathToRemove);\n    }\n    return layout;\n  }\n  function getFileMeta(key, options) {\n    // Remove the leading `./`\n    key = key.replace(/^\\.\\//, '');\n    const parts = key.split('/');\n    let route = (0, matchers_1.removeSupportedExtensions)(key);\n    const filename = parts[parts.length - 1];\n    const [filenameWithoutExtensions, platformExtension] = (0, matchers_1.removeSupportedExtensions)(filename).split('.');\n    const isLayout = filenameWithoutExtensions === '_layout';\n    const isApi = filename.match(/\\+api\\.(\\w+\\.)?[jt]sx?$/);\n    if (filenameWithoutExtensions.startsWith('(') && filenameWithoutExtensions.endsWith(')')) {\n      throw new Error(`Invalid route ./${key}. Routes cannot end with '(group)' syntax`);\n    }\n    // Nested routes cannot start with the '+' character, except for the '+not-found' route\n    if (!isApi && filename.startsWith('+') && filenameWithoutExtensions !== '+not-found') {\n      const renamedRoute = [...parts.slice(0, -1), filename.slice(1)].join('/');\n      throw new Error(`Invalid route ./${key}. Route nodes cannot start with the '+' character. \"Please rename to ${renamedRoute}\"`);\n    }\n    let specificity = 0;\n    const hasPlatformExtension = validPlatforms.has(platformExtension);\n    const usePlatformRoutes = options.platformRoutes ?? true;\n    if (hasPlatformExtension) {\n      if (!usePlatformRoutes) {\n        // If the user has disabled platform routes, then we should ignore this file\n        specificity = -1;\n      } else if (!options.platform) {\n        // If we don't have a platform, then we should ignore this file\n        // This used by typed routes, sitemap, etc\n        specificity = -1;\n      } else if (platformExtension === options.platform) {\n        // If the platform extension is the same as the options.platform, then it is the most specific\n        specificity = 2;\n      } else if (platformExtension === 'native' && options.platform !== 'web') {\n        // `native` is allow but isn't as specific as the platform\n        specificity = 1;\n      } else if (platformExtension !== options.platform) {\n        // Somehow we have a platform extension that doesn't match the options.platform and it isn't native\n        // This is an invalid file and we will ignore it\n        specificity = -1;\n      }\n      if (isApi && specificity !== 0) {\n        throw new Error(`Api routes cannot have platform extensions. Please remove '.${platformExtension}' from './${key}'`);\n      }\n      route = route.replace(new RegExp(`.${platformExtension}$`), '');\n    }\n    return {\n      route,\n      specificity,\n      isLayout,\n      isApi\n    };\n  }\n  function getIgnoreList(options) {\n    const ignore = [/^\\.\\/\\+html\\.[tj]sx?$/, ...(options?.ignore ?? [])];\n    if (options?.preserveApiRoutes !== true) {\n      ignore.push(/\\+api\\.[tj]sx?$/);\n    }\n    return ignore;\n  }\n  exports.getIgnoreList = getIgnoreList;\n  /**\n   * Generates a set of strings which have the router array syntax extrapolated.\n   *\n   * /(a,b)/(c,d)/e.tsx => new Set(['a/c/e.tsx', 'a/d/e.tsx', 'b/c/e.tsx', 'b/d/e.tsx'])\n   */\n  function extrapolateGroups(key, keys = new Set()) {\n    const match = (0, matchers_1.matchArrayGroupName)(key);\n    if (!match) {\n      keys.add(key);\n      return keys;\n    }\n    const groups = match.split(',');\n    const groupsSet = new Set(groups);\n    if (groupsSet.size !== groups.length) {\n      throw new Error(`Array syntax cannot contain duplicate group name \"${groups}\" in \"${key}\".`);\n    }\n    if (groups.length === 1) {\n      keys.add(key);\n      return keys;\n    }\n    for (const group of groups) {\n      extrapolateGroups(key.replace(match, group.trim()), keys);\n    }\n    return keys;\n  }\n  exports.extrapolateGroups = extrapolateGroups;\n  function generateDynamic(path) {\n    const dynamic = path.split('/').map(part => {\n      if (part === '+not-found') {\n        return {\n          name: '+not-found',\n          deep: true,\n          notFound: true\n        };\n      }\n      const deepDynamicName = (0, matchers_1.matchDeepDynamicRouteName)(part);\n      const dynamicName = deepDynamicName ?? (0, matchers_1.matchDynamicName)(part);\n      if (!dynamicName) return null;\n      return {\n        name: dynamicName,\n        deep: !!deepDynamicName\n      };\n    }).filter(part => !!part);\n    return dynamic.length === 0 ? null : dynamic;\n  }\n  exports.generateDynamic = generateDynamic;\n  function appendSitemapRoute(directory, options) {\n    if (!directory.files.has('_sitemap') && options.getSystemRoute) {\n      directory.files.set('_sitemap', [options.getSystemRoute({\n        type: 'route',\n        route: '_sitemap'\n      })]);\n    }\n  }\n  function appendNotFoundRoute(directory, options) {\n    if (!directory.files.has('+not-found') && options.getSystemRoute) {\n      directory.files.set('+not-found', [options.getSystemRoute({\n        type: 'route',\n        route: '+not-found'\n      })]);\n    }\n  }\n  function getLayoutNode(node, options) {\n    /**\n     * A file called `(a,b)/(c)/_layout.tsx` will generate two _layout routes: `(a)/(c)/_layout` and `(b)/(c)/_layout`.\n     * Each of these layouts will have a different initialRouteName based upon the first group name.\n     */\n    // We may strip loadRoute during testing\n    const groupName = (0, matchers_1.matchLastGroupName)(node.route);\n    const childMatchingGroup = node.children.find(child => {\n      return child.route.replace(/\\/index$/, '') === groupName;\n    });\n    let initialRouteName = childMatchingGroup?.route;\n    const loaded = node.loadRoute();\n    if (loaded?.unstable_settings) {\n      try {\n        // Allow unstable_settings={ initialRouteName: '...' } to override the default initial route name.\n        initialRouteName = loaded.unstable_settings.initialRouteName ?? initialRouteName;\n      } catch (error) {\n        if (error instanceof Error) {\n          if (!error.message.match(/You cannot dot into a client module/)) {\n            throw error;\n          }\n        }\n      }\n      if (groupName) {\n        // Allow unstable_settings={ 'custom': { initialRouteName: '...' } } to override the less specific initial route name.\n        const groupSpecificInitialRouteName = loaded.unstable_settings?.[groupName]?.initialRouteName;\n        initialRouteName = groupSpecificInitialRouteName ?? initialRouteName;\n      }\n    }\n    return {\n      ...node,\n      route: node.route.replace(/\\/?_layout$/, ''),\n      children: [],\n      initialRouteName\n    };\n  }\n  function crawlAndAppendInitialRoutesAndEntryFiles(node, options, entryPoints = []) {\n    if (node.type === 'route') {\n      node.entryPoints = [...new Set([...entryPoints, node.contextKey])];\n    } else if (node.type === 'layout') {\n      if (!node.children) {\n        throw new Error(`Layout \"${node.contextKey}\" does not contain any child routes`);\n      }\n      // Every node below this layout will have it as an entryPoint\n      entryPoints = [...entryPoints, node.contextKey];\n      /**\n       * Calculate the initialRouteNode\n       *\n       * A file called `(a,b)/(c)/_layout.tsx` will generate two _layout routes: `(a)/(c)/_layout` and `(b)/(c)/_layout`.\n       * Each of these layouts will have a different initialRouteName based upon the first group.\n       */\n      const groupName = (0, matchers_1.matchGroupName)(node.route);\n      const childMatchingGroup = node.children.find(child => {\n        return child.route.replace(/\\/index$/, '') === groupName;\n      });\n      let initialRouteName = childMatchingGroup?.route;\n      // We may strip loadRoute during testing\n      if (!options.internal_stripLoadRoute) {\n        const loaded = node.loadRoute();\n        if (loaded?.unstable_settings) {\n          try {\n            // Allow unstable_settings={ initialRouteName: '...' } to override the default initial route name.\n            initialRouteName = loaded.unstable_settings.initialRouteName ?? initialRouteName;\n          } catch (error) {\n            if (error instanceof Error) {\n              if (!error.message.match(/You cannot dot into a client module/)) {\n                throw error;\n              }\n            }\n          }\n          if (groupName) {\n            // Allow unstable_settings={ 'custom': { initialRouteName: '...' } } to override the less specific initial route name.\n            const groupSpecificInitialRouteName = loaded.unstable_settings?.[groupName]?.initialRouteName;\n            initialRouteName = groupSpecificInitialRouteName ?? initialRouteName;\n          }\n        }\n      }\n      if (initialRouteName) {\n        const initialRoute = node.children.find(child => child.route === initialRouteName);\n        if (!initialRoute) {\n          const validInitialRoutes = node.children.filter(child => !child.generated).map(child => `'${child.route}'`).join(', ');\n          if (groupName) {\n            throw new Error(`Layout ${node.contextKey} has invalid initialRouteName '${initialRouteName}' for group '(${groupName})'. Valid options are: ${validInitialRoutes}`);\n          } else {\n            throw new Error(`Layout ${node.contextKey} has invalid initialRouteName '${initialRouteName}'. Valid options are: ${validInitialRoutes}`);\n          }\n        }\n        // Navigators can add initialsRoutes into the history, so they need to be to be included in the entryPoints\n        node.initialRouteName = initialRouteName;\n        entryPoints.push(initialRoute.contextKey);\n      }\n      for (const child of node.children) {\n        crawlAndAppendInitialRoutesAndEntryFiles(child, options, entryPoints);\n      }\n    }\n  }\n  function getMostSpecific(routes) {\n    const route = routes[routes.length - 1];\n    if (!routes[0]) {\n      throw new Error(`The file ${route.contextKey} does not have a fallback sibling file without a platform extension.`);\n    }\n    // This works even tho routes is holey array (e.g it might have index 0 and 2 but not 1)\n    // `.length` includes the holes in its count\n    return routes[routes.length - 1];\n  }\n});","lineCount":492,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"generateDynamic"],[7,25,3,23],[7,28,3,26,"exports"],[7,35,3,33],[7,36,3,34,"extrapolateGroups"],[7,53,3,51],[7,56,3,54,"exports"],[7,63,3,61],[7,64,3,62,"getIgnoreList"],[7,77,3,75],[7,80,3,78,"exports"],[7,87,3,85],[7,88,3,86,"getRoutes"],[7,97,3,95],[7,100,3,98],[7,105,3,103],[7,106,3,104],[8,2,4,0],[8,8,4,6,"matchers_1"],[8,18,4,16],[8,21,4,19,"require"],[8,28,4,26],[8,29,4,26,"_dependencyMap"],[8,43,4,26],[8,60,4,39],[8,61,4,40],[9,2,5,0],[9,8,5,6,"validPlatforms"],[9,22,5,20],[9,25,5,23],[9,29,5,27,"Set"],[9,32,5,30],[9,33,5,31],[9,34,5,32],[9,43,5,41],[9,45,5,43],[9,50,5,48],[9,52,5,50],[9,60,5,58],[9,62,5,60],[9,67,5,65],[9,68,5,66],[9,69,5,67],[10,2,6,0],[11,0,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,0,16,0],[21,0,17,0],[22,2,18,0],[22,11,18,9,"getRoutes"],[22,20,18,18,"getRoutes"],[22,21,18,19,"contextModule"],[22,34,18,32],[22,36,18,34,"options"],[22,43,18,41],[22,45,18,43],[23,4,19,4],[23,10,19,10,"directoryTree"],[23,23,19,23],[23,26,19,26,"getDirectoryTree"],[23,42,19,42],[23,43,19,43,"contextModule"],[23,56,19,56],[23,58,19,58,"options"],[23,65,19,65],[23,66,19,66],[24,4,20,4],[25,4,21,4],[25,8,21,8],[25,9,21,9,"directoryTree"],[25,22,21,22],[25,24,21,24],[26,6,22,8],[26,13,22,15],[26,17,22,19],[27,4,23,4],[28,4,24,4],[28,10,24,10,"rootNode"],[28,18,24,18],[28,21,24,21,"flattenDirectoryTreeToRoutes"],[28,49,24,49],[28,50,24,50,"directoryTree"],[28,63,24,63],[28,65,24,65,"options"],[28,72,24,72],[28,73,24,73],[29,4,25,4],[29,8,25,8],[29,9,25,9,"options"],[29,16,25,16],[29,17,25,17,"ignoreEntryPoints"],[29,34,25,34],[29,36,25,36],[30,6,26,8,"crawlAndAppendInitialRoutesAndEntryFiles"],[30,46,26,48],[30,47,26,49,"rootNode"],[30,55,26,57],[30,57,26,59,"options"],[30,64,26,66],[30,65,26,67],[31,4,27,4],[32,4,28,4],[32,11,28,11,"rootNode"],[32,19,28,19],[33,2,29,0],[34,2,30,0,"exports"],[34,9,30,7],[34,10,30,8,"getRoutes"],[34,19,30,17],[34,22,30,20,"getRoutes"],[34,31,30,29],[35,2,31,0],[36,0,32,0],[37,0,33,0],[38,2,34,0],[38,11,34,9,"getDirectoryTree"],[38,27,34,25,"getDirectoryTree"],[38,28,34,26,"contextModule"],[38,41,34,39],[38,43,34,41,"options"],[38,50,34,48],[38,52,34,50],[39,4,35,4],[39,10,35,10,"importMode"],[39,20,35,20],[39,23,35,23,"options"],[39,30,35,30],[39,31,35,31,"importMode"],[39,41,35,41],[39,51,35,80],[40,4,36,4],[40,10,36,10,"ignoreList"],[40,20,36,20],[40,23,36,23],[40,24,36,24],[40,63,36,63],[40,64,36,64],[40,65,36,65],[40,66,36,66],[41,4,37,4],[41,8,37,8,"options"],[41,15,37,15],[41,16,37,16,"ignore"],[41,22,37,22],[41,24,37,24],[42,6,38,8,"ignoreList"],[42,16,38,18],[42,17,38,19,"push"],[42,21,38,23],[42,22,38,24],[42,25,38,27,"options"],[42,32,38,34],[42,33,38,35,"ignore"],[42,39,38,41],[42,40,38,42],[43,4,39,4],[44,4,40,4],[44,8,40,8],[44,9,40,9,"options"],[44,16,40,16],[44,17,40,17,"preserveApiRoutes"],[44,34,40,34],[44,36,40,36],[45,6,41,8,"ignoreList"],[45,16,41,18],[45,17,41,19,"push"],[45,21,41,23],[45,22,41,24],[45,39,41,41],[45,40,41,42],[46,4,42,4],[47,4,43,4],[47,10,43,10,"rootDirectory"],[47,23,43,23],[47,26,43,26],[48,6,44,8,"files"],[48,11,44,13],[48,13,44,15],[48,17,44,19,"Map"],[48,20,44,22],[48,21,44,23],[48,22,44,24],[49,6,45,8,"subdirectories"],[49,20,45,22],[49,22,45,24],[49,26,45,28,"Map"],[49,29,45,31],[49,30,45,32],[50,4,46,4],[50,5,46,5],[51,4,47,4],[51,8,47,8,"hasRoutes"],[51,17,47,17],[51,20,47,20],[51,25,47,25],[52,4,48,4],[52,8,48,8,"isValid"],[52,15,48,15],[52,18,48,18],[52,23,48,23],[53,4,49,4],[53,9,49,9],[53,15,49,15,"filePath"],[53,23,49,23],[53,27,49,27,"contextModule"],[53,40,49,40],[53,41,49,41,"keys"],[53,45,49,45],[53,46,49,46],[53,47,49,47],[53,49,49,49],[54,6,50,8],[54,10,50,12,"ignoreList"],[54,20,50,22],[54,21,50,23,"some"],[54,25,50,27],[54,26,50,29,"regex"],[54,31,50,34],[54,35,50,39,"regex"],[54,40,50,44],[54,41,50,45,"test"],[54,45,50,49],[54,46,50,50,"filePath"],[54,54,50,58],[54,55,50,59],[54,56,50,60],[54,58,50,62],[55,8,51,12],[56,6,52,8],[57,6,53,8,"isValid"],[57,13,53,15],[57,16,53,18],[57,20,53,22],[58,6,54,8],[58,12,54,14,"meta"],[58,16,54,18],[58,19,54,21,"getFileMeta"],[58,30,54,32],[58,31,54,33,"filePath"],[58,39,54,41],[58,41,54,43,"options"],[58,48,54,50],[58,49,54,51],[59,6,55,8],[60,6,56,8],[60,10,56,12,"meta"],[60,14,56,16],[60,15,56,17,"specificity"],[60,26,56,28],[60,29,56,31],[60,30,56,32],[60,32,56,34],[61,8,57,12],[62,6,58,8],[63,6,59,8],[63,10,59,12,"node"],[63,14,59,16],[63,17,59,19],[64,8,60,12,"type"],[64,12,60,16],[64,14,60,18,"meta"],[64,18,60,22],[64,19,60,23,"isApi"],[64,24,60,28],[64,27,60,31],[64,32,60,36],[64,35,60,39,"meta"],[64,39,60,43],[64,40,60,44,"isLayout"],[64,48,60,52],[64,51,60,55],[64,59,60,63],[64,62,60,66],[64,69,60,73],[65,8,61,12,"loadRoute"],[65,17,61,21,"loadRoute"],[65,18,61,21],[65,20,61,24],[66,10,62,16],[66,14,62,20,"routeModule"],[66,25,62,31],[67,10,63,16],[67,14,63,20,"options"],[67,21,63,27],[67,22,63,28,"ignoreRequireErrors"],[67,41,63,47],[67,43,63,49],[68,12,64,20],[68,16,64,24],[69,14,65,24,"routeModule"],[69,25,65,35],[69,28,65,38,"contextModule"],[69,41,65,51],[69,42,65,52,"filePath"],[69,50,65,60],[69,51,65,61],[70,12,66,20],[70,13,66,21],[70,14,67,20],[70,20,67,26],[71,14,68,24,"routeModule"],[71,25,68,35],[71,28,68,38],[71,29,68,39],[71,30,68,40],[72,12,69,20],[73,10,70,16],[73,11,70,17],[73,17,71,21],[74,12,72,20,"routeModule"],[74,23,72,31],[74,26,72,34,"contextModule"],[74,39,72,47],[74,40,72,48,"filePath"],[74,48,72,56],[74,49,72,57],[75,10,73,16],[76,10,74,16],[76,14,74,20,"process"],[76,21,74,27],[76,22,74,28,"env"],[76,25,74,31],[76,26,74,32,"NODE_ENV"],[76,34,74,40],[76,39,74,45],[76,52,74,58],[76,56,74,62,"importMode"],[76,66,74,72],[76,71,74,77],[76,77,74,83],[76,79,74,85],[77,12,75,20],[78,12,76,20],[79,12,77,20],[79,16,77,24,"routeModule"],[79,27,77,35],[79,39,77,47,"Promise"],[79,46,77,54],[79,48,77,56],[80,14,78,24],[80,20,78,30],[80,24,78,34,"Error"],[80,29,78,39],[80,30,78,40],[80,40,78,50,"filePath"],[80,48,78,58],[80,102,78,112],[80,103,78,113],[81,12,79,20],[82,12,80,20],[82,18,80,26,"defaultExport"],[82,31,80,39],[82,34,80,42,"routeModule"],[82,45,80,53],[82,47,80,55,"default"],[82,54,80,62],[83,12,81,20],[83,16,81,24,"defaultExport"],[83,29,81,37],[83,41,81,49,"Promise"],[83,48,81,56],[83,50,81,58],[84,14,82,24],[84,20,82,30],[84,24,82,34,"Error"],[84,29,82,39],[84,30,82,40],[84,64,82,74,"filePath"],[84,72,82,82],[84,148,82,158],[84,149,82,159],[85,12,83,20],[86,12,84,20],[87,12,85,20],[87,16,85,24,"defaultExport"],[87,29,85,37],[87,41,85,49,"Function"],[87,49,85,57],[88,12,86,24],[89,12,87,24,"defaultExport"],[89,25,87,37],[89,26,87,38,"constructor"],[89,37,87,49],[89,38,87,50,"name"],[89,42,87,54],[89,47,87,59],[89,62,87,74],[89,64,87,76],[90,14,88,24],[90,20,88,30],[90,24,88,34,"Error"],[90,29,88,39],[90,30,88,40],[90,64,88,74,"filePath"],[90,72,88,82],[90,156,88,166],[90,157,88,167],[91,12,89,20],[92,10,90,16],[93,10,91,16],[93,17,91,23,"routeModule"],[93,28,91,34],[94,8,92,12],[94,9,92,13],[95,8,93,12,"contextKey"],[95,18,93,22],[95,20,93,24,"filePath"],[95,28,93,32],[96,8,94,12,"route"],[96,13,94,17],[96,15,94,19],[96,17,94,21],[97,8,95,12,"dynamic"],[97,15,95,19],[97,17,95,21],[97,21,95,25],[98,8,96,12,"children"],[98,16,96,20],[98,18,96,22],[98,20,96,24],[98,21,96,26],[99,6,97,8],[99,7,97,9],[100,6,98,8],[100,10,98,12,"process"],[100,17,98,19],[100,18,98,20,"env"],[100,21,98,23],[100,22,98,24,"NODE_ENV"],[100,30,98,32],[100,35,98,37],[100,48,98,50],[100,50,98,52],[101,8,99,12],[102,8,100,12],[103,8,101,12],[103,12,101,16,"node"],[103,16,101,20],[103,17,101,21,"type"],[103,21,101,25],[103,26,101,30],[103,31,101,35],[103,35,101,39,"importMode"],[103,45,101,49],[103,50,101,54],[103,56,101,60],[103,58,101,62],[104,10,102,16],[104,16,102,22,"routeItem"],[104,25,102,31],[104,28,102,34,"node"],[104,32,102,38],[104,33,102,39,"loadRoute"],[104,42,102,48],[104,43,102,49],[104,44,102,50],[105,10,103,16],[106,10,104,16],[106,16,104,22,"route"],[106,21,104,27],[106,24,104,30,"routeItem"],[106,33,104,39],[106,35,104,41,"default"],[106,42,104,48],[107,10,105,16],[107,14,105,20,"route"],[107,19,105,25],[107,23,105,29],[107,27,105,33],[107,29,105,35],[108,12,106,20],[109,12,107,20,"console"],[109,19,107,27],[109,20,107,28,"warn"],[109,24,107,32],[109,25,107,33],[109,35,107,43,"filePath"],[109,43,107,51],[109,135,107,143],[109,136,107,144],[110,12,108,20],[111,10,109,16],[112,10,110,16],[112,14,110,20],[112,15,110,21],[112,24,110,30],[112,26,110,32],[112,34,110,40],[112,36,110,42],[112,44,110,50],[112,45,110,51],[112,46,110,52,"includes"],[112,54,110,60],[112,55,110,61],[112,62,110,68,"route"],[112,67,110,73],[112,68,110,74],[112,70,110,76],[113,12,111,20],[113,18,111,26],[113,22,111,30,"Error"],[113,27,111,35],[113,28,111,36],[113,62,111,70,"filePath"],[113,70,111,78],[113,100,111,108],[113,107,111,115,"route"],[113,112,111,120],[113,189,111,197],[113,190,111,198],[114,10,112,16],[115,8,113,12],[116,6,114,8],[117,6,115,8],[118,0,116,0],[119,0,117,0],[120,0,118,0],[121,6,119,8],[121,11,119,13],[121,17,119,19,"route"],[121,22,119,24],[121,26,119,28,"extrapolateGroups"],[121,43,119,45],[121,44,119,46,"meta"],[121,48,119,50],[121,49,119,51,"route"],[121,54,119,56],[121,55,119,57],[121,57,119,59],[122,8,120,12],[123,8,121,12],[123,14,121,18,"subdirectoryParts"],[123,31,121,35],[123,34,121,38,"route"],[123,39,121,43],[123,40,121,44,"split"],[123,45,121,49],[123,46,121,50],[123,49,121,53],[123,50,121,54],[123,51,121,55,"slice"],[123,56,121,60],[123,57,121,61],[123,58,121,62],[123,60,121,64],[123,61,121,65],[123,62,121,66],[123,63,121,67],[124,8,122,12],[125,8,123,12],[125,12,123,16,"directory"],[125,21,123,25],[125,24,123,28,"rootDirectory"],[125,37,123,41],[126,8,124,12],[126,13,124,17],[126,19,124,23,"part"],[126,23,124,27],[126,27,124,31,"subdirectoryParts"],[126,44,124,48],[126,46,124,50],[127,10,125,16],[127,14,125,20,"subDirectory"],[127,26,125,32],[127,29,125,35,"directory"],[127,38,125,44],[127,39,125,45,"subdirectories"],[127,53,125,59],[127,54,125,60,"get"],[127,57,125,63],[127,58,125,64,"part"],[127,62,125,68],[127,63,125,69],[128,10,126,16],[129,10,127,16],[129,14,127,20],[129,15,127,21,"subDirectory"],[129,27,127,33],[129,29,127,35],[130,12,128,20,"subDirectory"],[130,24,128,32],[130,27,128,35],[131,14,129,24,"files"],[131,19,129,29],[131,21,129,31],[131,25,129,35,"Map"],[131,28,129,38],[131,29,129,39],[131,30,129,40],[132,14,130,24,"subdirectories"],[132,28,130,38],[132,30,130,40],[132,34,130,44,"Map"],[132,37,130,47],[132,38,130,48],[133,12,131,20],[133,13,131,21],[134,12,132,20,"directory"],[134,21,132,29],[134,22,132,30,"subdirectories"],[134,36,132,44],[134,37,132,45,"set"],[134,40,132,48],[134,41,132,49,"part"],[134,45,132,53],[134,47,132,55,"subDirectory"],[134,59,132,67],[134,60,132,68],[135,10,133,16],[136,10,134,16,"directory"],[136,19,134,25],[136,22,134,28,"subDirectory"],[136,34,134,40],[137,8,135,12],[138,8,136,12],[139,8,137,12,"node"],[139,12,137,16],[139,15,137,19],[140,10,137,21],[140,13,137,24,"node"],[140,17,137,28],[141,10,137,30,"route"],[142,8,137,36],[142,9,137,37],[143,8,138,12],[143,12,138,16,"meta"],[143,16,138,20],[143,17,138,21,"isLayout"],[143,25,138,29],[143,27,138,31],[144,10,139,16,"directory"],[144,19,139,25],[144,20,139,26,"layout"],[144,26,139,32],[144,31,139,37],[144,33,139,39],[145,10,140,16],[145,16,140,22,"existing"],[145,24,140,30],[145,27,140,33,"directory"],[145,36,140,42],[145,37,140,43,"layout"],[145,43,140,49],[145,44,140,50,"meta"],[145,48,140,54],[145,49,140,55,"specificity"],[145,60,140,66],[145,61,140,67],[146,10,141,16],[146,14,141,20,"existing"],[146,22,141,28],[146,24,141,30],[147,12,142,20],[148,12,143,20],[148,16,143,24,"process"],[148,23,143,31],[148,24,143,32,"env"],[148,27,143,35],[148,28,143,36,"NODE_ENV"],[148,36,143,44],[148,41,143,49],[148,53,143,61],[148,55,143,63],[149,14,144,24],[149,20,144,30],[149,24,144,34,"Error"],[149,29,144,39],[149,30,144,40],[149,46,144,56,"filePath"],[149,54,144,64],[149,64,144,74,"existing"],[149,72,144,82],[149,73,144,83,"contextKey"],[149,83,144,93],[149,112,144,122,"route"],[149,117,144,127],[149,165,144,175],[149,166,144,176],[150,12,145,20],[151,10,146,16],[151,11,146,17],[151,17,147,21],[152,12,148,20,"node"],[152,16,148,24],[152,19,148,27,"getLayoutNode"],[152,32,148,40],[152,33,148,41,"node"],[152,37,148,45],[152,39,148,47,"options"],[152,46,148,54],[152,47,148,55],[153,12,149,20,"directory"],[153,21,149,29],[153,22,149,30,"layout"],[153,28,149,36],[153,29,149,37,"meta"],[153,33,149,41],[153,34,149,42,"specificity"],[153,45,149,53],[153,46,149,54],[153,49,149,57,"node"],[153,53,149,61],[154,10,150,16],[155,8,151,12],[155,9,151,13],[155,15,152,17],[155,19,152,21,"meta"],[155,23,152,25],[155,24,152,26,"isApi"],[155,29,152,31],[155,31,152,33],[156,10,153,16],[156,16,153,22,"fileKey"],[156,23,153,29],[156,26,153,32],[156,29,153,35,"route"],[156,34,153,40],[156,40,153,46],[157,10,154,16],[157,14,154,20,"nodes"],[157,19,154,25],[157,22,154,28,"directory"],[157,31,154,37],[157,32,154,38,"files"],[157,37,154,43],[157,38,154,44,"get"],[157,41,154,47],[157,42,154,48,"fileKey"],[157,49,154,55],[157,50,154,56],[158,10,155,16],[158,14,155,20],[158,15,155,21,"nodes"],[158,20,155,26],[158,22,155,28],[159,12,156,20,"nodes"],[159,17,156,25],[159,20,156,28],[159,22,156,30],[160,12,157,20,"directory"],[160,21,157,29],[160,22,157,30,"files"],[160,27,157,35],[160,28,157,36,"set"],[160,31,157,39],[160,32,157,40,"fileKey"],[160,39,157,47],[160,41,157,49,"nodes"],[160,46,157,54],[160,47,157,55],[161,10,158,16],[162,10,159,16],[163,10,160,16],[163,16,160,22,"existing"],[163,24,160,30],[163,27,160,33,"nodes"],[163,32,160,38],[163,33,160,39],[163,34,160,40],[163,35,160,41],[164,10,161,16],[164,14,161,20,"existing"],[164,22,161,28],[164,24,161,30],[165,12,162,20],[166,12,163,20],[166,16,163,24,"process"],[166,23,163,31],[166,24,163,32,"env"],[166,27,163,35],[166,28,163,36,"NODE_ENV"],[166,36,163,44],[166,41,163,49],[166,53,163,61],[166,55,163,63],[167,14,164,24],[167,20,164,30],[167,24,164,34,"Error"],[167,29,164,39],[167,30,164,40],[167,53,164,63,"filePath"],[167,61,164,71],[167,71,164,81,"existing"],[167,79,164,89],[167,80,164,90,"contextKey"],[167,90,164,100],[167,119,164,129,"route"],[167,124,164,134],[167,172,164,182],[167,173,164,183],[168,12,165,20],[169,10,166,16],[169,11,166,17],[169,17,167,21],[170,12,168,20,"nodes"],[170,17,168,25],[170,18,168,26],[170,19,168,27],[170,20,168,28],[170,23,168,31,"node"],[170,27,168,35],[171,10,169,16],[172,8,170,12],[172,9,170,13],[172,15,171,17],[173,10,172,16],[173,14,172,20,"nodes"],[173,19,172,25],[173,22,172,28,"directory"],[173,31,172,37],[173,32,172,38,"files"],[173,37,172,43],[173,38,172,44,"get"],[173,41,172,47],[173,42,172,48,"route"],[173,47,172,53],[173,48,172,54],[174,10,173,16],[174,14,173,20],[174,15,173,21,"nodes"],[174,20,173,26],[174,22,173,28],[175,12,174,20,"nodes"],[175,17,174,25],[175,20,174,28],[175,22,174,30],[176,12,175,20,"directory"],[176,21,175,29],[176,22,175,30,"files"],[176,27,175,35],[176,28,175,36,"set"],[176,31,175,39],[176,32,175,40,"route"],[176,37,175,45],[176,39,175,47,"nodes"],[176,44,175,52],[176,45,175,53],[177,10,176,16],[178,10,177,16],[179,0,178,0],[180,0,179,0],[181,0,180,0],[182,0,181,0],[183,0,182,0],[184,10,183,16],[184,16,183,22,"existing"],[184,24,183,30],[184,27,183,33,"nodes"],[184,32,183,38],[184,33,183,39,"meta"],[184,37,183,43],[184,38,183,44,"specificity"],[184,49,183,55],[184,50,183,56],[185,10,184,16],[185,14,184,20,"existing"],[185,22,184,28],[185,24,184,30],[186,12,185,20],[187,12,186,20],[187,16,186,24,"process"],[187,23,186,31],[187,24,186,32,"env"],[187,27,186,35],[187,28,186,36,"NODE_ENV"],[187,36,186,44],[187,41,186,49],[187,53,186,61],[187,55,186,63],[188,14,187,24],[188,20,187,30],[188,24,187,34,"Error"],[188,29,187,39],[188,30,187,40],[188,50,187,60,"filePath"],[188,58,187,68],[188,68,187,78,"existing"],[188,76,187,86],[188,77,187,87,"contextKey"],[188,87,187,97],[188,116,187,126,"route"],[188,121,187,131],[188,169,187,179],[188,170,187,180],[189,12,188,20],[190,10,189,16],[190,11,189,17],[190,17,190,21],[191,12,191,20,"hasRoutes"],[191,21,191,29],[191,26,191,34],[191,30,191,38],[192,12,192,20,"nodes"],[192,17,192,25],[192,18,192,26,"meta"],[192,22,192,30],[192,23,192,31,"specificity"],[192,34,192,42],[192,35,192,43],[192,38,192,46,"node"],[192,42,192,50],[193,10,193,16],[194,8,194,12],[195,6,195,8],[196,4,196,4],[197,4,197,4],[198,4,198,4],[198,8,198,8],[198,9,198,9,"isValid"],[198,16,198,16],[198,18,198,18],[199,6,199,8],[199,13,199,15],[199,17,199,19],[200,4,200,4],[201,4,201,4],[202,0,202,0],[203,0,203,0],[204,0,204,0],[205,4,205,4],[205,8,205,8],[205,9,205,9,"rootDirectory"],[205,22,205,22],[205,23,205,23,"layout"],[205,29,205,29],[205,31,205,31],[206,6,206,8,"rootDirectory"],[206,19,206,21],[206,20,206,22,"layout"],[206,26,206,28],[206,29,206,31],[206,30,207,12,"options"],[206,37,207,19],[206,38,207,20,"getSystemRoute"],[206,52,207,34],[206,53,207,35],[207,8,208,16,"type"],[207,12,208,20],[207,14,208,22],[207,22,208,30],[208,8,209,16,"route"],[208,13,209,21],[208,15,209,23],[209,6,210,12],[209,7,210,13],[209,8,210,14],[209,9,211,9],[210,4,212,4],[211,4,213,4],[212,4,214,4],[212,8,214,8],[212,9,214,9,"options"],[212,16,214,16],[212,17,214,17,"skipGenerated"],[212,30,214,30],[212,32,214,32],[213,6,215,8],[213,10,215,12,"hasRoutes"],[213,19,215,21],[213,23,215,25,"options"],[213,30,215,32],[213,31,215,33,"sitemap"],[213,38,215,40],[213,43,215,45],[213,48,215,50],[213,50,215,52],[214,8,216,12,"appendSitemapRoute"],[214,26,216,30],[214,27,216,31,"rootDirectory"],[214,40,216,44],[214,42,216,46,"options"],[214,49,216,53],[214,50,216,54],[215,6,217,8],[216,6,218,8],[216,10,218,12,"options"],[216,17,218,19],[216,18,218,20,"notFound"],[216,26,218,28],[216,31,218,33],[216,36,218,38],[216,38,218,40],[217,8,219,12,"appendNotFoundRoute"],[217,27,219,31],[217,28,219,32,"rootDirectory"],[217,41,219,45],[217,43,219,47,"options"],[217,50,219,54],[217,51,219,55],[218,6,220,8],[219,4,221,4],[220,4,222,4],[220,11,222,11,"rootDirectory"],[220,24,222,24],[221,2,223,0],[222,2,224,0],[223,0,225,0],[224,0,226,0],[225,2,227,0],[225,11,227,9,"flattenDirectoryTreeToRoutes"],[225,39,227,37,"flattenDirectoryTreeToRoutes"],[225,40,227,38,"directory"],[225,49,227,47],[225,51,227,49,"options"],[225,58,227,56],[225,60,228,0],[226,2,229,0,"layout"],[226,8,229,6],[226,10,230,0],[227,2,231,0,"pathToRemove"],[227,14,231,12],[227,17,231,15],[227,19,231,17],[227,21,231,19],[228,4,232,4],[229,0,233,0],[230,0,234,0],[231,4,235,4],[231,8,235,8,"directory"],[231,17,235,17],[231,18,235,18,"layout"],[231,24,235,24],[231,26,235,26],[232,6,236,8],[232,12,236,14,"previousLayout"],[232,26,236,28],[232,29,236,31,"layout"],[232,35,236,37],[233,6,237,8,"layout"],[233,12,237,14],[233,15,237,17,"getMostSpecific"],[233,30,237,32],[233,31,237,33,"directory"],[233,40,237,42],[233,41,237,43,"layout"],[233,47,237,49],[233,48,237,50],[234,6,238,8],[235,6,239,8],[235,10,239,12,"previousLayout"],[235,24,239,26],[235,26,239,28],[236,8,240,12,"previousLayout"],[236,22,240,26],[236,23,240,27,"children"],[236,31,240,35],[236,32,240,36,"push"],[236,36,240,40],[236,37,240,41,"layout"],[236,43,240,47],[236,44,240,48],[237,6,241,8],[238,6,242,8],[238,10,242,12,"options"],[238,17,242,19],[238,18,242,20,"internal_stripLoadRoute"],[238,41,242,43],[238,43,242,45],[239,8,243,12],[239,15,243,19,"layout"],[239,21,243,25],[239,22,243,26,"loadRoute"],[239,31,243,35],[240,6,244,8],[241,6,245,8],[242,6,246,8],[242,12,246,14,"newRoute"],[242,20,246,22],[242,23,246,25,"layout"],[242,29,246,31],[242,30,246,32,"route"],[242,35,246,37],[242,36,246,38,"replace"],[242,43,246,45],[242,44,246,46,"pathToRemove"],[242,56,246,58],[242,58,246,60],[242,60,246,62],[242,61,246,63],[243,6,247,8,"pathToRemove"],[243,18,247,20],[243,21,247,23,"layout"],[243,27,247,29],[243,28,247,30,"route"],[243,33,247,35],[243,36,247,38],[243,39,247,41,"layout"],[243,45,247,47],[243,46,247,48,"route"],[243,51,247,53],[243,54,247,56],[243,57,247,59],[243,59,247,61],[244,6,248,8],[245,6,249,8,"layout"],[245,12,249,14],[245,13,249,15,"route"],[245,18,249,20],[245,21,249,23,"newRoute"],[245,29,249,31],[246,6,250,8,"layout"],[246,12,250,14],[246,13,250,15,"dynamic"],[246,20,250,22],[246,23,250,25,"generateDynamic"],[246,38,250,40],[246,39,250,41,"layout"],[246,45,250,47],[246,46,250,48,"contextKey"],[246,56,250,58],[246,57,250,59,"slice"],[246,62,250,64],[246,63,250,65],[246,64,250,66],[246,65,250,67],[246,66,250,68],[247,4,251,4],[248,4,252,4],[249,4,253,4],[249,8,253,8],[249,9,253,9,"layout"],[249,15,253,15],[249,17,254,8],[249,23,254,14],[249,27,254,18,"Error"],[249,32,254,23],[249,33,254,24],[249,80,254,71],[249,81,254,72],[250,4,255,4],[250,9,255,9],[250,15,255,15,"routes"],[250,21,255,21],[250,25,255,25,"directory"],[250,34,255,34],[250,35,255,35,"files"],[250,40,255,40],[250,41,255,41,"values"],[250,47,255,47],[250,48,255,48],[250,49,255,49],[250,51,255,51],[251,6,256,8],[251,12,256,14,"routeNode"],[251,21,256,23],[251,24,256,26,"getMostSpecific"],[251,39,256,41],[251,40,256,42,"routes"],[251,46,256,48],[251,47,256,49],[252,6,257,8],[253,6,258,8,"routeNode"],[253,15,258,17],[253,16,258,18,"route"],[253,21,258,23],[253,24,258,26,"routeNode"],[253,33,258,35],[253,34,258,36,"route"],[253,39,258,41],[253,40,258,42,"replace"],[253,47,258,49],[253,48,258,50,"pathToRemove"],[253,60,258,62],[253,62,258,64],[253,64,258,66],[253,65,258,67],[254,6,259,8,"routeNode"],[254,15,259,17],[254,16,259,18,"dynamic"],[254,23,259,25],[254,26,259,28,"generateDynamic"],[254,41,259,43],[254,42,259,44,"routeNode"],[254,51,259,53],[254,52,259,54,"route"],[254,57,259,59],[254,58,259,60],[255,6,260,8],[255,10,260,12,"options"],[255,17,260,19],[255,18,260,20,"internal_stripLoadRoute"],[255,41,260,43],[255,43,260,45],[256,8,261,12],[256,15,261,19,"routeNode"],[256,24,261,28],[256,25,261,29,"loadRoute"],[256,34,261,38],[257,6,262,8],[258,6,263,8,"layout"],[258,12,263,14],[258,13,263,15,"children"],[258,21,263,23],[258,22,263,24,"push"],[258,26,263,28],[258,27,263,29,"routeNode"],[258,36,263,38],[258,37,263,39],[259,4,264,4],[260,4,265,4],[261,4,266,4],[261,9,266,9],[261,15,266,15,"child"],[261,20,266,20],[261,24,266,24,"directory"],[261,33,266,33],[261,34,266,34,"subdirectories"],[261,48,266,48],[261,49,266,49,"values"],[261,55,266,55],[261,56,266,56],[261,57,266,57],[261,59,266,59],[262,6,267,8,"flattenDirectoryTreeToRoutes"],[262,34,267,36],[262,35,267,37,"child"],[262,40,267,42],[262,42,267,44,"options"],[262,49,267,51],[262,51,267,53,"layout"],[262,57,267,59],[262,59,267,61,"pathToRemove"],[262,71,267,73],[262,72,267,74],[263,4,268,4],[264,4,269,4],[264,11,269,11,"layout"],[264,17,269,17],[265,2,270,0],[266,2,271,0],[266,11,271,9,"getFileMeta"],[266,22,271,20,"getFileMeta"],[266,23,271,21,"key"],[266,26,271,24],[266,28,271,26,"options"],[266,35,271,33],[266,37,271,35],[267,4,272,4],[268,4,273,4,"key"],[268,7,273,7],[268,10,273,10,"key"],[268,13,273,13],[268,14,273,14,"replace"],[268,21,273,21],[268,22,273,22],[268,29,273,29],[268,31,273,31],[268,33,273,33],[268,34,273,34],[269,4,274,4],[269,10,274,10,"parts"],[269,15,274,15],[269,18,274,18,"key"],[269,21,274,21],[269,22,274,22,"split"],[269,27,274,27],[269,28,274,28],[269,31,274,31],[269,32,274,32],[270,4,275,4],[270,8,275,8,"route"],[270,13,275,13],[270,16,275,16],[270,17,275,17],[270,18,275,18],[270,20,275,20,"matchers_1"],[270,30,275,30],[270,31,275,31,"removeSupportedExtensions"],[270,56,275,56],[270,58,275,58,"key"],[270,61,275,61],[270,62,275,62],[271,4,276,4],[271,10,276,10,"filename"],[271,18,276,18],[271,21,276,21,"parts"],[271,26,276,26],[271,27,276,27,"parts"],[271,32,276,32],[271,33,276,33,"length"],[271,39,276,39],[271,42,276,42],[271,43,276,43],[271,44,276,44],[272,4,277,4],[272,10,277,10],[272,11,277,11,"filenameWithoutExtensions"],[272,36,277,36],[272,38,277,38,"platformExtension"],[272,55,277,55],[272,56,277,56],[272,59,277,59],[272,60,277,60],[272,61,277,61],[272,63,277,63,"matchers_1"],[272,73,277,73],[272,74,277,74,"removeSupportedExtensions"],[272,99,277,99],[272,101,277,101,"filename"],[272,109,277,109],[272,110,277,110],[272,111,277,111,"split"],[272,116,277,116],[272,117,277,117],[272,120,277,120],[272,121,277,121],[273,4,278,4],[273,10,278,10,"isLayout"],[273,18,278,18],[273,21,278,21,"filenameWithoutExtensions"],[273,46,278,46],[273,51,278,51],[273,60,278,60],[274,4,279,4],[274,10,279,10,"isApi"],[274,15,279,15],[274,18,279,18,"filename"],[274,26,279,26],[274,27,279,27,"match"],[274,32,279,32],[274,33,279,33],[274,58,279,58],[274,59,279,59],[275,4,280,4],[275,8,280,8,"filenameWithoutExtensions"],[275,33,280,33],[275,34,280,34,"startsWith"],[275,44,280,44],[275,45,280,45],[275,48,280,48],[275,49,280,49],[275,53,280,53,"filenameWithoutExtensions"],[275,78,280,78],[275,79,280,79,"endsWith"],[275,87,280,87],[275,88,280,88],[275,91,280,91],[275,92,280,92],[275,94,280,94],[276,6,281,8],[276,12,281,14],[276,16,281,18,"Error"],[276,21,281,23],[276,22,281,24],[276,41,281,43,"key"],[276,44,281,46],[276,87,281,89],[276,88,281,90],[277,4,282,4],[278,4,283,4],[279,4,284,4],[279,8,284,8],[279,9,284,9,"isApi"],[279,14,284,14],[279,18,284,18,"filename"],[279,26,284,26],[279,27,284,27,"startsWith"],[279,37,284,37],[279,38,284,38],[279,41,284,41],[279,42,284,42],[279,46,284,46,"filenameWithoutExtensions"],[279,71,284,71],[279,76,284,76],[279,88,284,88],[279,90,284,90],[280,6,285,8],[280,12,285,14,"renamedRoute"],[280,24,285,26],[280,27,285,29],[280,28,285,30],[280,31,285,33,"parts"],[280,36,285,38],[280,37,285,39,"slice"],[280,42,285,44],[280,43,285,45],[280,44,285,46],[280,46,285,48],[280,47,285,49],[280,48,285,50],[280,49,285,51],[280,51,285,53,"filename"],[280,59,285,61],[280,60,285,62,"slice"],[280,65,285,67],[280,66,285,68],[280,67,285,69],[280,68,285,70],[280,69,285,71],[280,70,285,72,"join"],[280,74,285,76],[280,75,285,77],[280,78,285,80],[280,79,285,81],[281,6,286,8],[281,12,286,14],[281,16,286,18,"Error"],[281,21,286,23],[281,22,286,24],[281,41,286,43,"key"],[281,44,286,46],[281,116,286,118,"renamedRoute"],[281,128,286,130],[281,131,286,133],[281,132,286,134],[282,4,287,4],[283,4,288,4],[283,8,288,8,"specificity"],[283,19,288,19],[283,22,288,22],[283,23,288,23],[284,4,289,4],[284,10,289,10,"hasPlatformExtension"],[284,30,289,30],[284,33,289,33,"validPlatforms"],[284,47,289,47],[284,48,289,48,"has"],[284,51,289,51],[284,52,289,52,"platformExtension"],[284,69,289,69],[284,70,289,70],[285,4,290,4],[285,10,290,10,"usePlatformRoutes"],[285,27,290,27],[285,30,290,30,"options"],[285,37,290,37],[285,38,290,38,"platformRoutes"],[285,52,290,52],[285,56,290,56],[285,60,290,60],[286,4,291,4],[286,8,291,8,"hasPlatformExtension"],[286,28,291,28],[286,30,291,30],[287,6,292,8],[287,10,292,12],[287,11,292,13,"usePlatformRoutes"],[287,28,292,30],[287,30,292,32],[288,8,293,12],[289,8,294,12,"specificity"],[289,19,294,23],[289,22,294,26],[289,23,294,27],[289,24,294,28],[290,6,295,8],[290,7,295,9],[290,13,296,13],[290,17,296,17],[290,18,296,18,"options"],[290,25,296,25],[290,26,296,26,"platform"],[290,34,296,34],[290,36,296,36],[291,8,297,12],[292,8,298,12],[293,8,299,12,"specificity"],[293,19,299,23],[293,22,299,26],[293,23,299,27],[293,24,299,28],[294,6,300,8],[294,7,300,9],[294,13,301,13],[294,17,301,17,"platformExtension"],[294,34,301,34],[294,39,301,39,"options"],[294,46,301,46],[294,47,301,47,"platform"],[294,55,301,55],[294,57,301,57],[295,8,302,12],[296,8,303,12,"specificity"],[296,19,303,23],[296,22,303,26],[296,23,303,27],[297,6,304,8],[297,7,304,9],[297,13,305,13],[297,17,305,17,"platformExtension"],[297,34,305,34],[297,39,305,39],[297,47,305,47],[297,51,305,51,"options"],[297,58,305,58],[297,59,305,59,"platform"],[297,67,305,67],[297,72,305,72],[297,77,305,77],[297,79,305,79],[298,8,306,12],[299,8,307,12,"specificity"],[299,19,307,23],[299,22,307,26],[299,23,307,27],[300,6,308,8],[300,7,308,9],[300,13,309,13],[300,17,309,17,"platformExtension"],[300,34,309,34],[300,39,309,39,"options"],[300,46,309,46],[300,47,309,47,"platform"],[300,55,309,55],[300,57,309,57],[301,8,310,12],[302,8,311,12],[303,8,312,12,"specificity"],[303,19,312,23],[303,22,312,26],[303,23,312,27],[303,24,312,28],[304,6,313,8],[305,6,314,8],[305,10,314,12,"isApi"],[305,15,314,17],[305,19,314,21,"specificity"],[305,30,314,32],[305,35,314,37],[305,36,314,38],[305,38,314,40],[306,8,315,12],[306,14,315,18],[306,18,315,22,"Error"],[306,23,315,27],[306,24,315,28],[306,87,315,91,"platformExtension"],[306,104,315,108],[306,117,315,121,"key"],[306,120,315,124],[306,123,315,127],[306,124,315,128],[307,6,316,8],[308,6,317,8,"route"],[308,11,317,13],[308,14,317,16,"route"],[308,19,317,21],[308,20,317,22,"replace"],[308,27,317,29],[308,28,317,30],[308,32,317,34,"RegExp"],[308,38,317,40],[308,39,317,41],[308,43,317,45,"platformExtension"],[308,60,317,62],[308,63,317,65],[308,64,317,66],[308,66,317,68],[308,68,317,70],[308,69,317,71],[309,4,318,4],[310,4,319,4],[310,11,319,11],[311,6,320,8,"route"],[311,11,320,13],[312,6,321,8,"specificity"],[312,17,321,19],[313,6,322,8,"isLayout"],[313,14,322,16],[314,6,323,8,"isApi"],[315,4,324,4],[315,5,324,5],[316,2,325,0],[317,2,326,0],[317,11,326,9,"getIgnoreList"],[317,24,326,22,"getIgnoreList"],[317,25,326,23,"options"],[317,32,326,30],[317,34,326,32],[318,4,327,4],[318,10,327,10,"ignore"],[318,16,327,16],[318,19,327,19],[318,20,327,20],[318,43,327,43],[318,45,327,45],[318,49,327,49,"options"],[318,56,327,56],[318,58,327,58,"ignore"],[318,64,327,64],[318,68,327,68],[318,70,327,70],[318,71,327,71],[318,72,327,72],[319,4,328,4],[319,8,328,8,"options"],[319,15,328,15],[319,17,328,17,"preserveApiRoutes"],[319,34,328,34],[319,39,328,39],[319,43,328,43],[319,45,328,45],[320,6,329,8,"ignore"],[320,12,329,14],[320,13,329,15,"push"],[320,17,329,19],[320,18,329,20],[320,35,329,37],[320,36,329,38],[321,4,330,4],[322,4,331,4],[322,11,331,11,"ignore"],[322,17,331,17],[323,2,332,0],[324,2,333,0,"exports"],[324,9,333,7],[324,10,333,8,"getIgnoreList"],[324,23,333,21],[324,26,333,24,"getIgnoreList"],[324,39,333,37],[325,2,334,0],[326,0,335,0],[327,0,336,0],[328,0,337,0],[329,0,338,0],[330,2,339,0],[330,11,339,9,"extrapolateGroups"],[330,28,339,26,"extrapolateGroups"],[330,29,339,27,"key"],[330,32,339,30],[330,34,339,32,"keys"],[330,38,339,36],[330,41,339,39],[330,45,339,43,"Set"],[330,48,339,46],[330,49,339,47],[330,50,339,48],[330,52,339,50],[331,4,340,4],[331,10,340,10,"match"],[331,15,340,15],[331,18,340,18],[331,19,340,19],[331,20,340,20],[331,22,340,22,"matchers_1"],[331,32,340,32],[331,33,340,33,"matchArrayGroupName"],[331,52,340,52],[331,54,340,54,"key"],[331,57,340,57],[331,58,340,58],[332,4,341,4],[332,8,341,8],[332,9,341,9,"match"],[332,14,341,14],[332,16,341,16],[333,6,342,8,"keys"],[333,10,342,12],[333,11,342,13,"add"],[333,14,342,16],[333,15,342,17,"key"],[333,18,342,20],[333,19,342,21],[334,6,343,8],[334,13,343,15,"keys"],[334,17,343,19],[335,4,344,4],[336,4,345,4],[336,10,345,10,"groups"],[336,16,345,16],[336,19,345,19,"match"],[336,24,345,24],[336,25,345,25,"split"],[336,30,345,30],[336,31,345,31],[336,34,345,34],[336,35,345,35],[337,4,346,4],[337,10,346,10,"groupsSet"],[337,19,346,19],[337,22,346,22],[337,26,346,26,"Set"],[337,29,346,29],[337,30,346,30,"groups"],[337,36,346,36],[337,37,346,37],[338,4,347,4],[338,8,347,8,"groupsSet"],[338,17,347,17],[338,18,347,18,"size"],[338,22,347,22],[338,27,347,27,"groups"],[338,33,347,33],[338,34,347,34,"length"],[338,40,347,40],[338,42,347,42],[339,6,348,8],[339,12,348,14],[339,16,348,18,"Error"],[339,21,348,23],[339,22,348,24],[339,75,348,77,"groups"],[339,81,348,83],[339,90,348,92,"key"],[339,93,348,95],[339,97,348,99],[339,98,348,100],[340,4,349,4],[341,4,350,4],[341,8,350,8,"groups"],[341,14,350,14],[341,15,350,15,"length"],[341,21,350,21],[341,26,350,26],[341,27,350,27],[341,29,350,29],[342,6,351,8,"keys"],[342,10,351,12],[342,11,351,13,"add"],[342,14,351,16],[342,15,351,17,"key"],[342,18,351,20],[342,19,351,21],[343,6,352,8],[343,13,352,15,"keys"],[343,17,352,19],[344,4,353,4],[345,4,354,4],[345,9,354,9],[345,15,354,15,"group"],[345,20,354,20],[345,24,354,24,"groups"],[345,30,354,30],[345,32,354,32],[346,6,355,8,"extrapolateGroups"],[346,23,355,25],[346,24,355,26,"key"],[346,27,355,29],[346,28,355,30,"replace"],[346,35,355,37],[346,36,355,38,"match"],[346,41,355,43],[346,43,355,45,"group"],[346,48,355,50],[346,49,355,51,"trim"],[346,53,355,55],[346,54,355,56],[346,55,355,57],[346,56,355,58],[346,58,355,60,"keys"],[346,62,355,64],[346,63,355,65],[347,4,356,4],[348,4,357,4],[348,11,357,11,"keys"],[348,15,357,15],[349,2,358,0],[350,2,359,0,"exports"],[350,9,359,7],[350,10,359,8,"extrapolateGroups"],[350,27,359,25],[350,30,359,28,"extrapolateGroups"],[350,47,359,45],[351,2,360,0],[351,11,360,9,"generateDynamic"],[351,26,360,24,"generateDynamic"],[351,27,360,25,"path"],[351,31,360,29],[351,33,360,31],[352,4,361,4],[352,10,361,10,"dynamic"],[352,17,361,17],[352,20,361,20,"path"],[352,24,361,24],[352,25,362,9,"split"],[352,30,362,14],[352,31,362,15],[352,34,362,18],[352,35,362,19],[352,36,363,9,"map"],[352,39,363,12],[352,40,363,14,"part"],[352,44,363,18],[352,48,363,23],[353,6,364,8],[353,10,364,12,"part"],[353,14,364,16],[353,19,364,21],[353,31,364,33],[353,33,364,35],[354,8,365,12],[354,15,365,19],[355,10,366,16,"name"],[355,14,366,20],[355,16,366,22],[355,28,366,34],[356,10,367,16,"deep"],[356,14,367,20],[356,16,367,22],[356,20,367,26],[357,10,368,16,"notFound"],[357,18,368,24],[357,20,368,26],[358,8,369,12],[358,9,369,13],[359,6,370,8],[360,6,371,8],[360,12,371,14,"deepDynamicName"],[360,27,371,29],[360,30,371,32],[360,31,371,33],[360,32,371,34],[360,34,371,36,"matchers_1"],[360,44,371,46],[360,45,371,47,"matchDeepDynamicRouteName"],[360,70,371,72],[360,72,371,74,"part"],[360,76,371,78],[360,77,371,79],[361,6,372,8],[361,12,372,14,"dynamicName"],[361,23,372,25],[361,26,372,28,"deepDynamicName"],[361,41,372,43],[361,45,372,47],[361,46,372,48],[361,47,372,49],[361,49,372,51,"matchers_1"],[361,59,372,61],[361,60,372,62,"matchDynamicName"],[361,76,372,78],[361,78,372,80,"part"],[361,82,372,84],[361,83,372,85],[362,6,373,8],[362,10,373,12],[362,11,373,13,"dynamicName"],[362,22,373,24],[362,24,374,12],[362,31,374,19],[362,35,374,23],[363,6,375,8],[363,13,375,15],[364,8,375,17,"name"],[364,12,375,21],[364,14,375,23,"dynamicName"],[364,25,375,34],[365,8,375,36,"deep"],[365,12,375,40],[365,14,375,42],[365,15,375,43],[365,16,375,44,"deepDynamicName"],[366,6,375,60],[366,7,375,61],[367,4,376,4],[367,5,376,5],[367,6,376,6],[367,7,377,9,"filter"],[367,13,377,15],[367,14,377,17,"part"],[367,18,377,21],[367,22,377,26],[367,23,377,27],[367,24,377,28,"part"],[367,28,377,32],[367,29,377,33],[368,4,378,4],[368,11,378,11,"dynamic"],[368,18,378,18],[368,19,378,19,"length"],[368,25,378,25],[368,30,378,30],[368,31,378,31],[368,34,378,34],[368,38,378,38],[368,41,378,41,"dynamic"],[368,48,378,48],[369,2,379,0],[370,2,380,0,"exports"],[370,9,380,7],[370,10,380,8,"generateDynamic"],[370,25,380,23],[370,28,380,26,"generateDynamic"],[370,43,380,41],[371,2,381,0],[371,11,381,9,"appendSitemapRoute"],[371,29,381,27,"appendSitemapRoute"],[371,30,381,28,"directory"],[371,39,381,37],[371,41,381,39,"options"],[371,48,381,46],[371,50,381,48],[372,4,382,4],[372,8,382,8],[372,9,382,9,"directory"],[372,18,382,18],[372,19,382,19,"files"],[372,24,382,24],[372,25,382,25,"has"],[372,28,382,28],[372,29,382,29],[372,39,382,39],[372,40,382,40],[372,44,382,44,"options"],[372,51,382,51],[372,52,382,52,"getSystemRoute"],[372,66,382,66],[372,68,382,68],[373,6,383,8,"directory"],[373,15,383,17],[373,16,383,18,"files"],[373,21,383,23],[373,22,383,24,"set"],[373,25,383,27],[373,26,383,28],[373,36,383,38],[373,38,383,40],[373,39,384,12,"options"],[373,46,384,19],[373,47,384,20,"getSystemRoute"],[373,61,384,34],[373,62,384,35],[374,8,385,16,"type"],[374,12,385,20],[374,14,385,22],[374,21,385,29],[375,8,386,16,"route"],[375,13,386,21],[375,15,386,23],[376,6,387,12],[376,7,387,13],[376,8,387,14],[376,9,388,9],[376,10,388,10],[377,4,389,4],[378,2,390,0],[379,2,391,0],[379,11,391,9,"appendNotFoundRoute"],[379,30,391,28,"appendNotFoundRoute"],[379,31,391,29,"directory"],[379,40,391,38],[379,42,391,40,"options"],[379,49,391,47],[379,51,391,49],[380,4,392,4],[380,8,392,8],[380,9,392,9,"directory"],[380,18,392,18],[380,19,392,19,"files"],[380,24,392,24],[380,25,392,25,"has"],[380,28,392,28],[380,29,392,29],[380,41,392,41],[380,42,392,42],[380,46,392,46,"options"],[380,53,392,53],[380,54,392,54,"getSystemRoute"],[380,68,392,68],[380,70,392,70],[381,6,393,8,"directory"],[381,15,393,17],[381,16,393,18,"files"],[381,21,393,23],[381,22,393,24,"set"],[381,25,393,27],[381,26,393,28],[381,38,393,40],[381,40,393,42],[381,41,394,12,"options"],[381,48,394,19],[381,49,394,20,"getSystemRoute"],[381,63,394,34],[381,64,394,35],[382,8,395,16,"type"],[382,12,395,20],[382,14,395,22],[382,21,395,29],[383,8,396,16,"route"],[383,13,396,21],[383,15,396,23],[384,6,397,12],[384,7,397,13],[384,8,397,14],[384,9,398,9],[384,10,398,10],[385,4,399,4],[386,2,400,0],[387,2,401,0],[387,11,401,9,"getLayoutNode"],[387,24,401,22,"getLayoutNode"],[387,25,401,23,"node"],[387,29,401,27],[387,31,401,29,"options"],[387,38,401,36],[387,40,401,38],[388,4,402,4],[389,0,403,0],[390,0,404,0],[391,0,405,0],[392,4,406,4],[393,4,407,4],[393,10,407,10,"groupName"],[393,19,407,19],[393,22,407,22],[393,23,407,23],[393,24,407,24],[393,26,407,26,"matchers_1"],[393,36,407,36],[393,37,407,37,"matchLastGroupName"],[393,55,407,55],[393,57,407,57,"node"],[393,61,407,61],[393,62,407,62,"route"],[393,67,407,67],[393,68,407,68],[394,4,408,4],[394,10,408,10,"childMatchingGroup"],[394,28,408,28],[394,31,408,31,"node"],[394,35,408,35],[394,36,408,36,"children"],[394,44,408,44],[394,45,408,45,"find"],[394,49,408,49],[394,50,408,51,"child"],[394,55,408,56],[394,59,408,61],[395,6,409,8],[395,13,409,15,"child"],[395,18,409,20],[395,19,409,21,"route"],[395,24,409,26],[395,25,409,27,"replace"],[395,32,409,34],[395,33,409,35],[395,43,409,45],[395,45,409,47],[395,47,409,49],[395,48,409,50],[395,53,409,55,"groupName"],[395,62,409,64],[396,4,410,4],[396,5,410,5],[396,6,410,6],[397,4,411,4],[397,8,411,8,"initialRouteName"],[397,24,411,24],[397,27,411,27,"childMatchingGroup"],[397,45,411,45],[397,47,411,47,"route"],[397,52,411,52],[398,4,412,4],[398,10,412,10,"loaded"],[398,16,412,16],[398,19,412,19,"node"],[398,23,412,23],[398,24,412,24,"loadRoute"],[398,33,412,33],[398,34,412,34],[398,35,412,35],[399,4,413,4],[399,8,413,8,"loaded"],[399,14,413,14],[399,16,413,16,"unstable_settings"],[399,33,413,33],[399,35,413,35],[400,6,414,8],[400,10,414,12],[401,8,415,12],[402,8,416,12,"initialRouteName"],[402,24,416,28],[402,27,416,31,"loaded"],[402,33,416,37],[402,34,416,38,"unstable_settings"],[402,51,416,55],[402,52,416,56,"initialRouteName"],[402,68,416,72],[402,72,416,76,"initialRouteName"],[402,88,416,92],[403,6,417,8],[403,7,417,9],[403,8,418,8],[403,15,418,15,"error"],[403,20,418,20],[403,22,418,22],[404,8,419,12],[404,12,419,16,"error"],[404,17,419,21],[404,29,419,33,"Error"],[404,34,419,38],[404,36,419,40],[405,10,420,16],[405,14,420,20],[405,15,420,21,"error"],[405,20,420,26],[405,21,420,27,"message"],[405,28,420,34],[405,29,420,35,"match"],[405,34,420,40],[405,35,420,41],[405,72,420,78],[405,73,420,79],[405,75,420,81],[406,12,421,20],[406,18,421,26,"error"],[406,23,421,31],[407,10,422,16],[408,8,423,12],[409,6,424,8],[410,6,425,8],[410,10,425,12,"groupName"],[410,19,425,21],[410,21,425,23],[411,8,426,12],[412,8,427,12],[412,14,427,18,"groupSpecificInitialRouteName"],[412,43,427,47],[412,46,427,50,"loaded"],[412,52,427,56],[412,53,427,57,"unstable_settings"],[412,70,427,74],[412,73,427,77,"groupName"],[412,82,427,86],[412,83,427,87],[412,85,427,89,"initialRouteName"],[412,101,427,105],[413,8,428,12,"initialRouteName"],[413,24,428,28],[413,27,428,31,"groupSpecificInitialRouteName"],[413,56,428,60],[413,60,428,64,"initialRouteName"],[413,76,428,80],[414,6,429,8],[415,4,430,4],[416,4,431,4],[416,11,431,11],[417,6,432,8],[417,9,432,11,"node"],[417,13,432,15],[418,6,433,8,"route"],[418,11,433,13],[418,13,433,15,"node"],[418,17,433,19],[418,18,433,20,"route"],[418,23,433,25],[418,24,433,26,"replace"],[418,31,433,33],[418,32,433,34],[418,45,433,47],[418,47,433,49],[418,49,433,51],[418,50,433,52],[419,6,434,8,"children"],[419,14,434,16],[419,16,434,18],[419,18,434,20],[420,6,435,8,"initialRouteName"],[421,4,436,4],[421,5,436,5],[422,2,437,0],[423,2,438,0],[423,11,438,9,"crawlAndAppendInitialRoutesAndEntryFiles"],[423,51,438,49,"crawlAndAppendInitialRoutesAndEntryFiles"],[423,52,438,50,"node"],[423,56,438,54],[423,58,438,56,"options"],[423,65,438,63],[423,67,438,65,"entryPoints"],[423,78,438,76],[423,81,438,79],[423,83,438,81],[423,85,438,83],[424,4,439,4],[424,8,439,8,"node"],[424,12,439,12],[424,13,439,13,"type"],[424,17,439,17],[424,22,439,22],[424,29,439,29],[424,31,439,31],[425,6,440,8,"node"],[425,10,440,12],[425,11,440,13,"entryPoints"],[425,22,440,24],[425,25,440,27],[425,26,440,28],[425,29,440,31],[425,33,440,35,"Set"],[425,36,440,38],[425,37,440,39],[425,38,440,40],[425,41,440,43,"entryPoints"],[425,52,440,54],[425,54,440,56,"node"],[425,58,440,60],[425,59,440,61,"contextKey"],[425,69,440,71],[425,70,440,72],[425,71,440,73],[425,72,440,74],[426,4,441,4],[426,5,441,5],[426,11,442,9],[426,15,442,13,"node"],[426,19,442,17],[426,20,442,18,"type"],[426,24,442,22],[426,29,442,27],[426,37,442,35],[426,39,442,37],[427,6,443,8],[427,10,443,12],[427,11,443,13,"node"],[427,15,443,17],[427,16,443,18,"children"],[427,24,443,26],[427,26,443,28],[428,8,444,12],[428,14,444,18],[428,18,444,22,"Error"],[428,23,444,27],[428,24,444,28],[428,35,444,39,"node"],[428,39,444,43],[428,40,444,44,"contextKey"],[428,50,444,54],[428,87,444,91],[428,88,444,92],[429,6,445,8],[430,6,446,8],[431,6,447,8,"entryPoints"],[431,17,447,19],[431,20,447,22],[431,21,447,23],[431,24,447,26,"entryPoints"],[431,35,447,37],[431,37,447,39,"node"],[431,41,447,43],[431,42,447,44,"contextKey"],[431,52,447,54],[431,53,447,55],[432,6,448,8],[433,0,449,0],[434,0,450,0],[435,0,451,0],[436,0,452,0],[437,0,453,0],[438,6,454,8],[438,12,454,14,"groupName"],[438,21,454,23],[438,24,454,26],[438,25,454,27],[438,26,454,28],[438,28,454,30,"matchers_1"],[438,38,454,40],[438,39,454,41,"matchGroupName"],[438,53,454,55],[438,55,454,57,"node"],[438,59,454,61],[438,60,454,62,"route"],[438,65,454,67],[438,66,454,68],[439,6,455,8],[439,12,455,14,"childMatchingGroup"],[439,30,455,32],[439,33,455,35,"node"],[439,37,455,39],[439,38,455,40,"children"],[439,46,455,48],[439,47,455,49,"find"],[439,51,455,53],[439,52,455,55,"child"],[439,57,455,60],[439,61,455,65],[440,8,456,12],[440,15,456,19,"child"],[440,20,456,24],[440,21,456,25,"route"],[440,26,456,30],[440,27,456,31,"replace"],[440,34,456,38],[440,35,456,39],[440,45,456,49],[440,47,456,51],[440,49,456,53],[440,50,456,54],[440,55,456,59,"groupName"],[440,64,456,68],[441,6,457,8],[441,7,457,9],[441,8,457,10],[442,6,458,8],[442,10,458,12,"initialRouteName"],[442,26,458,28],[442,29,458,31,"childMatchingGroup"],[442,47,458,49],[442,49,458,51,"route"],[442,54,458,56],[443,6,459,8],[444,6,460,8],[444,10,460,12],[444,11,460,13,"options"],[444,18,460,20],[444,19,460,21,"internal_stripLoadRoute"],[444,42,460,44],[444,44,460,46],[445,8,461,12],[445,14,461,18,"loaded"],[445,20,461,24],[445,23,461,27,"node"],[445,27,461,31],[445,28,461,32,"loadRoute"],[445,37,461,41],[445,38,461,42],[445,39,461,43],[446,8,462,12],[446,12,462,16,"loaded"],[446,18,462,22],[446,20,462,24,"unstable_settings"],[446,37,462,41],[446,39,462,43],[447,10,463,16],[447,14,463,20],[448,12,464,20],[449,12,465,20,"initialRouteName"],[449,28,465,36],[449,31,465,39,"loaded"],[449,37,465,45],[449,38,465,46,"unstable_settings"],[449,55,465,63],[449,56,465,64,"initialRouteName"],[449,72,465,80],[449,76,465,84,"initialRouteName"],[449,92,465,100],[450,10,466,16],[450,11,466,17],[450,12,467,16],[450,19,467,23,"error"],[450,24,467,28],[450,26,467,30],[451,12,468,20],[451,16,468,24,"error"],[451,21,468,29],[451,33,468,41,"Error"],[451,38,468,46],[451,40,468,48],[452,14,469,24],[452,18,469,28],[452,19,469,29,"error"],[452,24,469,34],[452,25,469,35,"message"],[452,32,469,42],[452,33,469,43,"match"],[452,38,469,48],[452,39,469,49],[452,76,469,86],[452,77,469,87],[452,79,469,89],[453,16,470,28],[453,22,470,34,"error"],[453,27,470,39],[454,14,471,24],[455,12,472,20],[456,10,473,16],[457,10,474,16],[457,14,474,20,"groupName"],[457,23,474,29],[457,25,474,31],[458,12,475,20],[459,12,476,20],[459,18,476,26,"groupSpecificInitialRouteName"],[459,47,476,55],[459,50,476,58,"loaded"],[459,56,476,64],[459,57,476,65,"unstable_settings"],[459,74,476,82],[459,77,476,85,"groupName"],[459,86,476,94],[459,87,476,95],[459,89,476,97,"initialRouteName"],[459,105,476,113],[460,12,477,20,"initialRouteName"],[460,28,477,36],[460,31,477,39,"groupSpecificInitialRouteName"],[460,60,477,68],[460,64,477,72,"initialRouteName"],[460,80,477,88],[461,10,478,16],[462,8,479,12],[463,6,480,8],[464,6,481,8],[464,10,481,12,"initialRouteName"],[464,26,481,28],[464,28,481,30],[465,8,482,12],[465,14,482,18,"initialRoute"],[465,26,482,30],[465,29,482,33,"node"],[465,33,482,37],[465,34,482,38,"children"],[465,42,482,46],[465,43,482,47,"find"],[465,47,482,51],[465,48,482,53,"child"],[465,53,482,58],[465,57,482,63,"child"],[465,62,482,68],[465,63,482,69,"route"],[465,68,482,74],[465,73,482,79,"initialRouteName"],[465,89,482,95],[465,90,482,96],[466,8,483,12],[466,12,483,16],[466,13,483,17,"initialRoute"],[466,25,483,29],[466,27,483,31],[467,10,484,16],[467,16,484,22,"validInitialRoutes"],[467,34,484,40],[467,37,484,43,"node"],[467,41,484,47],[467,42,484,48,"children"],[467,50,484,56],[467,51,485,21,"filter"],[467,57,485,27],[467,58,485,29,"child"],[467,63,485,34],[467,67,485,39],[467,68,485,40,"child"],[467,73,485,45],[467,74,485,46,"generated"],[467,83,485,55],[467,84,485,56],[467,85,486,21,"map"],[467,88,486,24],[467,89,486,26,"child"],[467,94,486,31],[467,98,486,36],[467,102,486,40,"child"],[467,107,486,45],[467,108,486,46,"route"],[467,113,486,51],[467,116,486,54],[467,117,486,55],[467,118,487,21,"join"],[467,122,487,25],[467,123,487,26],[467,127,487,30],[467,128,487,31],[468,10,488,16],[468,14,488,20,"groupName"],[468,23,488,29],[468,25,488,31],[469,12,489,20],[469,18,489,26],[469,22,489,30,"Error"],[469,27,489,35],[469,28,489,36],[469,38,489,46,"node"],[469,42,489,50],[469,43,489,51,"contextKey"],[469,53,489,61],[469,87,489,95,"initialRouteName"],[469,103,489,111],[469,120,489,128,"groupName"],[469,129,489,137],[469,155,489,163,"validInitialRoutes"],[469,173,489,181],[469,175,489,183],[469,176,489,184],[470,10,490,16],[470,11,490,17],[470,17,491,21],[471,12,492,20],[471,18,492,26],[471,22,492,30,"Error"],[471,27,492,35],[471,28,492,36],[471,38,492,46,"node"],[471,42,492,50],[471,43,492,51,"contextKey"],[471,53,492,61],[471,87,492,95,"initialRouteName"],[471,103,492,111],[471,128,492,136,"validInitialRoutes"],[471,146,492,154],[471,148,492,156],[471,149,492,157],[472,10,493,16],[473,8,494,12],[474,8,495,12],[475,8,496,12,"node"],[475,12,496,16],[475,13,496,17,"initialRouteName"],[475,29,496,33],[475,32,496,36,"initialRouteName"],[475,48,496,52],[476,8,497,12,"entryPoints"],[476,19,497,23],[476,20,497,24,"push"],[476,24,497,28],[476,25,497,29,"initialRoute"],[476,37,497,41],[476,38,497,42,"contextKey"],[476,48,497,52],[476,49,497,53],[477,6,498,8],[478,6,499,8],[478,11,499,13],[478,17,499,19,"child"],[478,22,499,24],[478,26,499,28,"node"],[478,30,499,32],[478,31,499,33,"children"],[478,39,499,41],[478,41,499,43],[479,8,500,12,"crawlAndAppendInitialRoutesAndEntryFiles"],[479,48,500,52],[479,49,500,53,"child"],[479,54,500,58],[479,56,500,60,"options"],[479,63,500,67],[479,65,500,69,"entryPoints"],[479,76,500,80],[479,77,500,81],[480,6,501,8],[481,4,502,4],[482,2,503,0],[483,2,504,0],[483,11,504,9,"getMostSpecific"],[483,26,504,24,"getMostSpecific"],[483,27,504,25,"routes"],[483,33,504,31],[483,35,504,33],[484,4,505,4],[484,10,505,10,"route"],[484,15,505,15],[484,18,505,18,"routes"],[484,24,505,24],[484,25,505,25,"routes"],[484,31,505,31],[484,32,505,32,"length"],[484,38,505,38],[484,41,505,41],[484,42,505,42],[484,43,505,43],[485,4,506,4],[485,8,506,8],[485,9,506,9,"routes"],[485,15,506,15],[485,16,506,16],[485,17,506,17],[485,18,506,18],[485,20,506,20],[486,6,507,8],[486,12,507,14],[486,16,507,18,"Error"],[486,21,507,23],[486,22,507,24],[486,34,507,36,"route"],[486,39,507,41],[486,40,507,42,"contextKey"],[486,50,507,52],[486,120,507,122],[486,121,507,123],[487,4,508,4],[488,4,509,4],[489,4,510,4],[490,4,511,4],[490,11,511,11,"routes"],[490,17,511,17],[490,18,511,18,"routes"],[490,24,511,24],[490,25,511,25,"length"],[490,31,511,31],[490,34,511,34],[490,35,511,35],[490,36,511,36],[491,2,512,0],[492,0,512,1],[492,3]],"functionMap":{"names":["<global>","getRoutes","getDirectoryTree","ignoreList.some$argument_0","node.loadRoute","flattenDirectoryTreeToRoutes","getFileMeta","getIgnoreList","extrapolateGroups","generateDynamic","path.split.map$argument_0","path.split.map.filter$argument_0","appendSitemapRoute","appendNotFoundRoute","getLayoutNode","node.children.find$argument_0","crawlAndAppendInitialRoutesAndEntryFiles","node.children.filter$argument_0","node.children.filter.map$argument_0","getMostSpecific"],"mappings":"AAA;ACiB;CDW;AEK;4BCgB,+BD;YEW;aF+B;CFmI;AKI;CL2C;AMC;CNsD;AOC;CPM;AQO;CRmB;ASE;aCG;KDa;gBEC,gBF;CTE;AYE;CZS;AaC;CbS;AcC;kDCO;KDE;Cd2B;AgBC;sDDiB;SCE;oDDyB,2CC;4BCG,2BD;yBEC,6BF;ChBiB;AmBC;CnBQ"}},"type":"js/module"}]}