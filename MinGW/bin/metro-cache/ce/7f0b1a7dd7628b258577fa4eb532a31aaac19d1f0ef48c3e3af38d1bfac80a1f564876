{"dependencies":[{"name":"query-string","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":27,"column":33,"index":1227},"end":{"line":27,"column":56,"index":1250}}],"key":"GFSDDT7dIJnvWSebFhtcKgwXBCQ="}},{"name":"./getPathFromState-forks","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":28,"column":26,"index":1279},"end":{"line":28,"column":61,"index":1314}}],"key":"0jhtinFbCJO2FpQ/0MZEN6C03us="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = {\n        enumerable: true,\n        get: function () {\n          return m[k];\n        }\n      };\n    }\n    Object.defineProperty(o, k2, desc);\n  } : function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n  });\n  var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n    Object.defineProperty(o, \"default\", {\n      enumerable: true,\n      value: v\n    });\n  } : function (o, v) {\n    o[\"default\"] = v;\n  });\n  var __importStar = this && this.__importStar || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.appendBaseUrl = exports.getPathDataFromState = exports.getPathFromState = void 0;\n  const queryString = __importStar(require(_dependencyMap[0], \"query-string\"));\n  const expo = __importStar(require(_dependencyMap[1], \"./getPathFromState-forks\"));\n  // END FORK\n  const getActiveRoute = state => {\n    const route = typeof state.index === 'number' ? state.routes[state.index] : state.routes[state.routes.length - 1];\n    if (route.state) {\n      return getActiveRoute(route.state);\n    }\n    return route;\n  };\n  let cachedNormalizedConfigs = [undefined, {}];\n  /**\n   * Utility to serialize a navigation state object to a path string.\n   *\n   * @example\n   * ```js\n   * getPathFromState(\n   *   {\n   *     routes: [\n   *       {\n   *         name: 'Chat',\n   *         params: { author: 'Jane', id: 42 },\n   *       },\n   *     ],\n   *   },\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         stringify: { author: author => author.toLowerCase() }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   *\n   * @param state Navigation state to serialize.\n   * @param options Extra options to fine-tune how to serialize the path.\n   * @returns Path representing the state, e.g. /foo/bar?count=42.\n   */\n  function getPathFromState(state, options) {\n    return getPathDataFromState(state, options).path;\n  }\n  exports.getPathFromState = getPathFromState;\n  function getPathDataFromState(state, options) {\n    if (state == null) {\n      throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");\n    }\n    if (options) {\n      // START FORK\n      expo.validatePathConfig(options);\n      // validatePathConfig(options);\n      // END FORK\n    }\n    // Create a normalized configs object which will be easier to use\n    if (cachedNormalizedConfigs[0] !== options?.screens) {\n      cachedNormalizedConfigs = [options?.screens, options?.screens ? createNormalizedConfigs(options.screens) : {}];\n    }\n    const configs = cachedNormalizedConfigs[1];\n    let path = '/';\n    let current = state;\n    const allParams = {};\n    while (current) {\n      let index = typeof current.index === 'number' ? current.index : 0;\n      let route = current.routes[index];\n      let pattern;\n      let focusedParams;\n      const focusedRoute = getActiveRoute(state);\n      let currentOptions = configs;\n      // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n      const nestedRouteNames = [];\n      let hasNext = true;\n      while (route.name in currentOptions && hasNext) {\n        pattern = currentOptions[route.name].pattern;\n        nestedRouteNames.push(route.name);\n        if (route.params) {\n          const stringify = currentOptions[route.name]?.stringify;\n          // START FORK\n          // This mutates allParams\n          const currentParams = expo.fixCurrentParams(allParams, route, stringify);\n          // const currentParams = Object.fromEntries(\n          //   Object.entries(route.params).map(([key, value]) => [\n          //     key,\n          //     stringify?.[key] ? stringify[key](value) : String(value),\n          //   ])\n          // );\n          // if (pattern) {\n          //   Object.assign(allParams, currentParams);\n          // }\n          // END FORK\n          if (focusedRoute === route) {\n            // If this is the focused route, keep the params for later use\n            // We save it here since it's been stringified already\n            focusedParams = {\n              ...currentParams\n            };\n            pattern?.split('/').filter(p => expo.isDynamicPart(p))\n            // eslint-disable-next-line no-loop-func\n            .forEach(p => {\n              const name = expo.getParamName(p);\n              // Remove the params present in the pattern since we'll only use the rest for query string\n              if (focusedParams) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete focusedParams[name];\n              }\n            });\n          }\n        }\n        // If there is no `screens` property or no nested state, we return pattern\n        if (!currentOptions[route.name].screens || route.state === undefined) {\n          // START FORK\n          // Expo Router allows you to navigate to a (group) and not specify a target screen\n          // This is different from React Navigation, which requires a target screen\n          // We need to handle this case here, by selecting either the index screen or the first screen of the group\n          // IMPORTANT: This does not affect groups that use _layout files with initialRouteNames\n          // Layout files create a new route config. This only affects groups without layouts that have their screens\n          // hoisted.\n          // Example:\n          // - /home/_layout\n          // - /home/(a|b|c)/index          --> Hoisted to /home/_layout navigator\n          // - /home/(a|b|c)/other          --> Hoisted to /home/_layout navigator\n          // - /home/(profile)/me           --> Hoisted to /home/_layout navigator\n          //\n          // route.push('/home/(a)')        --> This should navigate to /home/(a)/index\n          // route.push('/home/(profile)')  --> This should navigate to /home/(profile)/me\n          const screens = currentOptions[route.name].screens;\n          // Determine what screen the user wants to navigate to. If no screen is specified, assume there is an index screen\n          // In the examples above, this ensures that /home/(a) navigates to /home/(a)/index\n          const targetScreen =\n          // This is typed as unknown, so we need to add these extra assertions\n          route.params && 'screen' in route.params && typeof route.params.screen === 'string' ? route.params.screen : 'index';\n          // If the target screen is not in the screens object, default to the first screen\n          // In the examples above, this ensures that /home/(profile) navigates to /home/(profile)/me\n          // As there is no index screen in the group\n          const screen = screens ? screens[targetScreen] ? targetScreen : Object.keys(screens)[0] : undefined;\n          if (screen && screens && currentOptions[route.name].screens?.[screen]) {\n            route = {\n              ...screens[screen],\n              name: screen,\n              key: screen\n            };\n            currentOptions = screens;\n          } else {\n            hasNext = false;\n          }\n          // hasNext = false;\n          // END FORK\n        } else {\n          index = typeof route.state.index === 'number' ? route.state.index : route.state.routes.length - 1;\n          const nextRoute = route.state.routes[index];\n          const nestedConfig = currentOptions[route.name].screens;\n          // if there is config for next route name, we go deeper\n          if (nestedConfig && nextRoute.name in nestedConfig) {\n            route = nextRoute;\n            currentOptions = nestedConfig;\n          } else {\n            // If not, there is no sense in going deeper in config\n            hasNext = false;\n          }\n        }\n      }\n      if (pattern === undefined) {\n        pattern = nestedRouteNames.join('/');\n      }\n      if (currentOptions[route.name] !== undefined) {\n        // START FORK\n        path += expo.getPathWithConventionsCollapsed({\n          ...options,\n          pattern,\n          route,\n          params: allParams,\n          initialRouteName: configs[route.name]?.initialRouteName\n        });\n        // path += pattern\n        //   .split('/')\n        //   .map((p) => {\n        //     const name = getParamName(p);\n        //     // We don't know what to show for wildcard patterns\n        //     // Showing the route name seems ok, though whatever we show here will be incorrect\n        //     // Since the page doesn't actually exist\n        //     if (p === '*') {\n        //       return route.name;\n        //     }\n        //     // If the path has a pattern for a param, put the param in the path\n        //     if (p.startsWith(':')) {\n        //       const value = allParams[name];\n        //       if (value === undefined && p.endsWith('?')) {\n        //         // Optional params without value assigned in route.params should be ignored\n        //         return '';\n        //       }\n        //       // Valid characters according to\n        //       // https://datatracker.ietf.org/doc/html/rfc3986#section-3.3 (see pchar definition)\n        //       return String(value).replace(/[^A-Za-z0-9\\-._~!$&'()*+,;=:@]/g, (char) =>\n        //         encodeURIComponent(char)\n        //       );\n        //     }\n        //     return encodeURIComponent(p);\n        //   })\n        //   .join('/');\n        // } else {\n      } else if (!route.name.startsWith('+')) {\n        path += encodeURIComponent(route.name);\n      }\n      // END FORK\n      if (!focusedParams) {\n        focusedParams = focusedRoute.params;\n      }\n      if (route.state) {\n        path += '/';\n      } else if (focusedParams) {\n        for (const param in focusedParams) {\n          if (focusedParams[param] === 'undefined') {\n            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n            delete focusedParams[param];\n          }\n        }\n        // START FORK\n        delete focusedParams['#'];\n        // END FORK\n        const query = queryString.stringify(focusedParams, {\n          sort: false\n        });\n        if (query) {\n          path += `?${query}`;\n        }\n      }\n      current = route.state;\n    }\n    // Remove multiple as well as trailing slashes\n    path = path.replace(/\\/+/g, '/');\n    path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n    // Include the root path if specified\n    if (options?.path) {\n      path = joinPaths(options.path, path);\n    }\n    // START FORK\n    path = expo.appendBaseUrl(path);\n    if (allParams['#']) {\n      path += `#${allParams['#']}`;\n    }\n    // END FORK\n    // START FORK\n    return {\n      path,\n      params: allParams\n    };\n    // END FORK\n  }\n  exports.getPathDataFromState = getPathDataFromState;\n  // const getParamName = (pattern: string) => pattern.replace(/^:/, '').replace(/\\?$/, '');\n  const joinPaths = (...paths) => [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n  const createConfigItem = (config, parentPattern) => {\n    if (typeof config === 'string') {\n      // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n      const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n      return {\n        pattern\n      };\n    }\n    if (config.exact && config.path === undefined) {\n      throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n    }\n    // If an object is specified as the value (e.g. Foo: { ... }),\n    // It can have `path` property and `screens` prop which has nested configs\n    const pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n    const screens = config.screens ? createNormalizedConfigs(config.screens, pattern) : undefined;\n    return {\n      // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n      pattern: pattern?.split('/').filter(Boolean).join('/'),\n      stringify: config.stringify,\n      screens\n    };\n  };\n  const createNormalizedConfigs = (options, pattern) => Object.fromEntries(Object.entries(options).map(([name, c]) => {\n    const result = createConfigItem(c, pattern);\n    return [name, result];\n  }));\n  function appendBaseUrl(path, baseUrl = \"\") {\n    if (process.env.NODE_ENV !== 'development') {\n      if (baseUrl) {\n        return `/${baseUrl.replace(/^\\/+/, '').replace(/\\/$/, '')}${path}`;\n      }\n    }\n    return path;\n  }\n  exports.appendBaseUrl = appendBaseUrl;\n});","lineCount":325,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[4,6,2,4,"__createBinding"],[4,21,2,19],[4,24,2,23],[4,28,2,27],[4,32,2,31],[4,36,2,35],[4,37,2,36,"__createBinding"],[4,52,2,51],[4,57,2,57,"Object"],[4,63,2,63],[4,64,2,64,"create"],[4,70,2,70],[4,73,2,74],[4,83,2,83,"o"],[4,84,2,84],[4,86,2,86,"m"],[4,87,2,87],[4,89,2,89,"k"],[4,90,2,90],[4,92,2,92,"k2"],[4,94,2,94],[4,96,2,96],[5,4,3,4],[5,8,3,8,"k2"],[5,10,3,10],[5,15,3,15,"undefined"],[5,24,3,24],[5,26,3,26,"k2"],[5,28,3,28],[5,31,3,31,"k"],[5,32,3,32],[6,4,4,4],[6,8,4,8,"desc"],[6,12,4,12],[6,15,4,15,"Object"],[6,21,4,21],[6,22,4,22,"getOwnPropertyDescriptor"],[6,46,4,46],[6,47,4,47,"m"],[6,48,4,48],[6,50,4,50,"k"],[6,51,4,51],[6,52,4,52],[7,4,5,4],[7,8,5,8],[7,9,5,9,"desc"],[7,13,5,13],[7,18,5,18],[7,23,5,23],[7,27,5,27,"desc"],[7,31,5,31],[7,34,5,34],[7,35,5,35,"m"],[7,36,5,36],[7,37,5,37,"__esModule"],[7,47,5,47],[7,50,5,50,"desc"],[7,54,5,54],[7,55,5,55,"writable"],[7,63,5,63],[7,67,5,67,"desc"],[7,71,5,71],[7,72,5,72,"configurable"],[7,84,5,84],[7,85,5,85],[7,87,5,87],[8,6,6,6,"desc"],[8,10,6,10],[8,13,6,13],[9,8,6,15,"enumerable"],[9,18,6,25],[9,20,6,27],[9,24,6,31],[10,8,6,33,"get"],[10,11,6,36],[10,13,6,38],[10,22,6,38,"get"],[10,23,6,38],[10,25,6,49],[11,10,6,51],[11,17,6,58,"m"],[11,18,6,59],[11,19,6,60,"k"],[11,20,6,61],[11,21,6,62],[12,8,6,64],[13,6,6,66],[13,7,6,67],[14,4,7,4],[15,4,8,4,"Object"],[15,10,8,10],[15,11,8,11,"defineProperty"],[15,25,8,25],[15,26,8,26,"o"],[15,27,8,27],[15,29,8,29,"k2"],[15,31,8,31],[15,33,8,33,"desc"],[15,37,8,37],[15,38,8,38],[16,2,9,0],[16,3,9,1],[16,6,9,6],[16,16,9,15,"o"],[16,17,9,16],[16,19,9,18,"m"],[16,20,9,19],[16,22,9,21,"k"],[16,23,9,22],[16,25,9,24,"k2"],[16,27,9,26],[16,29,9,28],[17,4,10,4],[17,8,10,8,"k2"],[17,10,10,10],[17,15,10,15,"undefined"],[17,24,10,24],[17,26,10,26,"k2"],[17,28,10,28],[17,31,10,31,"k"],[17,32,10,32],[18,4,11,4,"o"],[18,5,11,5],[18,6,11,6,"k2"],[18,8,11,8],[18,9,11,9],[18,12,11,12,"m"],[18,13,11,13],[18,14,11,14,"k"],[18,15,11,15],[18,16,11,16],[19,2,12,0],[19,3,12,2],[19,4,12,3],[20,2,13,0],[20,6,13,4,"__setModuleDefault"],[20,24,13,22],[20,27,13,26],[20,31,13,30],[20,35,13,34],[20,39,13,38],[20,40,13,39,"__setModuleDefault"],[20,58,13,57],[20,63,13,63,"Object"],[20,69,13,69],[20,70,13,70,"create"],[20,76,13,76],[20,79,13,80],[20,89,13,89,"o"],[20,90,13,90],[20,92,13,92,"v"],[20,93,13,93],[20,95,13,95],[21,4,14,4,"Object"],[21,10,14,10],[21,11,14,11,"defineProperty"],[21,25,14,25],[21,26,14,26,"o"],[21,27,14,27],[21,29,14,29],[21,38,14,38],[21,40,14,40],[22,6,14,42,"enumerable"],[22,16,14,52],[22,18,14,54],[22,22,14,58],[23,6,14,60,"value"],[23,11,14,65],[23,13,14,67,"v"],[24,4,14,69],[24,5,14,70],[24,6,14,71],[25,2,15,0],[25,3,15,1],[25,6,15,5],[25,16,15,14,"o"],[25,17,15,15],[25,19,15,17,"v"],[25,20,15,18],[25,22,15,20],[26,4,16,4,"o"],[26,5,16,5],[26,6,16,6],[26,15,16,15],[26,16,16,16],[26,19,16,19,"v"],[26,20,16,20],[27,2,17,0],[27,3,17,1],[27,4,17,2],[28,2,18,0],[28,6,18,4,"__importStar"],[28,18,18,16],[28,21,18,20],[28,25,18,24],[28,29,18,28],[28,33,18,32],[28,34,18,33,"__importStar"],[28,46,18,45],[28,50,18,50],[28,60,18,60,"mod"],[28,63,18,63],[28,65,18,65],[29,4,19,4],[29,8,19,8,"mod"],[29,11,19,11],[29,15,19,15,"mod"],[29,18,19,18],[29,19,19,19,"__esModule"],[29,29,19,29],[29,31,19,31],[29,38,19,38,"mod"],[29,41,19,41],[30,4,20,4],[30,8,20,8,"result"],[30,14,20,14],[30,17,20,17],[30,18,20,18],[30,19,20,19],[31,4,21,4],[31,8,21,8,"mod"],[31,11,21,11],[31,15,21,15],[31,19,21,19],[31,21,21,21],[31,26,21,26],[31,30,21,30,"k"],[31,31,21,31],[31,35,21,35,"mod"],[31,38,21,38],[31,40,21,40],[31,44,21,44,"k"],[31,45,21,45],[31,50,21,50],[31,59,21,59],[31,63,21,63,"Object"],[31,69,21,69],[31,70,21,70,"prototype"],[31,79,21,79],[31,80,21,80,"hasOwnProperty"],[31,94,21,94],[31,95,21,95,"call"],[31,99,21,99],[31,100,21,100,"mod"],[31,103,21,103],[31,105,21,105,"k"],[31,106,21,106],[31,107,21,107],[31,109,21,109,"__createBinding"],[31,124,21,124],[31,125,21,125,"result"],[31,131,21,131],[31,133,21,133,"mod"],[31,136,21,136],[31,138,21,138,"k"],[31,139,21,139],[31,140,21,140],[32,4,22,4,"__setModuleDefault"],[32,22,22,22],[32,23,22,23,"result"],[32,29,22,29],[32,31,22,31,"mod"],[32,34,22,34],[32,35,22,35],[33,4,23,4],[33,11,23,11,"result"],[33,17,23,17],[34,2,24,0],[34,3,24,1],[35,2,25,0,"Object"],[35,8,25,6],[35,9,25,7,"defineProperty"],[35,23,25,21],[35,24,25,22,"exports"],[35,31,25,29],[35,33,25,31],[35,45,25,43],[35,47,25,45],[36,4,25,47,"value"],[36,9,25,52],[36,11,25,54],[37,2,25,59],[37,3,25,60],[37,4,25,61],[38,2,26,0,"exports"],[38,9,26,7],[38,10,26,8,"appendBaseUrl"],[38,23,26,21],[38,26,26,24,"exports"],[38,33,26,31],[38,34,26,32,"getPathDataFromState"],[38,54,26,52],[38,57,26,55,"exports"],[38,64,26,62],[38,65,26,63,"getPathFromState"],[38,81,26,79],[38,84,26,82],[38,89,26,87],[38,90,26,88],[39,2,27,0],[39,8,27,6,"queryString"],[39,19,27,17],[39,22,27,20,"__importStar"],[39,34,27,32],[39,35,27,33,"require"],[39,42,27,40],[39,43,27,40,"_dependencyMap"],[39,57,27,40],[39,76,27,55],[39,77,27,56],[39,78,27,57],[40,2,28,0],[40,8,28,6,"expo"],[40,12,28,10],[40,15,28,13,"__importStar"],[40,27,28,25],[40,28,28,26,"require"],[40,35,28,33],[40,36,28,33,"_dependencyMap"],[40,50,28,33],[40,81,28,60],[40,82,28,61],[40,83,28,62],[41,2,29,0],[42,2,30,0],[42,8,30,6,"getActiveRoute"],[42,22,30,20],[42,25,30,24,"state"],[42,30,30,29],[42,34,30,34],[43,4,31,4],[43,10,31,10,"route"],[43,15,31,15],[43,18,31,18],[43,25,31,25,"state"],[43,30,31,30],[43,31,31,31,"index"],[43,36,31,36],[43,41,31,41],[43,49,31,49],[43,52,32,10,"state"],[43,57,32,15],[43,58,32,16,"routes"],[43,64,32,22],[43,65,32,23,"state"],[43,70,32,28],[43,71,32,29,"index"],[43,76,32,34],[43,77,32,35],[43,80,33,10,"state"],[43,85,33,15],[43,86,33,16,"routes"],[43,92,33,22],[43,93,33,23,"state"],[43,98,33,28],[43,99,33,29,"routes"],[43,105,33,35],[43,106,33,36,"length"],[43,112,33,42],[43,115,33,45],[43,116,33,46],[43,117,33,47],[44,4,34,4],[44,8,34,8,"route"],[44,13,34,13],[44,14,34,14,"state"],[44,19,34,19],[44,21,34,21],[45,6,35,8],[45,13,35,15,"getActiveRoute"],[45,27,35,29],[45,28,35,30,"route"],[45,33,35,35],[45,34,35,36,"state"],[45,39,35,41],[45,40,35,42],[46,4,36,4],[47,4,37,4],[47,11,37,11,"route"],[47,16,37,16],[48,2,38,0],[48,3,38,1],[49,2,39,0],[49,6,39,4,"cachedNormalizedConfigs"],[49,29,39,27],[49,32,39,30],[49,33,40,4,"undefined"],[49,42,40,13],[49,44,41,4],[49,45,41,5],[49,46,41,6],[49,47,42,1],[50,2,43,0],[51,0,44,0],[52,0,45,0],[53,0,46,0],[54,0,47,0],[55,0,48,0],[56,0,49,0],[57,0,50,0],[58,0,51,0],[59,0,52,0],[60,0,53,0],[61,0,54,0],[62,0,55,0],[63,0,56,0],[64,0,57,0],[65,0,58,0],[66,0,59,0],[67,0,60,0],[68,0,61,0],[69,0,62,0],[70,0,63,0],[71,0,64,0],[72,0,65,0],[73,0,66,0],[74,0,67,0],[75,0,68,0],[76,0,69,0],[77,0,70,0],[78,0,71,0],[79,2,72,0],[79,11,72,9,"getPathFromState"],[79,27,72,25,"getPathFromState"],[79,28,72,26,"state"],[79,33,72,31],[79,35,72,33,"options"],[79,42,72,40],[79,44,72,42],[80,4,73,4],[80,11,73,11,"getPathDataFromState"],[80,31,73,31],[80,32,73,32,"state"],[80,37,73,37],[80,39,73,39,"options"],[80,46,73,46],[80,47,73,47],[80,48,73,48,"path"],[80,52,73,52],[81,2,74,0],[82,2,75,0,"exports"],[82,9,75,7],[82,10,75,8,"getPathFromState"],[82,26,75,24],[82,29,75,27,"getPathFromState"],[82,45,75,43],[83,2,76,0],[83,11,76,9,"getPathDataFromState"],[83,31,76,29,"getPathDataFromState"],[83,32,76,30,"state"],[83,37,76,35],[83,39,76,37,"options"],[83,46,76,44],[83,48,76,46],[84,4,77,4],[84,8,77,8,"state"],[84,13,77,13],[84,17,77,17],[84,21,77,21],[84,23,77,23],[85,6,78,8],[85,12,78,14,"Error"],[85,17,78,19],[85,18,78,20],[85,97,78,99],[85,98,78,100],[86,4,79,4],[87,4,80,4],[87,8,80,8,"options"],[87,15,80,15],[87,17,80,17],[88,6,81,8],[89,6,82,8,"expo"],[89,10,82,12],[89,11,82,13,"validatePathConfig"],[89,29,82,31],[89,30,82,32,"options"],[89,37,82,39],[89,38,82,40],[90,6,83,8],[91,6,84,8],[92,4,85,4],[93,4,86,4],[94,4,87,4],[94,8,87,8,"cachedNormalizedConfigs"],[94,31,87,31],[94,32,87,32],[94,33,87,33],[94,34,87,34],[94,39,87,39,"options"],[94,46,87,46],[94,48,87,48,"screens"],[94,55,87,55],[94,57,87,57],[95,6,88,8,"cachedNormalizedConfigs"],[95,29,88,31],[95,32,88,34],[95,33,89,12,"options"],[95,40,89,19],[95,42,89,21,"screens"],[95,49,89,28],[95,51,90,12,"options"],[95,58,90,19],[95,60,90,21,"screens"],[95,67,90,28],[95,70,90,31,"createNormalizedConfigs"],[95,93,90,54],[95,94,90,55,"options"],[95,101,90,62],[95,102,90,63,"screens"],[95,109,90,70],[95,110,90,71],[95,113,90,74],[95,114,90,75],[95,115,90,76],[95,116,91,9],[96,4,92,4],[97,4,93,4],[97,10,93,10,"configs"],[97,17,93,17],[97,20,93,20,"cachedNormalizedConfigs"],[97,43,93,43],[97,44,93,44],[97,45,93,45],[97,46,93,46],[98,4,94,4],[98,8,94,8,"path"],[98,12,94,12],[98,15,94,15],[98,18,94,18],[99,4,95,4],[99,8,95,8,"current"],[99,15,95,15],[99,18,95,18,"state"],[99,23,95,23],[100,4,96,4],[100,10,96,10,"allParams"],[100,19,96,19],[100,22,96,22],[100,23,96,23],[100,24,96,24],[101,4,97,4],[101,11,97,11,"current"],[101,18,97,18],[101,20,97,20],[102,6,98,8],[102,10,98,12,"index"],[102,15,98,17],[102,18,98,20],[102,25,98,27,"current"],[102,32,98,34],[102,33,98,35,"index"],[102,38,98,40],[102,43,98,45],[102,51,98,53],[102,54,98,56,"current"],[102,61,98,63],[102,62,98,64,"index"],[102,67,98,69],[102,70,98,72],[102,71,98,73],[103,6,99,8],[103,10,99,12,"route"],[103,15,99,17],[103,18,99,20,"current"],[103,25,99,27],[103,26,99,28,"routes"],[103,32,99,34],[103,33,99,35,"index"],[103,38,99,40],[103,39,99,41],[104,6,100,8],[104,10,100,12,"pattern"],[104,17,100,19],[105,6,101,8],[105,10,101,12,"focusedParams"],[105,23,101,25],[106,6,102,8],[106,12,102,14,"focusedRoute"],[106,24,102,26],[106,27,102,29,"getActiveRoute"],[106,41,102,43],[106,42,102,44,"state"],[106,47,102,49],[106,48,102,50],[107,6,103,8],[107,10,103,12,"currentOptions"],[107,24,103,26],[107,27,103,29,"configs"],[107,34,103,36],[108,6,104,8],[109,6,105,8],[109,12,105,14,"nestedRouteNames"],[109,28,105,30],[109,31,105,33],[109,33,105,35],[110,6,106,8],[110,10,106,12,"hasNext"],[110,17,106,19],[110,20,106,22],[110,24,106,26],[111,6,107,8],[111,13,107,15,"route"],[111,18,107,20],[111,19,107,21,"name"],[111,23,107,25],[111,27,107,29,"currentOptions"],[111,41,107,43],[111,45,107,47,"hasNext"],[111,52,107,54],[111,54,107,56],[112,8,108,12,"pattern"],[112,15,108,19],[112,18,108,22,"currentOptions"],[112,32,108,36],[112,33,108,37,"route"],[112,38,108,42],[112,39,108,43,"name"],[112,43,108,47],[112,44,108,48],[112,45,108,49,"pattern"],[112,52,108,56],[113,8,109,12,"nestedRouteNames"],[113,24,109,28],[113,25,109,29,"push"],[113,29,109,33],[113,30,109,34,"route"],[113,35,109,39],[113,36,109,40,"name"],[113,40,109,44],[113,41,109,45],[114,8,110,12],[114,12,110,16,"route"],[114,17,110,21],[114,18,110,22,"params"],[114,24,110,28],[114,26,110,30],[115,10,111,16],[115,16,111,22,"stringify"],[115,25,111,31],[115,28,111,34,"currentOptions"],[115,42,111,48],[115,43,111,49,"route"],[115,48,111,54],[115,49,111,55,"name"],[115,53,111,59],[115,54,111,60],[115,56,111,62,"stringify"],[115,65,111,71],[116,10,112,16],[117,10,113,16],[118,10,114,16],[118,16,114,22,"currentParams"],[118,29,114,35],[118,32,114,38,"expo"],[118,36,114,42],[118,37,114,43,"fixCurrentParams"],[118,53,114,59],[118,54,114,60,"allParams"],[118,63,114,69],[118,65,114,71,"route"],[118,70,114,76],[118,72,114,78,"stringify"],[118,81,114,87],[118,82,114,88],[119,10,115,16],[120,10,116,16],[121,10,117,16],[122,10,118,16],[123,10,119,16],[124,10,120,16],[125,10,121,16],[126,10,122,16],[127,10,123,16],[128,10,124,16],[129,10,125,16],[129,14,125,20,"focusedRoute"],[129,26,125,32],[129,31,125,37,"route"],[129,36,125,42],[129,38,125,44],[130,12,126,20],[131,12,127,20],[132,12,128,20,"focusedParams"],[132,25,128,33],[132,28,128,36],[133,14,128,38],[133,17,128,41,"currentParams"],[134,12,128,55],[134,13,128,56],[135,12,129,20,"pattern"],[135,19,129,27],[135,21,130,26,"split"],[135,26,130,31],[135,27,130,32],[135,30,130,35],[135,31,130,36],[135,32,131,25,"filter"],[135,38,131,31],[135,39,131,33,"p"],[135,40,131,34],[135,44,131,39,"expo"],[135,48,131,43],[135,49,131,44,"isDynamicPart"],[135,62,131,57],[135,63,131,58,"p"],[135,64,131,59],[135,65,131,60],[136,12,132,24],[137,12,132,24],[137,13,133,25,"forEach"],[137,20,133,32],[137,21,133,34,"p"],[137,22,133,35],[137,26,133,40],[138,14,134,24],[138,20,134,30,"name"],[138,24,134,34],[138,27,134,37,"expo"],[138,31,134,41],[138,32,134,42,"getParamName"],[138,44,134,54],[138,45,134,55,"p"],[138,46,134,56],[138,47,134,57],[139,14,135,24],[140,14,136,24],[140,18,136,28,"focusedParams"],[140,31,136,41],[140,33,136,43],[141,16,137,28],[142,16,138,28],[142,23,138,35,"focusedParams"],[142,36,138,48],[142,37,138,49,"name"],[142,41,138,53],[142,42,138,54],[143,14,139,24],[144,12,140,20],[144,13,140,21],[144,14,140,22],[145,10,141,16],[146,8,142,12],[147,8,143,12],[148,8,144,12],[148,12,144,16],[148,13,144,17,"currentOptions"],[148,27,144,31],[148,28,144,32,"route"],[148,33,144,37],[148,34,144,38,"name"],[148,38,144,42],[148,39,144,43],[148,40,144,44,"screens"],[148,47,144,51],[148,51,144,55,"route"],[148,56,144,60],[148,57,144,61,"state"],[148,62,144,66],[148,67,144,71,"undefined"],[148,76,144,80],[148,78,144,82],[149,10,145,16],[150,10,146,16],[151,10,147,16],[152,10,148,16],[153,10,149,16],[154,10,150,16],[155,10,151,16],[156,10,152,16],[157,10,153,16],[158,10,154,16],[159,10,155,16],[160,10,156,16],[161,10,157,16],[162,10,158,16],[163,10,159,16],[164,10,160,16],[164,16,160,22,"screens"],[164,23,160,29],[164,26,160,32,"currentOptions"],[164,40,160,46],[164,41,160,47,"route"],[164,46,160,52],[164,47,160,53,"name"],[164,51,160,57],[164,52,160,58],[164,53,160,59,"screens"],[164,60,160,66],[165,10,161,16],[166,10,162,16],[167,10,163,16],[167,16,163,22,"targetScreen"],[167,28,163,34],[168,10,164,16],[169,10,165,16,"route"],[169,15,165,21],[169,16,165,22,"params"],[169,22,165,28],[169,26,165,32],[169,34,165,40],[169,38,165,44,"route"],[169,43,165,49],[169,44,165,50,"params"],[169,50,165,56],[169,54,165,60],[169,61,165,67,"route"],[169,66,165,72],[169,67,165,73,"params"],[169,73,165,79],[169,74,165,80,"screen"],[169,80,165,86],[169,85,165,91],[169,93,165,99],[169,96,166,22,"route"],[169,101,166,27],[169,102,166,28,"params"],[169,108,166,34],[169,109,166,35,"screen"],[169,115,166,41],[169,118,167,22],[169,125,167,29],[170,10,168,16],[171,10,169,16],[172,10,170,16],[173,10,171,16],[173,16,171,22,"screen"],[173,22,171,28],[173,25,171,31,"screens"],[173,32,171,38],[173,35,172,22,"screens"],[173,42,172,29],[173,43,172,30,"targetScreen"],[173,55,172,42],[173,56,172,43],[173,59,173,26,"targetScreen"],[173,71,173,38],[173,74,174,26,"Object"],[173,80,174,32],[173,81,174,33,"keys"],[173,85,174,37],[173,86,174,38,"screens"],[173,93,174,45],[173,94,174,46],[173,95,174,47],[173,96,174,48],[173,97,174,49],[173,100,175,22,"undefined"],[173,109,175,31],[174,10,176,16],[174,14,176,20,"screen"],[174,20,176,26],[174,24,176,30,"screens"],[174,31,176,37],[174,35,176,41,"currentOptions"],[174,49,176,55],[174,50,176,56,"route"],[174,55,176,61],[174,56,176,62,"name"],[174,60,176,66],[174,61,176,67],[174,62,176,68,"screens"],[174,69,176,75],[174,72,176,78,"screen"],[174,78,176,84],[174,79,176,85],[174,81,176,87],[175,12,177,20,"route"],[175,17,177,25],[175,20,177,28],[176,14,177,30],[176,17,177,33,"screens"],[176,24,177,40],[176,25,177,41,"screen"],[176,31,177,47],[176,32,177,48],[177,14,177,50,"name"],[177,18,177,54],[177,20,177,56,"screen"],[177,26,177,62],[178,14,177,64,"key"],[178,17,177,67],[178,19,177,69,"screen"],[179,12,177,76],[179,13,177,77],[180,12,178,20,"currentOptions"],[180,26,178,34],[180,29,178,37,"screens"],[180,36,178,44],[181,10,179,16],[181,11,179,17],[181,17,180,21],[182,12,181,20,"hasNext"],[182,19,181,27],[182,22,181,30],[182,27,181,35],[183,10,182,16],[184,10,183,16],[185,10,184,16],[186,8,185,12],[186,9,185,13],[186,15,186,17],[187,10,187,16,"index"],[187,15,187,21],[187,18,188,20],[187,25,188,27,"route"],[187,30,188,32],[187,31,188,33,"state"],[187,36,188,38],[187,37,188,39,"index"],[187,42,188,44],[187,47,188,49],[187,55,188,57],[187,58,188,60,"route"],[187,63,188,65],[187,64,188,66,"state"],[187,69,188,71],[187,70,188,72,"index"],[187,75,188,77],[187,78,188,80,"route"],[187,83,188,85],[187,84,188,86,"state"],[187,89,188,91],[187,90,188,92,"routes"],[187,96,188,98],[187,97,188,99,"length"],[187,103,188,105],[187,106,188,108],[187,107,188,109],[188,10,189,16],[188,16,189,22,"nextRoute"],[188,25,189,31],[188,28,189,34,"route"],[188,33,189,39],[188,34,189,40,"state"],[188,39,189,45],[188,40,189,46,"routes"],[188,46,189,52],[188,47,189,53,"index"],[188,52,189,58],[188,53,189,59],[189,10,190,16],[189,16,190,22,"nestedConfig"],[189,28,190,34],[189,31,190,37,"currentOptions"],[189,45,190,51],[189,46,190,52,"route"],[189,51,190,57],[189,52,190,58,"name"],[189,56,190,62],[189,57,190,63],[189,58,190,64,"screens"],[189,65,190,71],[190,10,191,16],[191,10,192,16],[191,14,192,20,"nestedConfig"],[191,26,192,32],[191,30,192,36,"nextRoute"],[191,39,192,45],[191,40,192,46,"name"],[191,44,192,50],[191,48,192,54,"nestedConfig"],[191,60,192,66],[191,62,192,68],[192,12,193,20,"route"],[192,17,193,25],[192,20,193,28,"nextRoute"],[192,29,193,37],[193,12,194,20,"currentOptions"],[193,26,194,34],[193,29,194,37,"nestedConfig"],[193,41,194,49],[194,10,195,16],[194,11,195,17],[194,17,196,21],[195,12,197,20],[196,12,198,20,"hasNext"],[196,19,198,27],[196,22,198,30],[196,27,198,35],[197,10,199,16],[198,8,200,12],[199,6,201,8],[200,6,202,8],[200,10,202,12,"pattern"],[200,17,202,19],[200,22,202,24,"undefined"],[200,31,202,33],[200,33,202,35],[201,8,203,12,"pattern"],[201,15,203,19],[201,18,203,22,"nestedRouteNames"],[201,34,203,38],[201,35,203,39,"join"],[201,39,203,43],[201,40,203,44],[201,43,203,47],[201,44,203,48],[202,6,204,8],[203,6,205,8],[203,10,205,12,"currentOptions"],[203,24,205,26],[203,25,205,27,"route"],[203,30,205,32],[203,31,205,33,"name"],[203,35,205,37],[203,36,205,38],[203,41,205,43,"undefined"],[203,50,205,52],[203,52,205,54],[204,8,206,12],[205,8,207,12,"path"],[205,12,207,16],[205,16,207,20,"expo"],[205,20,207,24],[205,21,207,25,"getPathWithConventionsCollapsed"],[205,52,207,56],[205,53,207,57],[206,10,208,16],[206,13,208,19,"options"],[206,20,208,26],[207,10,209,16,"pattern"],[207,17,209,23],[208,10,210,16,"route"],[208,15,210,21],[209,10,211,16,"params"],[209,16,211,22],[209,18,211,24,"allParams"],[209,27,211,33],[210,10,212,16,"initialRouteName"],[210,26,212,32],[210,28,212,34,"configs"],[210,35,212,41],[210,36,212,42,"route"],[210,41,212,47],[210,42,212,48,"name"],[210,46,212,52],[210,47,212,53],[210,49,212,55,"initialRouteName"],[211,8,213,12],[211,9,213,13],[211,10,213,14],[212,8,214,12],[213,8,215,12],[214,8,216,12],[215,8,217,12],[216,8,218,12],[217,8,219,12],[218,8,220,12],[219,8,221,12],[220,8,222,12],[221,8,223,12],[222,8,224,12],[223,8,225,12],[224,8,226,12],[225,8,227,12],[226,8,228,12],[227,8,229,12],[228,8,230,12],[229,8,231,12],[230,8,232,12],[231,8,233,12],[232,8,234,12],[233,8,235,12],[234,8,236,12],[235,8,237,12],[236,8,238,12],[237,8,239,12],[238,8,240,12],[239,6,241,8],[239,7,241,9],[239,13,242,13],[239,17,242,17],[239,18,242,18,"route"],[239,23,242,23],[239,24,242,24,"name"],[239,28,242,28],[239,29,242,29,"startsWith"],[239,39,242,39],[239,40,242,40],[239,43,242,43],[239,44,242,44],[239,46,242,46],[240,8,243,12,"path"],[240,12,243,16],[240,16,243,20,"encodeURIComponent"],[240,34,243,38],[240,35,243,39,"route"],[240,40,243,44],[240,41,243,45,"name"],[240,45,243,49],[240,46,243,50],[241,6,244,8],[242,6,245,8],[243,6,246,8],[243,10,246,12],[243,11,246,13,"focusedParams"],[243,24,246,26],[243,26,246,28],[244,8,247,12,"focusedParams"],[244,21,247,25],[244,24,247,28,"focusedRoute"],[244,36,247,40],[244,37,247,41,"params"],[244,43,247,47],[245,6,248,8],[246,6,249,8],[246,10,249,12,"route"],[246,15,249,17],[246,16,249,18,"state"],[246,21,249,23],[246,23,249,25],[247,8,250,12,"path"],[247,12,250,16],[247,16,250,20],[247,19,250,23],[248,6,251,8],[248,7,251,9],[248,13,252,13],[248,17,252,17,"focusedParams"],[248,30,252,30],[248,32,252,32],[249,8,253,12],[249,13,253,17],[249,19,253,23,"param"],[249,24,253,28],[249,28,253,32,"focusedParams"],[249,41,253,45],[249,43,253,47],[250,10,254,16],[250,14,254,20,"focusedParams"],[250,27,254,33],[250,28,254,34,"param"],[250,33,254,39],[250,34,254,40],[250,39,254,45],[250,50,254,56],[250,52,254,58],[251,12,255,20],[252,12,256,20],[252,19,256,27,"focusedParams"],[252,32,256,40],[252,33,256,41,"param"],[252,38,256,46],[252,39,256,47],[253,10,257,16],[254,8,258,12],[255,8,259,12],[256,8,260,12],[256,15,260,19,"focusedParams"],[256,28,260,32],[256,29,260,33],[256,32,260,36],[256,33,260,37],[257,8,261,12],[258,8,262,12],[258,14,262,18,"query"],[258,19,262,23],[258,22,262,26,"queryString"],[258,33,262,37],[258,34,262,38,"stringify"],[258,43,262,47],[258,44,262,48,"focusedParams"],[258,57,262,61],[258,59,262,63],[259,10,262,65,"sort"],[259,14,262,69],[259,16,262,71],[260,8,262,77],[260,9,262,78],[260,10,262,79],[261,8,263,12],[261,12,263,16,"query"],[261,17,263,21],[261,19,263,23],[262,10,264,16,"path"],[262,14,264,20],[262,18,264,24],[262,22,264,28,"query"],[262,27,264,33],[262,29,264,35],[263,8,265,12],[264,6,266,8],[265,6,267,8,"current"],[265,13,267,15],[265,16,267,18,"route"],[265,21,267,23],[265,22,267,24,"state"],[265,27,267,29],[266,4,268,4],[267,4,269,4],[268,4,270,4,"path"],[268,8,270,8],[268,11,270,11,"path"],[268,15,270,15],[268,16,270,16,"replace"],[268,23,270,23],[268,24,270,24],[268,30,270,30],[268,32,270,32],[268,35,270,35],[268,36,270,36],[269,4,271,4,"path"],[269,8,271,8],[269,11,271,11,"path"],[269,15,271,15],[269,16,271,16,"length"],[269,22,271,22],[269,25,271,25],[269,26,271,26],[269,29,271,29,"path"],[269,33,271,33],[269,34,271,34,"replace"],[269,41,271,41],[269,42,271,42],[269,47,271,47],[269,49,271,49],[269,51,271,51],[269,52,271,52],[269,55,271,55,"path"],[269,59,271,59],[270,4,272,4],[271,4,273,4],[271,8,273,8,"options"],[271,15,273,15],[271,17,273,17,"path"],[271,21,273,21],[271,23,273,23],[272,6,274,8,"path"],[272,10,274,12],[272,13,274,15,"joinPaths"],[272,22,274,24],[272,23,274,25,"options"],[272,30,274,32],[272,31,274,33,"path"],[272,35,274,37],[272,37,274,39,"path"],[272,41,274,43],[272,42,274,44],[273,4,275,4],[274,4,276,4],[275,4,277,4,"path"],[275,8,277,8],[275,11,277,11,"expo"],[275,15,277,15],[275,16,277,16,"appendBaseUrl"],[275,29,277,29],[275,30,277,30,"path"],[275,34,277,34],[275,35,277,35],[276,4,278,4],[276,8,278,8,"allParams"],[276,17,278,17],[276,18,278,18],[276,21,278,21],[276,22,278,22],[276,24,278,24],[277,6,279,8,"path"],[277,10,279,12],[277,14,279,16],[277,18,279,20,"allParams"],[277,27,279,29],[277,28,279,30],[277,31,279,33],[277,32,279,34],[277,34,279,36],[278,4,280,4],[279,4,281,4],[280,4,282,4],[281,4,283,4],[281,11,283,11],[282,6,283,13,"path"],[282,10,283,17],[283,6,283,19,"params"],[283,12,283,25],[283,14,283,27,"allParams"],[284,4,283,37],[284,5,283,38],[285,4,284,4],[286,2,285,0],[287,2,286,0,"exports"],[287,9,286,7],[287,10,286,8,"getPathDataFromState"],[287,30,286,28],[287,33,286,31,"getPathDataFromState"],[287,53,286,51],[288,2,287,0],[289,2,288,0],[289,8,288,6,"joinPaths"],[289,17,288,15],[289,20,288,18,"joinPaths"],[289,21,288,19],[289,24,288,22,"paths"],[289,29,288,27],[289,34,288,32],[289,36,288,34],[289,37,289,5,"concat"],[289,43,289,11],[289,44,289,12],[289,47,289,15,"paths"],[289,52,289,20],[289,53,289,21,"map"],[289,56,289,24],[289,57,289,26,"p"],[289,58,289,27],[289,62,289,32,"p"],[289,63,289,33],[289,64,289,34,"split"],[289,69,289,39],[289,70,289,40],[289,73,289,43],[289,74,289,44],[289,75,289,45],[289,76,289,46],[289,77,290,5,"filter"],[289,83,290,11],[289,84,290,12,"Boolean"],[289,91,290,19],[289,92,290,20],[289,93,291,5,"join"],[289,97,291,9],[289,98,291,10],[289,101,291,13],[289,102,291,14],[290,2,292,0],[290,8,292,6,"createConfigItem"],[290,24,292,22],[290,27,292,25,"createConfigItem"],[290,28,292,26,"config"],[290,34,292,32],[290,36,292,34,"parentPattern"],[290,49,292,47],[290,54,292,52],[291,4,293,4],[291,8,293,8],[291,15,293,15,"config"],[291,21,293,21],[291,26,293,26],[291,34,293,34],[291,36,293,36],[292,6,294,8],[293,6,295,8],[293,12,295,14,"pattern"],[293,19,295,21],[293,22,295,24,"parentPattern"],[293,35,295,37],[293,38,295,40,"joinPaths"],[293,47,295,49],[293,48,295,50,"parentPattern"],[293,61,295,63],[293,63,295,65,"config"],[293,69,295,71],[293,70,295,72],[293,73,295,75,"config"],[293,79,295,81],[294,6,296,8],[294,13,296,15],[295,8,296,17,"pattern"],[296,6,296,25],[296,7,296,26],[297,4,297,4],[298,4,298,4],[298,8,298,8,"config"],[298,14,298,14],[298,15,298,15,"exact"],[298,20,298,20],[298,24,298,24,"config"],[298,30,298,30],[298,31,298,31,"path"],[298,35,298,35],[298,40,298,40,"undefined"],[298,49,298,49],[298,51,298,51],[299,6,299,8],[299,12,299,14],[299,16,299,18,"Error"],[299,21,299,23],[299,22,299,24],[299,172,299,174],[299,173,299,175],[300,4,300,4],[301,4,301,4],[302,4,302,4],[303,4,303,4],[303,10,303,10,"pattern"],[303,17,303,17],[303,20,303,20,"config"],[303,26,303,26],[303,27,303,27,"exact"],[303,32,303,32],[303,37,303,37],[303,41,303,41],[303,44,303,44,"joinPaths"],[303,53,303,53],[303,54,303,54,"parentPattern"],[303,67,303,67],[303,71,303,71],[303,73,303,73],[303,75,303,75,"config"],[303,81,303,81],[303,82,303,82,"path"],[303,86,303,86],[303,90,303,90],[303,92,303,92],[303,93,303,93],[303,96,303,96,"config"],[303,102,303,102],[303,103,303,103,"path"],[303,107,303,107],[303,111,303,111],[303,113,303,113],[304,4,304,4],[304,10,304,10,"screens"],[304,17,304,17],[304,20,304,20,"config"],[304,26,304,26],[304,27,304,27,"screens"],[304,34,304,34],[304,37,304,37,"createNormalizedConfigs"],[304,60,304,60],[304,61,304,61,"config"],[304,67,304,67],[304,68,304,68,"screens"],[304,75,304,75],[304,77,304,77,"pattern"],[304,84,304,84],[304,85,304,85],[304,88,304,88,"undefined"],[304,97,304,97],[305,4,305,4],[305,11,305,11],[306,6,306,8],[307,6,307,8,"pattern"],[307,13,307,15],[307,15,307,17,"pattern"],[307,22,307,24],[307,24,307,26,"split"],[307,29,307,31],[307,30,307,32],[307,33,307,35],[307,34,307,36],[307,35,307,37,"filter"],[307,41,307,43],[307,42,307,44,"Boolean"],[307,49,307,51],[307,50,307,52],[307,51,307,53,"join"],[307,55,307,57],[307,56,307,58],[307,59,307,61],[307,60,307,62],[308,6,308,8,"stringify"],[308,15,308,17],[308,17,308,19,"config"],[308,23,308,25],[308,24,308,26,"stringify"],[308,33,308,35],[309,6,309,8,"screens"],[310,4,310,4],[310,5,310,5],[311,2,311,0],[311,3,311,1],[312,2,312,0],[312,8,312,6,"createNormalizedConfigs"],[312,31,312,29],[312,34,312,32,"createNormalizedConfigs"],[312,35,312,33,"options"],[312,42,312,40],[312,44,312,42,"pattern"],[312,51,312,49],[312,56,312,54,"Object"],[312,62,312,60],[312,63,312,61,"fromEntries"],[312,74,312,72],[312,75,312,73,"Object"],[312,81,312,79],[312,82,312,80,"entries"],[312,89,312,87],[312,90,312,88,"options"],[312,97,312,95],[312,98,312,96],[312,99,312,97,"map"],[312,102,312,100],[312,103,312,101],[312,104,312,102],[312,105,312,103,"name"],[312,109,312,107],[312,111,312,109,"c"],[312,112,312,110],[312,113,312,111],[312,118,312,116],[313,4,313,4],[313,10,313,10,"result"],[313,16,313,16],[313,19,313,19,"createConfigItem"],[313,35,313,35],[313,36,313,36,"c"],[313,37,313,37],[313,39,313,39,"pattern"],[313,46,313,46],[313,47,313,47],[314,4,314,4],[314,11,314,11],[314,12,314,12,"name"],[314,16,314,16],[314,18,314,18,"result"],[314,24,314,24],[314,25,314,25],[315,2,315,0],[315,3,315,1],[315,4,315,2],[315,5,315,3],[316,2,316,0],[316,11,316,9,"appendBaseUrl"],[316,24,316,22,"appendBaseUrl"],[316,25,316,23,"path"],[316,29,316,27],[316,31,316,29,"baseUrl"],[316,38,316,36],[316,43,316,64],[316,45,316,66],[317,4,317,4],[317,8,317,8,"process"],[317,15,317,15],[317,16,317,16,"env"],[317,19,317,19],[317,20,317,20,"NODE_ENV"],[317,28,317,28],[317,33,317,33],[317,46,317,46],[317,48,317,48],[318,6,318,8],[318,10,318,12,"baseUrl"],[318,17,318,19],[318,19,318,21],[319,8,319,12],[319,15,319,19],[319,19,319,23,"baseUrl"],[319,26,319,30],[319,27,319,31,"replace"],[319,34,319,38],[319,35,319,39],[319,41,319,45],[319,43,319,47],[319,45,319,49],[319,46,319,50],[319,47,319,51,"replace"],[319,54,319,58],[319,55,319,59],[319,60,319,64],[319,62,319,66],[319,64,319,68],[319,65,319,69],[319,68,319,72,"path"],[319,72,319,76],[319,74,319,78],[320,6,320,8],[321,4,321,4],[322,4,322,4],[322,11,322,11,"path"],[322,15,322,15],[323,2,323,0],[324,2,324,0,"exports"],[324,9,324,7],[324,10,324,8,"appendBaseUrl"],[324,23,324,21],[324,26,324,24,"appendBaseUrl"],[324,39,324,37],[325,0,324,38],[325,3]],"functionMap":{"names":["<global>","<anonymous>","desc.get","getActiveRoute","getPathFromState","getPathDataFromState","pattern.split.filter$argument_0","pattern.split.filter.forEach$argument_0","joinPaths","paths.map$argument_0","createConfigItem","createNormalizedConfigs","Object.entries.map$argument_0","appendBaseUrl"],"mappings":"AAA;0ECC;sCCI,2BD;CDG,KC;CDG;gFCC;CDE,IC;CDE;kDCC;CDM;uBGM;CHQ;AIkC;CJE;AKE;gCCuD,4BD;iCEE;qBFO;CLiJ;kBQG;yBCC,mBD;cRE;yBUC;CVmB;gCWC,qEC;CDG,EX;AaC;CbO"}},"type":"js/module"}]}