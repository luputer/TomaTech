{"dependencies":[{"name":"@react-navigation/native","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":30,"column":17,"index":1306},"end":{"line":30,"column":52,"index":1341}}],"key":"+CMsq8mGitISxINZGSTIjwwHCvE="}},{"name":"fast-deep-equal","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":31,"column":42,"index":1385},"end":{"line":31,"column":68,"index":1411}}],"key":"mKCaXdMog1sUnz6w1YFznVR6qsA="}},{"name":"react","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":32,"column":27,"index":1441},"end":{"line":32,"column":43,"index":1457}}],"key":"a4EMkKqamYWCMMPV7UeQlqGQ+ks="}},{"name":"./createMemoryHistory","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":33,"column":30,"index":1490},"end":{"line":33,"column":62,"index":1522}}],"key":"O8B0uF0WDDmI/EKmANsJIHnxFSw="}},{"name":"./getPathFromState","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":34,"column":27,"index":1551},"end":{"line":34,"column":56,"index":1580}}],"key":"wPxjpTQx9lKOJTiyuYGXEvlEGX0="}},{"name":"../global-state/serverLocationContext","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":35,"column":32,"index":1614},"end":{"line":35,"column":80,"index":1662}}],"key":"56iQyNvzY9W2y99TRavZcfs0eIo="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = {\n        enumerable: true,\n        get: function () {\n          return m[k];\n        }\n      };\n    }\n    Object.defineProperty(o, k2, desc);\n  } : function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n  });\n  var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n    Object.defineProperty(o, \"default\", {\n      enumerable: true,\n      value: v\n    });\n  } : function (o, v) {\n    o[\"default\"] = v;\n  });\n  var __importStar = this && this.__importStar || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n  };\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useLinking = exports.series = void 0;\n  const native_1 = require(_dependencyMap[0], \"@react-navigation/native\");\n  const fast_deep_equal_1 = __importDefault(require(_dependencyMap[1], \"fast-deep-equal\"));\n  const React = __importStar(require(_dependencyMap[2], \"react\"));\n  const createMemoryHistory_1 = require(_dependencyMap[3], \"./createMemoryHistory\");\n  const getPathFromState_1 = require(_dependencyMap[4], \"./getPathFromState\");\n  const serverLocationContext_1 = require(_dependencyMap[5], \"../global-state/serverLocationContext\");\n  /**\n   * Find the matching navigation state that changed between 2 navigation states\n   * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n   */\n  const findMatchingState = (a, b) => {\n    if (a === undefined || b === undefined || a.key !== b.key) {\n      return [undefined, undefined];\n    }\n    // Tab and drawer will have `history` property, but stack will have history in `routes`\n    const aHistoryLength = a.history ? a.history.length : a.routes.length;\n    const bHistoryLength = b.history ? b.history.length : b.routes.length;\n    const aRoute = a.routes[a.index];\n    const bRoute = b.routes[b.index];\n    const aChildState = aRoute.state;\n    const bChildState = bRoute.state;\n    // Stop here if this is the state object that changed:\n    // - history length is different\n    // - focused routes are different\n    // - one of them doesn't have child state\n    // - child state keys are different\n    if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n      return [a, b];\n    }\n    return findMatchingState(aChildState, bChildState);\n  };\n  /**\n   * Run async function in series as it's called.\n   */\n  const series = cb => {\n    let queue = Promise.resolve();\n    const callback = () => {\n      queue = queue.then(cb);\n    };\n    return callback;\n  };\n  exports.series = series;\n  const linkingHandlers = [];\n  function useLinking(ref, {\n    enabled = true,\n    config,\n    getStateFromPath = native_1.getStateFromPath,\n    getPathFromState = native_1.getPathFromState,\n    getActionFromState = native_1.getActionFromState\n  }, onUnhandledLinking) {\n    const independent = (0, native_1.useNavigationIndependentTree)();\n    React.useEffect(() => {\n      if (process.env.NODE_ENV === 'production') {\n        return undefined;\n      }\n      if (independent) {\n        return undefined;\n      }\n      if (enabled !== false && linkingHandlers.length) {\n        console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:', \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\", '- Only a single instance of the root component is rendered'].join('\\n').trim());\n      }\n      const handler = Symbol();\n      if (enabled !== false) {\n        linkingHandlers.push(handler);\n      }\n      return () => {\n        const index = linkingHandlers.indexOf(handler);\n        if (index > -1) {\n          linkingHandlers.splice(index, 1);\n        }\n      };\n    }, [enabled, independent]);\n    const [history] = React.useState(createMemoryHistory_1.createMemoryHistory);\n    // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n    // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n    // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n    const enabledRef = React.useRef(enabled);\n    const configRef = React.useRef(config);\n    const getStateFromPathRef = React.useRef(getStateFromPath);\n    const getPathFromStateRef = React.useRef(getPathFromState);\n    const getActionFromStateRef = React.useRef(getActionFromState);\n    React.useEffect(() => {\n      enabledRef.current = enabled;\n      configRef.current = config;\n      getStateFromPathRef.current = getStateFromPath;\n      getPathFromStateRef.current = getPathFromState;\n      getActionFromStateRef.current = getActionFromState;\n    });\n    const validateRoutesNotExistInRootState = React.useCallback(state => {\n      const navigation = ref.current;\n      const rootState = navigation?.getRootState();\n      // Make sure that the routes in the state exist in the root navigator\n      // Otherwise there's an error in the linking configuration\n      return state?.routes.some(r => !rootState?.routeNames.includes(r.name));\n    }, [ref]);\n    const server = React.useContext(serverLocationContext_1.ServerContext);\n    const getInitialState = React.useCallback(() => {\n      let value;\n      if (enabledRef.current) {\n        const location = server?.location ?? (true ? window.location : undefined);\n        const path = location ? location.pathname + location.search : undefined;\n        if (path) {\n          value = getStateFromPathRef.current(path, configRef.current);\n        }\n        // If the link were handled, it gets cleared in NavigationContainer\n        onUnhandledLinking(path);\n      }\n      const thenable = {\n        then(onfulfilled) {\n          return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n        },\n        catch() {\n          return thenable;\n        }\n      };\n      return thenable;\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    const previousIndexRef = React.useRef(undefined);\n    const previousStateRef = React.useRef(undefined);\n    const pendingPopStatePathRef = React.useRef(undefined);\n    React.useEffect(() => {\n      previousIndexRef.current = history.index;\n      return history.listen(() => {\n        const navigation = ref.current;\n        if (!navigation || !enabled) {\n          return;\n        }\n        const {\n          location\n        } = window;\n        const path = location.pathname + location.search + location.hash;\n        const index = history.index;\n        const previousIndex = previousIndexRef.current ?? 0;\n        previousIndexRef.current = index;\n        pendingPopStatePathRef.current = path;\n        // When browser back/forward is clicked, we first need to check if state object for this index exists\n        // If it does we'll reset to that state object\n        // Otherwise, we'll handle it like a regular deep link\n        const record = history.get(index);\n        if (record?.path === path && record?.state) {\n          navigation.resetRoot(record.state);\n          return;\n        }\n        const state = getStateFromPathRef.current(path, configRef.current);\n        // We should only dispatch an action when going forward\n        // Otherwise the action will likely add items to history, which would mess things up\n        if (state) {\n          // If the link were handled, it gets cleared in NavigationContainer\n          onUnhandledLinking(path);\n          // Make sure that the routes in the state exist in the root navigator\n          // Otherwise there's an error in the linking configuration\n          if (validateRoutesNotExistInRootState(state)) {\n            return;\n          }\n          if (index > previousIndex || (\n          /* START FORK\n           *\n           * This is a workaround for React Navigation's handling of hashes (it doesn't handle them)\n           * When you click on <a href=\"#hash\">, the browser will first fire a popstate event\n           * and this callback will be called.\n           *\n           * From React Navigation's perspective, it's treating the new hash change like a back/forward\n           * button press, so it thinks it should reset the state. When we should\n           * be to be pushing the new state\n           *\n           * Our fix is to check if the index is the same as the previous index\n           * and if the incoming path is the same as the old path but with the hash added,\n           * then treat it as a push instead of a reset\n           *\n           * This also works for subsequent hash changes, as internally RN\n           * doesn't store the hash in the history state.\n           *\n           * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/popstate_event#when_popstate_is_sent\n           */\n          index === previousIndex && (!record || `${record?.path}${location.hash}` === path))\n          // END FORK\n          ) {\n            const action = getActionFromStateRef.current(state, configRef.current);\n            if (action !== undefined) {\n              try {\n                navigation.dispatch(action);\n              } catch (e) {\n                // Ignore any errors from deep linking.\n                // This could happen in case of malformed links, navigation object not being initialized etc.\n                console.warn(`An error occurred when trying to handle the link '${path}': ${typeof e === 'object' && e != null && 'message' in e ? e.message : e}`);\n              }\n            } else {\n              navigation.resetRoot(state);\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          // if current path didn't return any state, we should revert to initial state\n          navigation.resetRoot(state);\n        }\n      });\n    }, [enabled, history, onUnhandledLinking, ref, validateRoutesNotExistInRootState]);\n    React.useEffect(() => {\n      if (!enabled) {\n        return;\n      }\n      const getPathForRoute = (route, state) => {\n        let path;\n        // If the `route` object contains a `path`, use that path as long as `route.name` and `params` still match\n        // This makes sure that we preserve the original URL for wildcard routes\n        if (route?.path) {\n          const stateForPath = getStateFromPathRef.current(route.path, configRef.current);\n          if (stateForPath) {\n            const focusedRoute = (0, native_1.findFocusedRoute)(stateForPath);\n            if (focusedRoute && focusedRoute.name === route.name && (0, fast_deep_equal_1.default)({\n              ...focusedRoute.params\n            }, {\n              ...route.params\n            })) {\n              // START FORK - Ensure paths coming from events (e.g refresh) have the base URL\n              // path = route.path;\n              path = (0, getPathFromState_1.appendBaseUrl)(route.path);\n              // END FORK\n            }\n          }\n        }\n        if (path == null) {\n          path = getPathFromStateRef.current(state, configRef.current);\n        }\n        // START FORK - ExpoRouter manually handles hashes. This code is intentionally removed\n        // const previousRoute = previousStateRef.current\n        //   ? findFocusedRoute(previousStateRef.current)\n        //   : undefined;\n        // Preserve the hash if the route didn't change\n        // if (\n        //   previousRoute &&\n        //   route &&\n        //   'key' in previousRoute &&\n        //   'key' in route &&\n        //   previousRoute.key === route.key\n        // ) {\n        //   path = path + location.hash;\n        // }\n        // END FORK\n        return path;\n      };\n      if (ref.current) {\n        // We need to record the current metadata on the first render if they aren't set\n        // This will allow the initial state to be in the history entry\n        const state = ref.current.getRootState();\n        if (state) {\n          const route = (0, native_1.findFocusedRoute)(state);\n          const path = getPathForRoute(route, state);\n          if (previousStateRef.current === undefined) {\n            previousStateRef.current = state;\n          }\n          history.replace({\n            path,\n            state\n          });\n        }\n      }\n      const onStateChange = async () => {\n        const navigation = ref.current;\n        if (!navigation || !enabled) {\n          return;\n        }\n        const previousState = previousStateRef.current;\n        const state = navigation.getRootState();\n        // root state may not available, for example when root navigators switch inside the container\n        if (!state) {\n          return;\n        }\n        const pendingPath = pendingPopStatePathRef.current;\n        const route = (0, native_1.findFocusedRoute)(state);\n        const path = getPathForRoute(route, state);\n        previousStateRef.current = state;\n        pendingPopStatePathRef.current = undefined;\n        // To detect the kind of state change, we need to:\n        // - Find the common focused navigation state in previous and current state\n        // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n        // - If no common focused navigation state found, it's a replace\n        const [previousFocusedState, focusedState] = findMatchingState(previousState, state);\n        if (previousFocusedState && focusedState &&\n        // We should only handle push/pop if path changed from what was in last `popstate`\n        // Otherwise it's likely a change triggered by `popstate`\n        path !== pendingPath) {\n          const historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n          if (historyDelta > 0) {\n            // If history length is increased, we should pushState\n            // Note that path might not actually change here, for example, drawer open should pushState\n            history.push({\n              path,\n              state\n            });\n          } else if (historyDelta < 0) {\n            // If history length is decreased, i.e. entries were removed, we want to go back\n            const nextIndex = history.backIndex({\n              path\n            });\n            const currentIndex = history.index;\n            try {\n              if (nextIndex !== -1 && nextIndex < currentIndex &&\n              // We should only go back if the entry exists and it's less than current index\n              history.get(nextIndex - currentIndex)) {\n                // An existing entry for this path exists and it's less than current index, go back to that\n                await history.go(nextIndex - currentIndex);\n              } else {\n                // We couldn't find an existing entry to go back to, so we'll go back by the delta\n                // This won't be correct if multiple routes were pushed in one go before\n                // Usually this shouldn't happen and this is a fallback for that\n                await history.go(historyDelta);\n              }\n              // Store the updated state as well as fix the path if incorrect\n              history.replace({\n                path,\n                state\n              });\n            } catch {\n              // The navigation was interrupted\n            }\n          } else {\n            // If history length is unchanged, we want to replaceState\n            history.replace({\n              path,\n              state\n            });\n          }\n        } else {\n          // If no common navigation state was found, assume it's a replace\n          // This would happen if the user did a reset/conditionally changed navigators\n          history.replace({\n            path,\n            state\n          });\n        }\n      };\n      // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n      // This could happen since `history.go(n)` is asynchronous\n      // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n      return ref.current?.addListener('state', (0, exports.series)(onStateChange));\n    }, [enabled, history, ref]);\n    return {\n      getInitialState\n    };\n  }\n  exports.useLinking = useLinking;\n});","lineCount":388,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[4,6,2,4,"__createBinding"],[4,21,2,19],[4,24,2,23],[4,28,2,27],[4,32,2,31],[4,36,2,35],[4,37,2,36,"__createBinding"],[4,52,2,51],[4,57,2,57,"Object"],[4,63,2,63],[4,64,2,64,"create"],[4,70,2,70],[4,73,2,74],[4,83,2,83,"o"],[4,84,2,84],[4,86,2,86,"m"],[4,87,2,87],[4,89,2,89,"k"],[4,90,2,90],[4,92,2,92,"k2"],[4,94,2,94],[4,96,2,96],[5,4,3,4],[5,8,3,8,"k2"],[5,10,3,10],[5,15,3,15,"undefined"],[5,24,3,24],[5,26,3,26,"k2"],[5,28,3,28],[5,31,3,31,"k"],[5,32,3,32],[6,4,4,4],[6,8,4,8,"desc"],[6,12,4,12],[6,15,4,15,"Object"],[6,21,4,21],[6,22,4,22,"getOwnPropertyDescriptor"],[6,46,4,46],[6,47,4,47,"m"],[6,48,4,48],[6,50,4,50,"k"],[6,51,4,51],[6,52,4,52],[7,4,5,4],[7,8,5,8],[7,9,5,9,"desc"],[7,13,5,13],[7,18,5,18],[7,23,5,23],[7,27,5,27,"desc"],[7,31,5,31],[7,34,5,34],[7,35,5,35,"m"],[7,36,5,36],[7,37,5,37,"__esModule"],[7,47,5,47],[7,50,5,50,"desc"],[7,54,5,54],[7,55,5,55,"writable"],[7,63,5,63],[7,67,5,67,"desc"],[7,71,5,71],[7,72,5,72,"configurable"],[7,84,5,84],[7,85,5,85],[7,87,5,87],[8,6,6,6,"desc"],[8,10,6,10],[8,13,6,13],[9,8,6,15,"enumerable"],[9,18,6,25],[9,20,6,27],[9,24,6,31],[10,8,6,33,"get"],[10,11,6,36],[10,13,6,38],[10,22,6,38,"get"],[10,23,6,38],[10,25,6,49],[11,10,6,51],[11,17,6,58,"m"],[11,18,6,59],[11,19,6,60,"k"],[11,20,6,61],[11,21,6,62],[12,8,6,64],[13,6,6,66],[13,7,6,67],[14,4,7,4],[15,4,8,4,"Object"],[15,10,8,10],[15,11,8,11,"defineProperty"],[15,25,8,25],[15,26,8,26,"o"],[15,27,8,27],[15,29,8,29,"k2"],[15,31,8,31],[15,33,8,33,"desc"],[15,37,8,37],[15,38,8,38],[16,2,9,0],[16,3,9,1],[16,6,9,6],[16,16,9,15,"o"],[16,17,9,16],[16,19,9,18,"m"],[16,20,9,19],[16,22,9,21,"k"],[16,23,9,22],[16,25,9,24,"k2"],[16,27,9,26],[16,29,9,28],[17,4,10,4],[17,8,10,8,"k2"],[17,10,10,10],[17,15,10,15,"undefined"],[17,24,10,24],[17,26,10,26,"k2"],[17,28,10,28],[17,31,10,31,"k"],[17,32,10,32],[18,4,11,4,"o"],[18,5,11,5],[18,6,11,6,"k2"],[18,8,11,8],[18,9,11,9],[18,12,11,12,"m"],[18,13,11,13],[18,14,11,14,"k"],[18,15,11,15],[18,16,11,16],[19,2,12,0],[19,3,12,2],[19,4,12,3],[20,2,13,0],[20,6,13,4,"__setModuleDefault"],[20,24,13,22],[20,27,13,26],[20,31,13,30],[20,35,13,34],[20,39,13,38],[20,40,13,39,"__setModuleDefault"],[20,58,13,57],[20,63,13,63,"Object"],[20,69,13,69],[20,70,13,70,"create"],[20,76,13,76],[20,79,13,80],[20,89,13,89,"o"],[20,90,13,90],[20,92,13,92,"v"],[20,93,13,93],[20,95,13,95],[21,4,14,4,"Object"],[21,10,14,10],[21,11,14,11,"defineProperty"],[21,25,14,25],[21,26,14,26,"o"],[21,27,14,27],[21,29,14,29],[21,38,14,38],[21,40,14,40],[22,6,14,42,"enumerable"],[22,16,14,52],[22,18,14,54],[22,22,14,58],[23,6,14,60,"value"],[23,11,14,65],[23,13,14,67,"v"],[24,4,14,69],[24,5,14,70],[24,6,14,71],[25,2,15,0],[25,3,15,1],[25,6,15,5],[25,16,15,14,"o"],[25,17,15,15],[25,19,15,17,"v"],[25,20,15,18],[25,22,15,20],[26,4,16,4,"o"],[26,5,16,5],[26,6,16,6],[26,15,16,15],[26,16,16,16],[26,19,16,19,"v"],[26,20,16,20],[27,2,17,0],[27,3,17,1],[27,4,17,2],[28,2,18,0],[28,6,18,4,"__importStar"],[28,18,18,16],[28,21,18,20],[28,25,18,24],[28,29,18,28],[28,33,18,32],[28,34,18,33,"__importStar"],[28,46,18,45],[28,50,18,50],[28,60,18,60,"mod"],[28,63,18,63],[28,65,18,65],[29,4,19,4],[29,8,19,8,"mod"],[29,11,19,11],[29,15,19,15,"mod"],[29,18,19,18],[29,19,19,19,"__esModule"],[29,29,19,29],[29,31,19,31],[29,38,19,38,"mod"],[29,41,19,41],[30,4,20,4],[30,8,20,8,"result"],[30,14,20,14],[30,17,20,17],[30,18,20,18],[30,19,20,19],[31,4,21,4],[31,8,21,8,"mod"],[31,11,21,11],[31,15,21,15],[31,19,21,19],[31,21,21,21],[31,26,21,26],[31,30,21,30,"k"],[31,31,21,31],[31,35,21,35,"mod"],[31,38,21,38],[31,40,21,40],[31,44,21,44,"k"],[31,45,21,45],[31,50,21,50],[31,59,21,59],[31,63,21,63,"Object"],[31,69,21,69],[31,70,21,70,"prototype"],[31,79,21,79],[31,80,21,80,"hasOwnProperty"],[31,94,21,94],[31,95,21,95,"call"],[31,99,21,99],[31,100,21,100,"mod"],[31,103,21,103],[31,105,21,105,"k"],[31,106,21,106],[31,107,21,107],[31,109,21,109,"__createBinding"],[31,124,21,124],[31,125,21,125,"result"],[31,131,21,131],[31,133,21,133,"mod"],[31,136,21,136],[31,138,21,138,"k"],[31,139,21,139],[31,140,21,140],[32,4,22,4,"__setModuleDefault"],[32,22,22,22],[32,23,22,23,"result"],[32,29,22,29],[32,31,22,31,"mod"],[32,34,22,34],[32,35,22,35],[33,4,23,4],[33,11,23,11,"result"],[33,17,23,17],[34,2,24,0],[34,3,24,1],[35,2,25,0],[35,6,25,4,"__importDefault"],[35,21,25,19],[35,24,25,23],[35,28,25,27],[35,32,25,31],[35,36,25,35],[35,37,25,36,"__importDefault"],[35,52,25,51],[35,56,25,56],[35,66,25,66,"mod"],[35,69,25,69],[35,71,25,71],[36,4,26,4],[36,11,26,12,"mod"],[36,14,26,15],[36,18,26,19,"mod"],[36,21,26,22],[36,22,26,23,"__esModule"],[36,32,26,33],[36,35,26,37,"mod"],[36,38,26,40],[36,41,26,43],[37,6,26,45],[37,15,26,54],[37,17,26,56,"mod"],[38,4,26,60],[38,5,26,61],[39,2,27,0],[39,3,27,1],[40,2,28,0,"Object"],[40,8,28,6],[40,9,28,7,"defineProperty"],[40,23,28,21],[40,24,28,22,"exports"],[40,31,28,29],[40,33,28,31],[40,45,28,43],[40,47,28,45],[41,4,28,47,"value"],[41,9,28,52],[41,11,28,54],[42,2,28,59],[42,3,28,60],[42,4,28,61],[43,2,29,0,"exports"],[43,9,29,7],[43,10,29,8,"useLinking"],[43,20,29,18],[43,23,29,21,"exports"],[43,30,29,28],[43,31,29,29,"series"],[43,37,29,35],[43,40,29,38],[43,45,29,43],[43,46,29,44],[44,2,30,0],[44,8,30,6,"native_1"],[44,16,30,14],[44,19,30,17,"require"],[44,26,30,24],[44,27,30,24,"_dependencyMap"],[44,41,30,24],[44,72,30,51],[44,73,30,52],[45,2,31,0],[45,8,31,6,"fast_deep_equal_1"],[45,25,31,23],[45,28,31,26,"__importDefault"],[45,43,31,41],[45,44,31,42,"require"],[45,51,31,49],[45,52,31,49,"_dependencyMap"],[45,66,31,49],[45,88,31,67],[45,89,31,68],[45,90,31,69],[46,2,32,0],[46,8,32,6,"React"],[46,13,32,11],[46,16,32,14,"__importStar"],[46,28,32,26],[46,29,32,27,"require"],[46,36,32,34],[46,37,32,34,"_dependencyMap"],[46,51,32,34],[46,63,32,42],[46,64,32,43],[46,65,32,44],[47,2,33,0],[47,8,33,6,"createMemoryHistory_1"],[47,29,33,27],[47,32,33,30,"require"],[47,39,33,37],[47,40,33,37,"_dependencyMap"],[47,54,33,37],[47,82,33,61],[47,83,33,62],[48,2,34,0],[48,8,34,6,"getPathFromState_1"],[48,26,34,24],[48,29,34,27,"require"],[48,36,34,34],[48,37,34,34,"_dependencyMap"],[48,51,34,34],[48,76,34,55],[48,77,34,56],[49,2,35,0],[49,8,35,6,"serverLocationContext_1"],[49,31,35,29],[49,34,35,32,"require"],[49,41,35,39],[49,42,35,39,"_dependencyMap"],[49,56,35,39],[49,100,35,79],[49,101,35,80],[50,2,36,0],[51,0,37,0],[52,0,38,0],[53,0,39,0],[54,2,40,0],[54,8,40,6,"findMatchingState"],[54,25,40,23],[54,28,40,26,"findMatchingState"],[54,29,40,27,"a"],[54,30,40,28],[54,32,40,30,"b"],[54,33,40,31],[54,38,40,36],[55,4,41,4],[55,8,41,8,"a"],[55,9,41,9],[55,14,41,14,"undefined"],[55,23,41,23],[55,27,41,27,"b"],[55,28,41,28],[55,33,41,33,"undefined"],[55,42,41,42],[55,46,41,46,"a"],[55,47,41,47],[55,48,41,48,"key"],[55,51,41,51],[55,56,41,56,"b"],[55,57,41,57],[55,58,41,58,"key"],[55,61,41,61],[55,63,41,63],[56,6,42,8],[56,13,42,15],[56,14,42,16,"undefined"],[56,23,42,25],[56,25,42,27,"undefined"],[56,34,42,36],[56,35,42,37],[57,4,43,4],[58,4,44,4],[59,4,45,4],[59,10,45,10,"aHistoryLength"],[59,24,45,24],[59,27,45,27,"a"],[59,28,45,28],[59,29,45,29,"history"],[59,36,45,36],[59,39,45,39,"a"],[59,40,45,40],[59,41,45,41,"history"],[59,48,45,48],[59,49,45,49,"length"],[59,55,45,55],[59,58,45,58,"a"],[59,59,45,59],[59,60,45,60,"routes"],[59,66,45,66],[59,67,45,67,"length"],[59,73,45,73],[60,4,46,4],[60,10,46,10,"bHistoryLength"],[60,24,46,24],[60,27,46,27,"b"],[60,28,46,28],[60,29,46,29,"history"],[60,36,46,36],[60,39,46,39,"b"],[60,40,46,40],[60,41,46,41,"history"],[60,48,46,48],[60,49,46,49,"length"],[60,55,46,55],[60,58,46,58,"b"],[60,59,46,59],[60,60,46,60,"routes"],[60,66,46,66],[60,67,46,67,"length"],[60,73,46,73],[61,4,47,4],[61,10,47,10,"aRoute"],[61,16,47,16],[61,19,47,19,"a"],[61,20,47,20],[61,21,47,21,"routes"],[61,27,47,27],[61,28,47,28,"a"],[61,29,47,29],[61,30,47,30,"index"],[61,35,47,35],[61,36,47,36],[62,4,48,4],[62,10,48,10,"bRoute"],[62,16,48,16],[62,19,48,19,"b"],[62,20,48,20],[62,21,48,21,"routes"],[62,27,48,27],[62,28,48,28,"b"],[62,29,48,29],[62,30,48,30,"index"],[62,35,48,35],[62,36,48,36],[63,4,49,4],[63,10,49,10,"aChildState"],[63,21,49,21],[63,24,49,24,"aRoute"],[63,30,49,30],[63,31,49,31,"state"],[63,36,49,36],[64,4,50,4],[64,10,50,10,"bChildState"],[64,21,50,21],[64,24,50,24,"bRoute"],[64,30,50,30],[64,31,50,31,"state"],[64,36,50,36],[65,4,51,4],[66,4,52,4],[67,4,53,4],[68,4,54,4],[69,4,55,4],[70,4,56,4],[70,8,56,8,"aHistoryLength"],[70,22,56,22],[70,27,56,27,"bHistoryLength"],[70,41,56,41],[70,45,57,8,"aRoute"],[70,51,57,14],[70,52,57,15,"key"],[70,55,57,18],[70,60,57,23,"bRoute"],[70,66,57,29],[70,67,57,30,"key"],[70,70,57,33],[70,74,58,8,"aChildState"],[70,85,58,19],[70,90,58,24,"undefined"],[70,99,58,33],[70,103,59,8,"bChildState"],[70,114,59,19],[70,119,59,24,"undefined"],[70,128,59,33],[70,132,60,8,"aChildState"],[70,143,60,19],[70,144,60,20,"key"],[70,147,60,23],[70,152,60,28,"bChildState"],[70,163,60,39],[70,164,60,40,"key"],[70,167,60,43],[70,169,60,45],[71,6,61,8],[71,13,61,15],[71,14,61,16,"a"],[71,15,61,17],[71,17,61,19,"b"],[71,18,61,20],[71,19,61,21],[72,4,62,4],[73,4,63,4],[73,11,63,11,"findMatchingState"],[73,28,63,28],[73,29,63,29,"aChildState"],[73,40,63,40],[73,42,63,42,"bChildState"],[73,53,63,53],[73,54,63,54],[74,2,64,0],[74,3,64,1],[75,2,65,0],[76,0,66,0],[77,0,67,0],[78,2,68,0],[78,8,68,6,"series"],[78,14,68,12],[78,17,68,16,"cb"],[78,19,68,18],[78,23,68,23],[79,4,69,4],[79,8,69,8,"queue"],[79,13,69,13],[79,16,69,16,"Promise"],[79,23,69,23],[79,24,69,24,"resolve"],[79,31,69,31],[79,32,69,32],[79,33,69,33],[80,4,70,4],[80,10,70,10,"callback"],[80,18,70,18],[80,21,70,21,"callback"],[80,22,70,21],[80,27,70,27],[81,6,71,8,"queue"],[81,11,71,13],[81,14,71,16,"queue"],[81,19,71,21],[81,20,71,22,"then"],[81,24,71,26],[81,25,71,27,"cb"],[81,27,71,29],[81,28,71,30],[82,4,72,4],[82,5,72,5],[83,4,73,4],[83,11,73,11,"callback"],[83,19,73,19],[84,2,74,0],[84,3,74,1],[85,2,75,0,"exports"],[85,9,75,7],[85,10,75,8,"series"],[85,16,75,14],[85,19,75,17,"series"],[85,25,75,23],[86,2,76,0],[86,8,76,6,"linkingHandlers"],[86,23,76,21],[86,26,76,24],[86,28,76,26],[87,2,77,0],[87,11,77,9,"useLinking"],[87,21,77,19,"useLinking"],[87,22,77,20,"ref"],[87,25,77,23],[87,27,77,25],[88,4,77,27,"enabled"],[88,11,77,34],[88,14,77,37],[88,18,77,41],[89,4,77,43,"config"],[89,10,77,49],[90,4,77,51,"getStateFromPath"],[90,20,77,67],[90,23,77,70,"native_1"],[90,31,77,78],[90,32,77,79,"getStateFromPath"],[90,48,77,95],[91,4,77,97,"getPathFromState"],[91,20,77,113],[91,23,77,116,"native_1"],[91,31,77,124],[91,32,77,125,"getPathFromState"],[91,48,77,141],[92,4,77,143,"getActionFromState"],[92,22,77,161],[92,25,77,164,"native_1"],[92,33,77,172],[92,34,77,173,"getActionFromState"],[93,2,77,193],[93,3,77,194],[93,5,77,196,"onUnhandledLinking"],[93,23,77,214],[93,25,77,216],[94,4,78,4],[94,10,78,10,"independent"],[94,21,78,21],[94,24,78,24],[94,25,78,25],[94,26,78,26],[94,28,78,28,"native_1"],[94,36,78,36],[94,37,78,37,"useNavigationIndependentTree"],[94,65,78,65],[94,67,78,67],[94,68,78,68],[95,4,79,4,"React"],[95,9,79,9],[95,10,79,10,"useEffect"],[95,19,79,19],[95,20,79,20],[95,26,79,26],[96,6,80,8],[96,10,80,12,"process"],[96,17,80,19],[96,18,80,20,"env"],[96,21,80,23],[96,22,80,24,"NODE_ENV"],[96,30,80,32],[96,35,80,37],[96,47,80,49],[96,49,80,51],[97,8,81,12],[97,15,81,19,"undefined"],[97,24,81,28],[98,6,82,8],[99,6,83,8],[99,10,83,12,"independent"],[99,21,83,23],[99,23,83,25],[100,8,84,12],[100,15,84,19,"undefined"],[100,24,84,28],[101,6,85,8],[102,6,86,8],[102,10,86,12,"enabled"],[102,17,86,19],[102,22,86,24],[102,27,86,29],[102,31,86,33,"linkingHandlers"],[102,46,86,48],[102,47,86,49,"length"],[102,53,86,55],[102,55,86,57],[103,8,87,12,"console"],[103,15,87,19],[103,16,87,20,"error"],[103,21,87,25],[103,22,87,26],[103,23,88,16],[103,196,88,189],[103,198,89,16],[103,285,89,103],[103,287,90,16],[103,347,90,76],[103,348,91,13],[103,349,92,17,"join"],[103,353,92,21],[103,354,92,22],[103,358,92,26],[103,359,92,27],[103,360,93,17,"trim"],[103,364,93,21],[103,365,93,22],[103,366,93,23],[103,367,93,24],[104,6,94,8],[105,6,95,8],[105,12,95,14,"handler"],[105,19,95,21],[105,22,95,24,"Symbol"],[105,28,95,30],[105,29,95,31],[105,30,95,32],[106,6,96,8],[106,10,96,12,"enabled"],[106,17,96,19],[106,22,96,24],[106,27,96,29],[106,29,96,31],[107,8,97,12,"linkingHandlers"],[107,23,97,27],[107,24,97,28,"push"],[107,28,97,32],[107,29,97,33,"handler"],[107,36,97,40],[107,37,97,41],[108,6,98,8],[109,6,99,8],[109,13,99,15],[109,19,99,21],[110,8,100,12],[110,14,100,18,"index"],[110,19,100,23],[110,22,100,26,"linkingHandlers"],[110,37,100,41],[110,38,100,42,"indexOf"],[110,45,100,49],[110,46,100,50,"handler"],[110,53,100,57],[110,54,100,58],[111,8,101,12],[111,12,101,16,"index"],[111,17,101,21],[111,20,101,24],[111,21,101,25],[111,22,101,26],[111,24,101,28],[112,10,102,16,"linkingHandlers"],[112,25,102,31],[112,26,102,32,"splice"],[112,32,102,38],[112,33,102,39,"index"],[112,38,102,44],[112,40,102,46],[112,41,102,47],[112,42,102,48],[113,8,103,12],[114,6,104,8],[114,7,104,9],[115,4,105,4],[115,5,105,5],[115,7,105,7],[115,8,105,8,"enabled"],[115,15,105,15],[115,17,105,17,"independent"],[115,28,105,28],[115,29,105,29],[115,30,105,30],[116,4,106,4],[116,10,106,10],[116,11,106,11,"history"],[116,18,106,18],[116,19,106,19],[116,22,106,22,"React"],[116,27,106,27],[116,28,106,28,"useState"],[116,36,106,36],[116,37,106,37,"createMemoryHistory_1"],[116,58,106,58],[116,59,106,59,"createMemoryHistory"],[116,78,106,78],[116,79,106,79],[117,4,107,4],[118,4,108,4],[119,4,109,4],[120,4,110,4],[120,10,110,10,"enabledRef"],[120,20,110,20],[120,23,110,23,"React"],[120,28,110,28],[120,29,110,29,"useRef"],[120,35,110,35],[120,36,110,36,"enabled"],[120,43,110,43],[120,44,110,44],[121,4,111,4],[121,10,111,10,"configRef"],[121,19,111,19],[121,22,111,22,"React"],[121,27,111,27],[121,28,111,28,"useRef"],[121,34,111,34],[121,35,111,35,"config"],[121,41,111,41],[121,42,111,42],[122,4,112,4],[122,10,112,10,"getStateFromPathRef"],[122,29,112,29],[122,32,112,32,"React"],[122,37,112,37],[122,38,112,38,"useRef"],[122,44,112,44],[122,45,112,45,"getStateFromPath"],[122,61,112,61],[122,62,112,62],[123,4,113,4],[123,10,113,10,"getPathFromStateRef"],[123,29,113,29],[123,32,113,32,"React"],[123,37,113,37],[123,38,113,38,"useRef"],[123,44,113,44],[123,45,113,45,"getPathFromState"],[123,61,113,61],[123,62,113,62],[124,4,114,4],[124,10,114,10,"getActionFromStateRef"],[124,31,114,31],[124,34,114,34,"React"],[124,39,114,39],[124,40,114,40,"useRef"],[124,46,114,46],[124,47,114,47,"getActionFromState"],[124,65,114,65],[124,66,114,66],[125,4,115,4,"React"],[125,9,115,9],[125,10,115,10,"useEffect"],[125,19,115,19],[125,20,115,20],[125,26,115,26],[126,6,116,8,"enabledRef"],[126,16,116,18],[126,17,116,19,"current"],[126,24,116,26],[126,27,116,29,"enabled"],[126,34,116,36],[127,6,117,8,"configRef"],[127,15,117,17],[127,16,117,18,"current"],[127,23,117,25],[127,26,117,28,"config"],[127,32,117,34],[128,6,118,8,"getStateFromPathRef"],[128,25,118,27],[128,26,118,28,"current"],[128,33,118,35],[128,36,118,38,"getStateFromPath"],[128,52,118,54],[129,6,119,8,"getPathFromStateRef"],[129,25,119,27],[129,26,119,28,"current"],[129,33,119,35],[129,36,119,38,"getPathFromState"],[129,52,119,54],[130,6,120,8,"getActionFromStateRef"],[130,27,120,29],[130,28,120,30,"current"],[130,35,120,37],[130,38,120,40,"getActionFromState"],[130,56,120,58],[131,4,121,4],[131,5,121,5],[131,6,121,6],[132,4,122,4],[132,10,122,10,"validateRoutesNotExistInRootState"],[132,43,122,43],[132,46,122,46,"React"],[132,51,122,51],[132,52,122,52,"useCallback"],[132,63,122,63],[132,64,122,65,"state"],[132,69,122,70],[132,73,122,75],[133,6,123,8],[133,12,123,14,"navigation"],[133,22,123,24],[133,25,123,27,"ref"],[133,28,123,30],[133,29,123,31,"current"],[133,36,123,38],[134,6,124,8],[134,12,124,14,"rootState"],[134,21,124,23],[134,24,124,26,"navigation"],[134,34,124,36],[134,36,124,38,"getRootState"],[134,48,124,50],[134,49,124,51],[134,50,124,52],[135,6,125,8],[136,6,126,8],[137,6,127,8],[137,13,127,15,"state"],[137,18,127,20],[137,20,127,22,"routes"],[137,26,127,28],[137,27,127,29,"some"],[137,31,127,33],[137,32,127,35,"r"],[137,33,127,36],[137,37,127,41],[137,38,127,42,"rootState"],[137,47,127,51],[137,49,127,53,"routeNames"],[137,59,127,63],[137,60,127,64,"includes"],[137,68,127,72],[137,69,127,73,"r"],[137,70,127,74],[137,71,127,75,"name"],[137,75,127,79],[137,76,127,80],[137,77,127,81],[138,4,128,4],[138,5,128,5],[138,7,128,7],[138,8,128,8,"ref"],[138,11,128,11],[138,12,128,12],[138,13,128,13],[139,4,129,4],[139,10,129,10,"server"],[139,16,129,16],[139,19,129,19,"React"],[139,24,129,24],[139,25,129,25,"useContext"],[139,35,129,35],[139,36,129,36,"serverLocationContext_1"],[139,59,129,59],[139,60,129,60,"ServerContext"],[139,73,129,73],[139,74,129,74],[140,4,130,4],[140,10,130,10,"getInitialState"],[140,25,130,25],[140,28,130,28,"React"],[140,33,130,33],[140,34,130,34,"useCallback"],[140,45,130,45],[140,46,130,46],[140,52,130,52],[141,6,131,8],[141,10,131,12,"value"],[141,15,131,17],[142,6,132,8],[142,10,132,12,"enabledRef"],[142,20,132,22],[142,21,132,23,"current"],[142,28,132,30],[142,30,132,32],[143,8,133,12],[143,14,133,18,"location"],[143,22,133,26],[143,25,133,29,"server"],[143,31,133,35],[143,33,133,37,"location"],[143,41,133,45],[143,46,133,50],[143,53,133,82,"window"],[143,59,133,88],[143,60,133,89,"location"],[143,68,133,97],[143,71,133,100,"undefined"],[143,80,133,109],[143,81,133,110],[144,8,134,12],[144,14,134,18,"path"],[144,18,134,22],[144,21,134,25,"location"],[144,29,134,33],[144,32,134,36,"location"],[144,40,134,44],[144,41,134,45,"pathname"],[144,49,134,53],[144,52,134,56,"location"],[144,60,134,64],[144,61,134,65,"search"],[144,67,134,71],[144,70,134,74,"undefined"],[144,79,134,83],[145,8,135,12],[145,12,135,16,"path"],[145,16,135,20],[145,18,135,22],[146,10,136,16,"value"],[146,15,136,21],[146,18,136,24,"getStateFromPathRef"],[146,37,136,43],[146,38,136,44,"current"],[146,45,136,51],[146,46,136,52,"path"],[146,50,136,56],[146,52,136,58,"configRef"],[146,61,136,67],[146,62,136,68,"current"],[146,69,136,75],[146,70,136,76],[147,8,137,12],[148,8,138,12],[149,8,139,12,"onUnhandledLinking"],[149,26,139,30],[149,27,139,31,"path"],[149,31,139,35],[149,32,139,36],[150,6,140,8],[151,6,141,8],[151,12,141,14,"thenable"],[151,20,141,22],[151,23,141,25],[152,8,142,12,"then"],[152,12,142,16,"then"],[152,13,142,17,"onfulfilled"],[152,24,142,28],[152,26,142,30],[153,10,143,16],[153,17,143,23,"Promise"],[153,24,143,30],[153,25,143,31,"resolve"],[153,32,143,38],[153,33,143,39,"onfulfilled"],[153,44,143,50],[153,47,143,53,"onfulfilled"],[153,58,143,64],[153,59,143,65,"value"],[153,64,143,70],[153,65,143,71],[153,68,143,74,"value"],[153,73,143,79],[153,74,143,80],[154,8,144,12],[154,9,144,13],[155,8,145,12,"catch"],[155,13,145,17,"catch"],[155,14,145,17],[155,16,145,20],[156,10,146,16],[156,17,146,23,"thenable"],[156,25,146,31],[157,8,147,12],[158,6,148,8],[158,7,148,9],[159,6,149,8],[159,13,149,15,"thenable"],[159,21,149,23],[160,6,150,8],[161,4,151,4],[161,5,151,5],[161,7,151,7],[161,9,151,9],[161,10,151,10],[162,4,152,4],[162,10,152,10,"previousIndexRef"],[162,26,152,26],[162,29,152,29,"React"],[162,34,152,34],[162,35,152,35,"useRef"],[162,41,152,41],[162,42,152,42,"undefined"],[162,51,152,51],[162,52,152,52],[163,4,153,4],[163,10,153,10,"previousStateRef"],[163,26,153,26],[163,29,153,29,"React"],[163,34,153,34],[163,35,153,35,"useRef"],[163,41,153,41],[163,42,153,42,"undefined"],[163,51,153,51],[163,52,153,52],[164,4,154,4],[164,10,154,10,"pendingPopStatePathRef"],[164,32,154,32],[164,35,154,35,"React"],[164,40,154,40],[164,41,154,41,"useRef"],[164,47,154,47],[164,48,154,48,"undefined"],[164,57,154,57],[164,58,154,58],[165,4,155,4,"React"],[165,9,155,9],[165,10,155,10,"useEffect"],[165,19,155,19],[165,20,155,20],[165,26,155,26],[166,6,156,8,"previousIndexRef"],[166,22,156,24],[166,23,156,25,"current"],[166,30,156,32],[166,33,156,35,"history"],[166,40,156,42],[166,41,156,43,"index"],[166,46,156,48],[167,6,157,8],[167,13,157,15,"history"],[167,20,157,22],[167,21,157,23,"listen"],[167,27,157,29],[167,28,157,30],[167,34,157,36],[168,8,158,12],[168,14,158,18,"navigation"],[168,24,158,28],[168,27,158,31,"ref"],[168,30,158,34],[168,31,158,35,"current"],[168,38,158,42],[169,8,159,12],[169,12,159,16],[169,13,159,17,"navigation"],[169,23,159,27],[169,27,159,31],[169,28,159,32,"enabled"],[169,35,159,39],[169,37,159,41],[170,10,160,16],[171,8,161,12],[172,8,162,12],[172,14,162,18],[173,10,162,20,"location"],[174,8,162,29],[174,9,162,30],[174,12,162,33,"window"],[174,18,162,39],[175,8,163,12],[175,14,163,18,"path"],[175,18,163,22],[175,21,163,25,"location"],[175,29,163,33],[175,30,163,34,"pathname"],[175,38,163,42],[175,41,163,45,"location"],[175,49,163,53],[175,50,163,54,"search"],[175,56,163,60],[175,59,163,63,"location"],[175,67,163,71],[175,68,163,72,"hash"],[175,72,163,76],[176,8,164,12],[176,14,164,18,"index"],[176,19,164,23],[176,22,164,26,"history"],[176,29,164,33],[176,30,164,34,"index"],[176,35,164,39],[177,8,165,12],[177,14,165,18,"previousIndex"],[177,27,165,31],[177,30,165,34,"previousIndexRef"],[177,46,165,50],[177,47,165,51,"current"],[177,54,165,58],[177,58,165,62],[177,59,165,63],[178,8,166,12,"previousIndexRef"],[178,24,166,28],[178,25,166,29,"current"],[178,32,166,36],[178,35,166,39,"index"],[178,40,166,44],[179,8,167,12,"pendingPopStatePathRef"],[179,30,167,34],[179,31,167,35,"current"],[179,38,167,42],[179,41,167,45,"path"],[179,45,167,49],[180,8,168,12],[181,8,169,12],[182,8,170,12],[183,8,171,12],[183,14,171,18,"record"],[183,20,171,24],[183,23,171,27,"history"],[183,30,171,34],[183,31,171,35,"get"],[183,34,171,38],[183,35,171,39,"index"],[183,40,171,44],[183,41,171,45],[184,8,172,12],[184,12,172,16,"record"],[184,18,172,22],[184,20,172,24,"path"],[184,24,172,28],[184,29,172,33,"path"],[184,33,172,37],[184,37,172,41,"record"],[184,43,172,47],[184,45,172,49,"state"],[184,50,172,54],[184,52,172,56],[185,10,173,16,"navigation"],[185,20,173,26],[185,21,173,27,"resetRoot"],[185,30,173,36],[185,31,173,37,"record"],[185,37,173,43],[185,38,173,44,"state"],[185,43,173,49],[185,44,173,50],[186,10,174,16],[187,8,175,12],[188,8,176,12],[188,14,176,18,"state"],[188,19,176,23],[188,22,176,26,"getStateFromPathRef"],[188,41,176,45],[188,42,176,46,"current"],[188,49,176,53],[188,50,176,54,"path"],[188,54,176,58],[188,56,176,60,"configRef"],[188,65,176,69],[188,66,176,70,"current"],[188,73,176,77],[188,74,176,78],[189,8,177,12],[190,8,178,12],[191,8,179,12],[191,12,179,16,"state"],[191,17,179,21],[191,19,179,23],[192,10,180,16],[193,10,181,16,"onUnhandledLinking"],[193,28,181,34],[193,29,181,35,"path"],[193,33,181,39],[193,34,181,40],[194,10,182,16],[195,10,183,16],[196,10,184,16],[196,14,184,20,"validateRoutesNotExistInRootState"],[196,47,184,53],[196,48,184,54,"state"],[196,53,184,59],[196,54,184,60],[196,56,184,62],[197,12,185,20],[198,10,186,16],[199,10,187,16],[199,14,187,20,"index"],[199,19,187,25],[199,22,187,28,"previousIndex"],[199,35,187,41],[200,10,188,20],[201,0,189,0],[202,0,190,0],[203,0,191,0],[204,0,192,0],[205,0,193,0],[206,0,194,0],[207,0,195,0],[208,0,196,0],[209,0,197,0],[210,0,198,0],[211,0,199,0],[212,0,200,0],[213,0,201,0],[214,0,202,0],[215,0,203,0],[216,0,204,0],[217,0,205,0],[218,0,206,0],[219,10,207,21,"index"],[219,15,207,26],[219,20,207,31,"previousIndex"],[219,33,207,44],[219,38,207,49],[219,39,207,50,"record"],[219,45,207,56],[219,49,207,60],[219,52,207,63,"record"],[219,58,207,69],[219,60,207,71,"path"],[219,64,207,75],[219,67,207,78,"location"],[219,75,207,86],[219,76,207,87,"hash"],[219,80,207,91],[219,82,207,93],[219,87,207,98,"path"],[219,91,207,102],[219,92,207,103],[220,10,208,16],[221,10,208,16],[221,12,209,18],[222,12,210,20],[222,18,210,26,"action"],[222,24,210,32],[222,27,210,35,"getActionFromStateRef"],[222,48,210,56],[222,49,210,57,"current"],[222,56,210,64],[222,57,210,65,"state"],[222,62,210,70],[222,64,210,72,"configRef"],[222,73,210,81],[222,74,210,82,"current"],[222,81,210,89],[222,82,210,90],[223,12,211,20],[223,16,211,24,"action"],[223,22,211,30],[223,27,211,35,"undefined"],[223,36,211,44],[223,38,211,46],[224,14,212,24],[224,18,212,28],[225,16,213,28,"navigation"],[225,26,213,38],[225,27,213,39,"dispatch"],[225,35,213,47],[225,36,213,48,"action"],[225,42,213,54],[225,43,213,55],[226,14,214,24],[226,15,214,25],[226,16,215,24],[226,23,215,31,"e"],[226,24,215,32],[226,26,215,34],[227,16,216,28],[228,16,217,28],[229,16,218,28,"console"],[229,23,218,35],[229,24,218,36,"warn"],[229,28,218,40],[229,29,218,41],[229,82,218,94,"path"],[229,86,218,98],[229,92,218,104],[229,99,218,111,"e"],[229,100,218,112],[229,105,218,117],[229,113,218,125],[229,117,218,129,"e"],[229,118,218,130],[229,122,218,134],[229,126,218,138],[229,130,218,142],[229,139,218,151],[229,143,218,155,"e"],[229,144,218,156],[229,147,218,159,"e"],[229,148,218,160],[229,149,218,161,"message"],[229,156,218,168],[229,159,218,171,"e"],[229,160,218,172],[229,162,218,174],[229,163,218,175],[230,14,219,24],[231,12,220,20],[231,13,220,21],[231,19,221,25],[232,14,222,24,"navigation"],[232,24,222,34],[232,25,222,35,"resetRoot"],[232,34,222,44],[232,35,222,45,"state"],[232,40,222,50],[232,41,222,51],[233,12,223,20],[234,10,224,16],[234,11,224,17],[234,17,225,21],[235,12,226,20,"navigation"],[235,22,226,30],[235,23,226,31,"resetRoot"],[235,32,226,40],[235,33,226,41,"state"],[235,38,226,46],[235,39,226,47],[236,10,227,16],[237,8,228,12],[237,9,228,13],[237,15,229,17],[238,10,230,16],[239,10,231,16,"navigation"],[239,20,231,26],[239,21,231,27,"resetRoot"],[239,30,231,36],[239,31,231,37,"state"],[239,36,231,42],[239,37,231,43],[240,8,232,12],[241,6,233,8],[241,7,233,9],[241,8,233,10],[242,4,234,4],[242,5,234,5],[242,7,234,7],[242,8,234,8,"enabled"],[242,15,234,15],[242,17,234,17,"history"],[242,24,234,24],[242,26,234,26,"onUnhandledLinking"],[242,44,234,44],[242,46,234,46,"ref"],[242,49,234,49],[242,51,234,51,"validateRoutesNotExistInRootState"],[242,84,234,84],[242,85,234,85],[242,86,234,86],[243,4,235,4,"React"],[243,9,235,9],[243,10,235,10,"useEffect"],[243,19,235,19],[243,20,235,20],[243,26,235,26],[244,6,236,8],[244,10,236,12],[244,11,236,13,"enabled"],[244,18,236,20],[244,20,236,22],[245,8,237,12],[246,6,238,8],[247,6,239,8],[247,12,239,14,"getPathForRoute"],[247,27,239,29],[247,30,239,32,"getPathForRoute"],[247,31,239,33,"route"],[247,36,239,38],[247,38,239,40,"state"],[247,43,239,45],[247,48,239,50],[248,8,240,12],[248,12,240,16,"path"],[248,16,240,20],[249,8,241,12],[250,8,242,12],[251,8,243,12],[251,12,243,16,"route"],[251,17,243,21],[251,19,243,23,"path"],[251,23,243,27],[251,25,243,29],[252,10,244,16],[252,16,244,22,"stateForPath"],[252,28,244,34],[252,31,244,37,"getStateFromPathRef"],[252,50,244,56],[252,51,244,57,"current"],[252,58,244,64],[252,59,244,65,"route"],[252,64,244,70],[252,65,244,71,"path"],[252,69,244,75],[252,71,244,77,"configRef"],[252,80,244,86],[252,81,244,87,"current"],[252,88,244,94],[252,89,244,95],[253,10,245,16],[253,14,245,20,"stateForPath"],[253,26,245,32],[253,28,245,34],[254,12,246,20],[254,18,246,26,"focusedRoute"],[254,30,246,38],[254,33,246,41],[254,34,246,42],[254,35,246,43],[254,37,246,45,"native_1"],[254,45,246,53],[254,46,246,54,"findFocusedRoute"],[254,62,246,70],[254,64,246,72,"stateForPath"],[254,76,246,84],[254,77,246,85],[255,12,247,20],[255,16,247,24,"focusedRoute"],[255,28,247,36],[255,32,248,24,"focusedRoute"],[255,44,248,36],[255,45,248,37,"name"],[255,49,248,41],[255,54,248,46,"route"],[255,59,248,51],[255,60,248,52,"name"],[255,64,248,56],[255,68,249,24],[255,69,249,25],[255,70,249,26],[255,72,249,28,"fast_deep_equal_1"],[255,89,249,45],[255,90,249,46,"default"],[255,97,249,53],[255,99,249,55],[256,14,249,57],[256,17,249,60,"focusedRoute"],[256,29,249,72],[256,30,249,73,"params"],[257,12,249,80],[257,13,249,81],[257,15,249,83],[258,14,249,85],[258,17,249,88,"route"],[258,22,249,93],[258,23,249,94,"params"],[259,12,249,101],[259,13,249,102],[259,14,249,103],[259,16,249,105],[260,14,250,24],[261,14,251,24],[262,14,252,24,"path"],[262,18,252,28],[262,21,252,31],[262,22,252,32],[262,23,252,33],[262,25,252,35,"getPathFromState_1"],[262,43,252,53],[262,44,252,54,"appendBaseUrl"],[262,57,252,67],[262,59,252,69,"route"],[262,64,252,74],[262,65,252,75,"path"],[262,69,252,79],[262,70,252,80],[263,14,253,24],[264,12,254,20],[265,10,255,16],[266,8,256,12],[267,8,257,12],[267,12,257,16,"path"],[267,16,257,20],[267,20,257,24],[267,24,257,28],[267,26,257,30],[268,10,258,16,"path"],[268,14,258,20],[268,17,258,23,"getPathFromStateRef"],[268,36,258,42],[268,37,258,43,"current"],[268,44,258,50],[268,45,258,51,"state"],[268,50,258,56],[268,52,258,58,"configRef"],[268,61,258,67],[268,62,258,68,"current"],[268,69,258,75],[268,70,258,76],[269,8,259,12],[270,8,260,12],[271,8,261,12],[272,8,262,12],[273,8,263,12],[274,8,264,12],[275,8,265,12],[276,8,266,12],[277,8,267,12],[278,8,268,12],[279,8,269,12],[280,8,270,12],[281,8,271,12],[282,8,272,12],[283,8,273,12],[284,8,274,12],[285,8,275,12],[285,15,275,19,"path"],[285,19,275,23],[286,6,276,8],[286,7,276,9],[287,6,277,8],[287,10,277,12,"ref"],[287,13,277,15],[287,14,277,16,"current"],[287,21,277,23],[287,23,277,25],[288,8,278,12],[289,8,279,12],[290,8,280,12],[290,14,280,18,"state"],[290,19,280,23],[290,22,280,26,"ref"],[290,25,280,29],[290,26,280,30,"current"],[290,33,280,37],[290,34,280,38,"getRootState"],[290,46,280,50],[290,47,280,51],[290,48,280,52],[291,8,281,12],[291,12,281,16,"state"],[291,17,281,21],[291,19,281,23],[292,10,282,16],[292,16,282,22,"route"],[292,21,282,27],[292,24,282,30],[292,25,282,31],[292,26,282,32],[292,28,282,34,"native_1"],[292,36,282,42],[292,37,282,43,"findFocusedRoute"],[292,53,282,59],[292,55,282,61,"state"],[292,60,282,66],[292,61,282,67],[293,10,283,16],[293,16,283,22,"path"],[293,20,283,26],[293,23,283,29,"getPathForRoute"],[293,38,283,44],[293,39,283,45,"route"],[293,44,283,50],[293,46,283,52,"state"],[293,51,283,57],[293,52,283,58],[294,10,284,16],[294,14,284,20,"previousStateRef"],[294,30,284,36],[294,31,284,37,"current"],[294,38,284,44],[294,43,284,49,"undefined"],[294,52,284,58],[294,54,284,60],[295,12,285,20,"previousStateRef"],[295,28,285,36],[295,29,285,37,"current"],[295,36,285,44],[295,39,285,47,"state"],[295,44,285,52],[296,10,286,16],[297,10,287,16,"history"],[297,17,287,23],[297,18,287,24,"replace"],[297,25,287,31],[297,26,287,32],[298,12,287,34,"path"],[298,16,287,38],[299,12,287,40,"state"],[300,10,287,46],[300,11,287,47],[300,12,287,48],[301,8,288,12],[302,6,289,8],[303,6,290,8],[303,12,290,14,"onStateChange"],[303,25,290,27],[303,28,290,30],[303,34,290,30,"onStateChange"],[303,35,290,30],[303,40,290,42],[304,8,291,12],[304,14,291,18,"navigation"],[304,24,291,28],[304,27,291,31,"ref"],[304,30,291,34],[304,31,291,35,"current"],[304,38,291,42],[305,8,292,12],[305,12,292,16],[305,13,292,17,"navigation"],[305,23,292,27],[305,27,292,31],[305,28,292,32,"enabled"],[305,35,292,39],[305,37,292,41],[306,10,293,16],[307,8,294,12],[308,8,295,12],[308,14,295,18,"previousState"],[308,27,295,31],[308,30,295,34,"previousStateRef"],[308,46,295,50],[308,47,295,51,"current"],[308,54,295,58],[309,8,296,12],[309,14,296,18,"state"],[309,19,296,23],[309,22,296,26,"navigation"],[309,32,296,36],[309,33,296,37,"getRootState"],[309,45,296,49],[309,46,296,50],[309,47,296,51],[310,8,297,12],[311,8,298,12],[311,12,298,16],[311,13,298,17,"state"],[311,18,298,22],[311,20,298,24],[312,10,299,16],[313,8,300,12],[314,8,301,12],[314,14,301,18,"pendingPath"],[314,25,301,29],[314,28,301,32,"pendingPopStatePathRef"],[314,50,301,54],[314,51,301,55,"current"],[314,58,301,62],[315,8,302,12],[315,14,302,18,"route"],[315,19,302,23],[315,22,302,26],[315,23,302,27],[315,24,302,28],[315,26,302,30,"native_1"],[315,34,302,38],[315,35,302,39,"findFocusedRoute"],[315,51,302,55],[315,53,302,57,"state"],[315,58,302,62],[315,59,302,63],[316,8,303,12],[316,14,303,18,"path"],[316,18,303,22],[316,21,303,25,"getPathForRoute"],[316,36,303,40],[316,37,303,41,"route"],[316,42,303,46],[316,44,303,48,"state"],[316,49,303,53],[316,50,303,54],[317,8,304,12,"previousStateRef"],[317,24,304,28],[317,25,304,29,"current"],[317,32,304,36],[317,35,304,39,"state"],[317,40,304,44],[318,8,305,12,"pendingPopStatePathRef"],[318,30,305,34],[318,31,305,35,"current"],[318,38,305,42],[318,41,305,45,"undefined"],[318,50,305,54],[319,8,306,12],[320,8,307,12],[321,8,308,12],[322,8,309,12],[323,8,310,12],[323,14,310,18],[323,15,310,19,"previousFocusedState"],[323,35,310,39],[323,37,310,41,"focusedState"],[323,49,310,53],[323,50,310,54],[323,53,310,57,"findMatchingState"],[323,70,310,74],[323,71,310,75,"previousState"],[323,84,310,88],[323,86,310,90,"state"],[323,91,310,95],[323,92,310,96],[324,8,311,12],[324,12,311,16,"previousFocusedState"],[324,32,311,36],[324,36,312,16,"focusedState"],[324,48,312,28],[325,8,313,16],[326,8,314,16],[327,8,315,16,"path"],[327,12,315,20],[327,17,315,25,"pendingPath"],[327,28,315,36],[327,30,315,38],[328,10,316,16],[328,16,316,22,"historyDelta"],[328,28,316,34],[328,31,316,37],[328,32,316,38,"focusedState"],[328,44,316,50],[328,45,316,51,"history"],[328,52,316,58],[328,55,316,61,"focusedState"],[328,67,316,73],[328,68,316,74,"history"],[328,75,316,81],[328,76,316,82,"length"],[328,82,316,88],[328,85,316,91,"focusedState"],[328,97,316,103],[328,98,316,104,"routes"],[328,104,316,110],[328,105,316,111,"length"],[328,111,316,117],[328,116,317,21,"previousFocusedState"],[328,136,317,41],[328,137,317,42,"history"],[328,144,317,49],[328,147,318,26,"previousFocusedState"],[328,167,318,46],[328,168,318,47,"history"],[328,175,318,54],[328,176,318,55,"length"],[328,182,318,61],[328,185,319,26,"previousFocusedState"],[328,205,319,46],[328,206,319,47,"routes"],[328,212,319,53],[328,213,319,54,"length"],[328,219,319,60],[328,220,319,61],[329,10,320,16],[329,14,320,20,"historyDelta"],[329,26,320,32],[329,29,320,35],[329,30,320,36],[329,32,320,38],[330,12,321,20],[331,12,322,20],[332,12,323,20,"history"],[332,19,323,27],[332,20,323,28,"push"],[332,24,323,32],[332,25,323,33],[333,14,323,35,"path"],[333,18,323,39],[334,14,323,41,"state"],[335,12,323,47],[335,13,323,48],[335,14,323,49],[336,10,324,16],[336,11,324,17],[336,17,325,21],[336,21,325,25,"historyDelta"],[336,33,325,37],[336,36,325,40],[336,37,325,41],[336,39,325,43],[337,12,326,20],[338,12,327,20],[338,18,327,26,"nextIndex"],[338,27,327,35],[338,30,327,38,"history"],[338,37,327,45],[338,38,327,46,"backIndex"],[338,47,327,55],[338,48,327,56],[339,14,327,58,"path"],[340,12,327,63],[340,13,327,64],[340,14,327,65],[341,12,328,20],[341,18,328,26,"currentIndex"],[341,30,328,38],[341,33,328,41,"history"],[341,40,328,48],[341,41,328,49,"index"],[341,46,328,54],[342,12,329,20],[342,16,329,24],[343,14,330,24],[343,18,330,28,"nextIndex"],[343,27,330,37],[343,32,330,42],[343,33,330,43],[343,34,330,44],[343,38,331,28,"nextIndex"],[343,47,331,37],[343,50,331,40,"currentIndex"],[343,62,331,52],[344,14,332,28],[345,14,333,28,"history"],[345,21,333,35],[345,22,333,36,"get"],[345,25,333,39],[345,26,333,40,"nextIndex"],[345,35,333,49],[345,38,333,52,"currentIndex"],[345,50,333,64],[345,51,333,65],[345,53,333,67],[346,16,334,28],[347,16,335,28],[347,22,335,34,"history"],[347,29,335,41],[347,30,335,42,"go"],[347,32,335,44],[347,33,335,45,"nextIndex"],[347,42,335,54],[347,45,335,57,"currentIndex"],[347,57,335,69],[347,58,335,70],[348,14,336,24],[348,15,336,25],[348,21,337,29],[349,16,338,28],[350,16,339,28],[351,16,340,28],[352,16,341,28],[352,22,341,34,"history"],[352,29,341,41],[352,30,341,42,"go"],[352,32,341,44],[352,33,341,45,"historyDelta"],[352,45,341,57],[352,46,341,58],[353,14,342,24],[354,14,343,24],[355,14,344,24,"history"],[355,21,344,31],[355,22,344,32,"replace"],[355,29,344,39],[355,30,344,40],[356,16,344,42,"path"],[356,20,344,46],[357,16,344,48,"state"],[358,14,344,54],[358,15,344,55],[358,16,344,56],[359,12,345,20],[359,13,345,21],[359,14,346,20],[359,20,346,26],[360,14,347,24],[361,12,347,24],[362,10,349,16],[362,11,349,17],[362,17,350,21],[363,12,351,20],[364,12,352,20,"history"],[364,19,352,27],[364,20,352,28,"replace"],[364,27,352,35],[364,28,352,36],[365,14,352,38,"path"],[365,18,352,42],[366,14,352,44,"state"],[367,12,352,50],[367,13,352,51],[367,14,352,52],[368,10,353,16],[369,8,354,12],[369,9,354,13],[369,15,355,17],[370,10,356,16],[371,10,357,16],[372,10,358,16,"history"],[372,17,358,23],[372,18,358,24,"replace"],[372,25,358,31],[372,26,358,32],[373,12,358,34,"path"],[373,16,358,38],[374,12,358,40,"state"],[375,10,358,46],[375,11,358,47],[375,12,358,48],[376,8,359,12],[377,6,360,8],[377,7,360,9],[378,6,361,8],[379,6,362,8],[380,6,363,8],[381,6,364,8],[381,13,364,15,"ref"],[381,16,364,18],[381,17,364,19,"current"],[381,24,364,26],[381,26,364,28,"addListener"],[381,37,364,39],[381,38,364,40],[381,45,364,47],[381,47,364,49],[381,48,364,50],[381,49,364,51],[381,51,364,53,"exports"],[381,58,364,60],[381,59,364,61,"series"],[381,65,364,67],[381,67,364,69,"onStateChange"],[381,80,364,82],[381,81,364,83],[381,82,364,84],[382,4,365,4],[382,5,365,5],[382,7,365,7],[382,8,365,8,"enabled"],[382,15,365,15],[382,17,365,17,"history"],[382,24,365,24],[382,26,365,26,"ref"],[382,29,365,29],[382,30,365,30],[382,31,365,31],[383,4,366,4],[383,11,366,11],[384,6,367,8,"getInitialState"],[385,4,368,4],[385,5,368,5],[386,2,369,0],[387,2,370,0,"exports"],[387,9,370,7],[387,10,370,8,"useLinking"],[387,20,370,18],[387,23,370,21,"useLinking"],[387,33,370,31],[388,0,370,32],[388,3]],"functionMap":{"names":["<global>","<anonymous>","desc.get","findMatchingState","series","callback","useLinking","React.useEffect$argument_0","validateRoutesNotExistInRootState","state.routes.some$argument_0","getInitialState","thenable.then","thenable._catch","history.listen$argument_0","getPathForRoute","onStateChange"],"mappings":"AAA;0ECC;sCCI,2BD;CDG,KC;CDG;gFCC;CDE,IC;CDE;kDCC;CDM;wDCC;CDE;0BGa;CHwB;eII;qBCE;KDE;CJE;AMG;oBCE;eNoB;SMK;KDC;oBCU;KDM;gEEC;kCCK,8CD;KFC;8CIE;YCY;aDE;YEC;aFE;KJI;oBCI;8BME;SN4E;KDC;oBCC;gCOI;SPqC;8BQc;SRsE;KDK;CNI"}},"type":"js/module"}]}