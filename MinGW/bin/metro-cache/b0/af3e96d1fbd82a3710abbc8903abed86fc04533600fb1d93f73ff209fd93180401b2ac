{"dependencies":[{"name":"./fork/getStateFromPath-forks","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":4,"column":33,"index":183},"end":{"line":4,"column":73,"index":223}}],"key":"ipxv70qXETAA38UCDZpBXxWaERo="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getNormalizedStatePath = exports.getRouteInfoFromState = void 0;\n  const getStateFromPath_forks_1 = require(_dependencyMap[0], \"./fork/getStateFromPath-forks\");\n  function getRouteInfoFromState(getPathFromState, state, baseUrl) {\n    const {\n      path\n    } = getPathFromState(state, false);\n    const qualified = getPathFromState(state, true);\n    return {\n      // TODO: This may have a predefined origin attached in the future.\n      unstable_globalHref: path,\n      pathname: (0, getStateFromPath_forks_1.stripBaseUrl)(path, baseUrl).split('?')['0'],\n      isIndex: isIndexPath(state),\n      ...getNormalizedStatePath(qualified, baseUrl)\n    };\n  }\n  exports.getRouteInfoFromState = getRouteInfoFromState;\n  function isIndexPath(state) {\n    const route = state.routes[state.index ?? state.routes.length - 1];\n    if (route.state) {\n      return isIndexPath(route.state);\n    }\n    // Index routes on the same level as a layout do not have `index` in their name\n    if (route.params && 'screen' in route.params) {\n      return route.params.screen === 'index';\n    }\n    // The `params` key will not exist if there are no params\n    // So we need to do a positive lookahead to check if the route ends with /index\n    // Nested routes that are hoisted will have a name ending with /index\n    // e.g name could be /user/[id]/index\n    if (route.name.match(/.+\\/index$/)) return true;\n    // The state will either have params (because there are multiple _layout) or it will be hoisted with a name\n    // If we don't match the above cases, then it's not an index route\n    return false;\n  }\n  // TODO: Split up getPathFromState to return all this info at once.\n  function getNormalizedStatePath({\n    path: statePath,\n    params\n  }, baseUrl) {\n    const [pathname] = statePath.split('?');\n    return {\n      // Strip empty path at the start\n      segments: (0, getStateFromPath_forks_1.stripBaseUrl)(pathname, baseUrl).split('/').filter(Boolean).map(decodeURIComponent),\n      // TODO: This is not efficient, we should generate based on the state instead\n      // of converting to string then back to object\n      params: decodeParams(params)\n    };\n  }\n  exports.getNormalizedStatePath = getNormalizedStatePath;\n  function decodeParams(params) {\n    const parsed = {};\n    for (const [key, value] of Object.entries(params)) {\n      try {\n        if (key === 'params' && typeof value === 'object') {\n          parsed[key] = decodeParams(value);\n        } else if (Array.isArray(value)) {\n          parsed[key] = value.map(v => decodeURIComponent(v));\n        } else {\n          parsed[key] = decodeURIComponent(value);\n        }\n      } catch {\n        parsed[key] = value;\n      }\n    }\n    return parsed;\n  }\n});","lineCount":73,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"getNormalizedStatePath"],[7,32,3,30],[7,35,3,33,"exports"],[7,42,3,40],[7,43,3,41,"getRouteInfoFromState"],[7,64,3,62],[7,67,3,65],[7,72,3,70],[7,73,3,71],[8,2,4,0],[8,8,4,6,"getStateFromPath_forks_1"],[8,32,4,30],[8,35,4,33,"require"],[8,42,4,40],[8,43,4,40,"_dependencyMap"],[8,57,4,40],[8,93,4,72],[8,94,4,73],[9,2,5,0],[9,11,5,9,"getRouteInfoFromState"],[9,32,5,30,"getRouteInfoFromState"],[9,33,5,31,"getPathFromState"],[9,49,5,47],[9,51,5,49,"state"],[9,56,5,54],[9,58,5,56,"baseUrl"],[9,65,5,63],[9,67,5,65],[10,4,6,4],[10,10,6,10],[11,6,6,12,"path"],[12,4,6,17],[12,5,6,18],[12,8,6,21,"getPathFromState"],[12,24,6,37],[12,25,6,38,"state"],[12,30,6,43],[12,32,6,45],[12,37,6,50],[12,38,6,51],[13,4,7,4],[13,10,7,10,"qualified"],[13,19,7,19],[13,22,7,22,"getPathFromState"],[13,38,7,38],[13,39,7,39,"state"],[13,44,7,44],[13,46,7,46],[13,50,7,50],[13,51,7,51],[14,4,8,4],[14,11,8,11],[15,6,9,8],[16,6,10,8,"unstable_globalHref"],[16,25,10,27],[16,27,10,29,"path"],[16,31,10,33],[17,6,11,8,"pathname"],[17,14,11,16],[17,16,11,18],[17,17,11,19],[17,18,11,20],[17,20,11,22,"getStateFromPath_forks_1"],[17,44,11,46],[17,45,11,47,"stripBaseUrl"],[17,57,11,59],[17,59,11,61,"path"],[17,63,11,65],[17,65,11,67,"baseUrl"],[17,72,11,74],[17,73,11,75],[17,74,11,76,"split"],[17,79,11,81],[17,80,11,82],[17,83,11,85],[17,84,11,86],[17,85,11,87],[17,88,11,90],[17,89,11,91],[18,6,12,8,"isIndex"],[18,13,12,15],[18,15,12,17,"isIndexPath"],[18,26,12,28],[18,27,12,29,"state"],[18,32,12,34],[18,33,12,35],[19,6,13,8],[19,9,13,11,"getNormalizedStatePath"],[19,31,13,33],[19,32,13,34,"qualified"],[19,41,13,43],[19,43,13,45,"baseUrl"],[19,50,13,52],[20,4,14,4],[20,5,14,5],[21,2,15,0],[22,2,16,0,"exports"],[22,9,16,7],[22,10,16,8,"getRouteInfoFromState"],[22,31,16,29],[22,34,16,32,"getRouteInfoFromState"],[22,55,16,53],[23,2,17,0],[23,11,17,9,"isIndexPath"],[23,22,17,20,"isIndexPath"],[23,23,17,21,"state"],[23,28,17,26],[23,30,17,28],[24,4,18,4],[24,10,18,10,"route"],[24,15,18,15],[24,18,18,18,"state"],[24,23,18,23],[24,24,18,24,"routes"],[24,30,18,30],[24,31,18,31,"state"],[24,36,18,36],[24,37,18,37,"index"],[24,42,18,42],[24,46,18,46,"state"],[24,51,18,51],[24,52,18,52,"routes"],[24,58,18,58],[24,59,18,59,"length"],[24,65,18,65],[24,68,18,68],[24,69,18,69],[24,70,18,70],[25,4,19,4],[25,8,19,8,"route"],[25,13,19,13],[25,14,19,14,"state"],[25,19,19,19],[25,21,19,21],[26,6,20,8],[26,13,20,15,"isIndexPath"],[26,24,20,26],[26,25,20,27,"route"],[26,30,20,32],[26,31,20,33,"state"],[26,36,20,38],[26,37,20,39],[27,4,21,4],[28,4,22,4],[29,4,23,4],[29,8,23,8,"route"],[29,13,23,13],[29,14,23,14,"params"],[29,20,23,20],[29,24,23,24],[29,32,23,32],[29,36,23,36,"route"],[29,41,23,41],[29,42,23,42,"params"],[29,48,23,48],[29,50,23,50],[30,6,24,8],[30,13,24,15,"route"],[30,18,24,20],[30,19,24,21,"params"],[30,25,24,27],[30,26,24,28,"screen"],[30,32,24,34],[30,37,24,39],[30,44,24,46],[31,4,25,4],[32,4,26,4],[33,4,27,4],[34,4,28,4],[35,4,29,4],[36,4,30,4],[36,8,30,8,"route"],[36,13,30,13],[36,14,30,14,"name"],[36,18,30,18],[36,19,30,19,"match"],[36,24,30,24],[36,25,30,25],[36,37,30,37],[36,38,30,38],[36,40,31,8],[36,47,31,15],[36,51,31,19],[37,4,32,4],[38,4,33,4],[39,4,34,4],[39,11,34,11],[39,16,34,16],[40,2,35,0],[41,2,36,0],[42,2,37,0],[42,11,37,9,"getNormalizedStatePath"],[42,33,37,31,"getNormalizedStatePath"],[42,34,37,32],[43,4,37,34,"path"],[43,8,37,38],[43,10,37,40,"statePath"],[43,19,37,49],[44,4,37,51,"params"],[45,2,37,59],[45,3,37,60],[45,5,37,62,"baseUrl"],[45,12,37,69],[45,14,37,71],[46,4,38,4],[46,10,38,10],[46,11,38,11,"pathname"],[46,19,38,19],[46,20,38,20],[46,23,38,23,"statePath"],[46,32,38,32],[46,33,38,33,"split"],[46,38,38,38],[46,39,38,39],[46,42,38,42],[46,43,38,43],[47,4,39,4],[47,11,39,11],[48,6,40,8],[49,6,41,8,"segments"],[49,14,41,16],[49,16,41,18],[49,17,41,19],[49,18,41,20],[49,20,41,22,"getStateFromPath_forks_1"],[49,44,41,46],[49,45,41,47,"stripBaseUrl"],[49,57,41,59],[49,59,41,61,"pathname"],[49,67,41,69],[49,69,41,71,"baseUrl"],[49,76,41,78],[49,77,41,79],[49,78,41,80,"split"],[49,83,41,85],[49,84,41,86],[49,87,41,89],[49,88,41,90],[49,89,41,91,"filter"],[49,95,41,97],[49,96,41,98,"Boolean"],[49,103,41,105],[49,104,41,106],[49,105,41,107,"map"],[49,108,41,110],[49,109,41,111,"decodeURIComponent"],[49,127,41,129],[49,128,41,130],[50,6,42,8],[51,6,43,8],[52,6,44,8,"params"],[52,12,44,14],[52,14,44,16,"decodeParams"],[52,26,44,28],[52,27,44,29,"params"],[52,33,44,35],[53,4,45,4],[53,5,45,5],[54,2,46,0],[55,2,47,0,"exports"],[55,9,47,7],[55,10,47,8,"getNormalizedStatePath"],[55,32,47,30],[55,35,47,33,"getNormalizedStatePath"],[55,57,47,55],[56,2,48,0],[56,11,48,9,"decodeParams"],[56,23,48,21,"decodeParams"],[56,24,48,22,"params"],[56,30,48,28],[56,32,48,30],[57,4,49,4],[57,10,49,10,"parsed"],[57,16,49,16],[57,19,49,19],[57,20,49,20],[57,21,49,21],[58,4,50,4],[58,9,50,9],[58,15,50,15],[58,16,50,16,"key"],[58,19,50,19],[58,21,50,21,"value"],[58,26,50,26],[58,27,50,27],[58,31,50,31,"Object"],[58,37,50,37],[58,38,50,38,"entries"],[58,45,50,45],[58,46,50,46,"params"],[58,52,50,52],[58,53,50,53],[58,55,50,55],[59,6,51,8],[59,10,51,12],[60,8,52,12],[60,12,52,16,"key"],[60,15,52,19],[60,20,52,24],[60,28,52,32],[60,32,52,36],[60,39,52,43,"value"],[60,44,52,48],[60,49,52,53],[60,57,52,61],[60,59,52,63],[61,10,53,16,"parsed"],[61,16,53,22],[61,17,53,23,"key"],[61,20,53,26],[61,21,53,27],[61,24,53,30,"decodeParams"],[61,36,53,42],[61,37,53,43,"value"],[61,42,53,48],[61,43,53,49],[62,8,54,12],[62,9,54,13],[62,15,55,17],[62,19,55,21,"Array"],[62,24,55,26],[62,25,55,27,"isArray"],[62,32,55,34],[62,33,55,35,"value"],[62,38,55,40],[62,39,55,41],[62,41,55,43],[63,10,56,16,"parsed"],[63,16,56,22],[63,17,56,23,"key"],[63,20,56,26],[63,21,56,27],[63,24,56,30,"value"],[63,29,56,35],[63,30,56,36,"map"],[63,33,56,39],[63,34,56,41,"v"],[63,35,56,42],[63,39,56,47,"decodeURIComponent"],[63,57,56,65],[63,58,56,66,"v"],[63,59,56,67],[63,60,56,68],[63,61,56,69],[64,8,57,12],[64,9,57,13],[64,15,58,17],[65,10,59,16,"parsed"],[65,16,59,22],[65,17,59,23,"key"],[65,20,59,26],[65,21,59,27],[65,24,59,30,"decodeURIComponent"],[65,42,59,48],[65,43,59,49,"value"],[65,48,59,54],[65,49,59,55],[66,8,60,12],[67,6,61,8],[67,7,61,9],[67,8,62,8],[67,14,62,14],[68,8,63,12,"parsed"],[68,14,63,18],[68,15,63,19,"key"],[68,18,63,22],[68,19,63,23],[68,22,63,26,"value"],[68,27,63,31],[69,6,64,8],[70,4,65,4],[71,4,66,4],[71,11,66,11,"parsed"],[71,17,66,17],[72,2,67,0],[73,0,67,1],[73,3]],"functionMap":{"names":["<global>","getRouteInfoFromState","isIndexPath","getNormalizedStatePath","decodeParams","value.map$argument_0"],"mappings":"AAA;ACI;CDU;AEE;CFkB;AGE;CHS;AIE;wCCQ,4BD;CJW"}},"type":"js/module"}]}