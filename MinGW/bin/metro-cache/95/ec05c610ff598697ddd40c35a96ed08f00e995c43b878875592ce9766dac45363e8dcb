{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.resolveHrefStringWithSegments = exports.resolveHref = void 0;\n  /** Resolve an href object into a fully qualified, relative href. */\n  const resolveHref = href => {\n    if (typeof href === 'string') {\n      return (0, exports.resolveHref)({\n        pathname: href\n      });\n    }\n    const path = href.pathname ?? '';\n    if (!href?.params) {\n      return path;\n    }\n    const {\n      pathname,\n      params\n    } = createQualifiedPathname(path, {\n      ...href.params\n    });\n    const paramsString = createQueryParams(params);\n    return pathname + (paramsString ? `?${paramsString}` : '');\n  };\n  exports.resolveHref = resolveHref;\n  function resolveHrefStringWithSegments(href, {\n    segments = [],\n    params = {}\n  } = {}, {\n    relativeToDirectory\n  } = {}) {\n    if (href.startsWith('.')) {\n      // Resolve base path by merging the current segments with the params\n      let base = segments?.map(segment => {\n        if (!segment.startsWith('[')) return segment;\n        if (segment.startsWith('[...')) {\n          segment = segment.slice(4, -1);\n          const param = params[segment];\n          if (Array.isArray(param)) {\n            return param.join('/');\n          } else {\n            return param?.split(',')?.join('/') ?? '';\n          }\n        } else {\n          segment = segment.slice(1, -1);\n          return params[segment];\n        }\n      }).filter(Boolean).join('/') ?? '/';\n      if (relativeToDirectory) {\n        base = `${base}/`;\n      }\n      const url = new URL(href, `http://hostname/${base}`);\n      href = `${url.pathname}${url.search}`;\n    }\n    return href;\n  }\n  exports.resolveHrefStringWithSegments = resolveHrefStringWithSegments;\n  function createQualifiedPathname(pathname, params) {\n    for (const [key, value = ''] of Object.entries(params)) {\n      const dynamicKey = `[${key}]`;\n      const deepDynamicKey = `[...${key}]`;\n      if (pathname.includes(dynamicKey)) {\n        pathname = pathname.replace(dynamicKey, encodeParam(value));\n      } else if (pathname.includes(deepDynamicKey)) {\n        pathname = pathname.replace(deepDynamicKey, encodeParam(value));\n      } else {\n        continue;\n      }\n      delete params[key];\n    }\n    return {\n      pathname,\n      params\n    };\n  }\n  function encodeParam(param) {\n    if (Array.isArray(param)) {\n      return param.map(p => encodeParam(p)).join('/');\n    }\n    return encodeURIComponent(param.toString());\n  }\n  function createQueryParams(params) {\n    return Object.entries(params)\n    // Allow nullish params\n    .filter(([, value]) => value != null).map(([key, value]) => `${key}=${encodeURIComponent(value.toString())}`).join('&');\n  }\n});","lineCount":90,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"resolveHrefStringWithSegments"],[7,39,3,37],[7,42,3,40,"exports"],[7,49,3,47],[7,50,3,48,"resolveHref"],[7,61,3,59],[7,64,3,62],[7,69,3,67],[7,70,3,68],[8,2,4,0],[9,2,5,0],[9,8,5,6,"resolveHref"],[9,19,5,17],[9,22,5,21,"href"],[9,26,5,25],[9,30,5,30],[10,4,6,4],[10,8,6,8],[10,15,6,15,"href"],[10,19,6,19],[10,24,6,24],[10,32,6,32],[10,34,6,34],[11,6,7,8],[11,13,7,15],[11,14,7,16],[11,15,7,17],[11,17,7,19,"exports"],[11,24,7,26],[11,25,7,27,"resolveHref"],[11,36,7,38],[11,38,7,40],[12,8,7,42,"pathname"],[12,16,7,50],[12,18,7,52,"href"],[13,6,7,57],[13,7,7,58],[13,8,7,59],[14,4,8,4],[15,4,9,4],[15,10,9,10,"path"],[15,14,9,14],[15,17,9,17,"href"],[15,21,9,21],[15,22,9,22,"pathname"],[15,30,9,30],[15,34,9,34],[15,36,9,36],[16,4,10,4],[16,8,10,8],[16,9,10,9,"href"],[16,13,10,13],[16,15,10,15,"params"],[16,21,10,21],[16,23,10,23],[17,6,11,8],[17,13,11,15,"path"],[17,17,11,19],[18,4,12,4],[19,4,13,4],[19,10,13,10],[20,6,13,12,"pathname"],[20,14,13,20],[21,6,13,22,"params"],[22,4,13,29],[22,5,13,30],[22,8,13,33,"createQualifiedPathname"],[22,31,13,56],[22,32,13,57,"path"],[22,36,13,61],[22,38,13,63],[23,6,14,8],[23,9,14,11,"href"],[23,13,14,15],[23,14,14,16,"params"],[24,4,15,4],[24,5,15,5],[24,6,15,6],[25,4,16,4],[25,10,16,10,"paramsString"],[25,22,16,22],[25,25,16,25,"createQueryParams"],[25,42,16,42],[25,43,16,43,"params"],[25,49,16,49],[25,50,16,50],[26,4,17,4],[26,11,17,11,"pathname"],[26,19,17,19],[26,23,17,23,"paramsString"],[26,35,17,35],[26,38,17,38],[26,42,17,42,"paramsString"],[26,54,17,54],[26,56,17,56],[26,59,17,59],[26,61,17,61],[26,62,17,62],[27,2,18,0],[27,3,18,1],[28,2,19,0,"exports"],[28,9,19,7],[28,10,19,8,"resolveHref"],[28,21,19,19],[28,24,19,22,"resolveHref"],[28,35,19,33],[29,2,20,0],[29,11,20,9,"resolveHrefStringWithSegments"],[29,40,20,38,"resolveHrefStringWithSegments"],[29,41,20,39,"href"],[29,45,20,43],[29,47,20,45],[30,4,20,47,"segments"],[30,12,20,55],[30,15,20,58],[30,17,20,60],[31,4,20,62,"params"],[31,10,20,68],[31,13,20,71],[31,14,20,72],[32,2,20,74],[32,3,20,75],[32,6,20,78],[32,7,20,79],[32,8,20,80],[32,10,20,82],[33,4,20,84,"relativeToDirectory"],[34,2,20,104],[34,3,20,105],[34,6,20,108],[34,7,20,109],[34,8,20,110],[34,10,20,112],[35,4,21,4],[35,8,21,8,"href"],[35,12,21,12],[35,13,21,13,"startsWith"],[35,23,21,23],[35,24,21,24],[35,27,21,27],[35,28,21,28],[35,30,21,30],[36,6,22,8],[37,6,23,8],[37,10,23,12,"base"],[37,14,23,16],[37,17,23,19,"segments"],[37,25,23,27],[37,27,24,14,"map"],[37,30,24,17],[37,31,24,19,"segment"],[37,38,24,26],[37,42,24,31],[38,8,25,12],[38,12,25,16],[38,13,25,17,"segment"],[38,20,25,24],[38,21,25,25,"startsWith"],[38,31,25,35],[38,32,25,36],[38,35,25,39],[38,36,25,40],[38,38,26,16],[38,45,26,23,"segment"],[38,52,26,30],[39,8,27,12],[39,12,27,16,"segment"],[39,19,27,23],[39,20,27,24,"startsWith"],[39,30,27,34],[39,31,27,35],[39,37,27,41],[39,38,27,42],[39,40,27,44],[40,10,28,16,"segment"],[40,17,28,23],[40,20,28,26,"segment"],[40,27,28,33],[40,28,28,34,"slice"],[40,33,28,39],[40,34,28,40],[40,35,28,41],[40,37,28,43],[40,38,28,44],[40,39,28,45],[40,40,28,46],[41,10,29,16],[41,16,29,22,"param"],[41,21,29,27],[41,24,29,30,"params"],[41,30,29,36],[41,31,29,37,"segment"],[41,38,29,44],[41,39,29,45],[42,10,30,16],[42,14,30,20,"Array"],[42,19,30,25],[42,20,30,26,"isArray"],[42,27,30,33],[42,28,30,34,"param"],[42,33,30,39],[42,34,30,40],[42,36,30,42],[43,12,31,20],[43,19,31,27,"param"],[43,24,31,32],[43,25,31,33,"join"],[43,29,31,37],[43,30,31,38],[43,33,31,41],[43,34,31,42],[44,10,32,16],[44,11,32,17],[44,17,33,21],[45,12,34,20],[45,19,34,27,"param"],[45,24,34,32],[45,26,34,34,"split"],[45,31,34,39],[45,32,34,40],[45,35,34,43],[45,36,34,44],[45,38,34,46,"join"],[45,42,34,50],[45,43,34,51],[45,46,34,54],[45,47,34,55],[45,51,34,59],[45,53,34,61],[46,10,35,16],[47,8,36,12],[47,9,36,13],[47,15,37,17],[48,10,38,16,"segment"],[48,17,38,23],[48,20,38,26,"segment"],[48,27,38,33],[48,28,38,34,"slice"],[48,33,38,39],[48,34,38,40],[48,35,38,41],[48,37,38,43],[48,38,38,44],[48,39,38,45],[48,40,38,46],[49,10,39,16],[49,17,39,23,"params"],[49,23,39,29],[49,24,39,30,"segment"],[49,31,39,37],[49,32,39,38],[50,8,40,12],[51,6,41,8],[51,7,41,9],[51,8,41,10],[51,9,42,13,"filter"],[51,15,42,19],[51,16,42,20,"Boolean"],[51,23,42,27],[51,24,42,28],[51,25,43,13,"join"],[51,29,43,17],[51,30,43,18],[51,33,43,21],[51,34,43,22],[51,38,43,26],[51,41,43,29],[52,6,44,8],[52,10,44,12,"relativeToDirectory"],[52,29,44,31],[52,31,44,33],[53,8,45,12,"base"],[53,12,45,16],[53,15,45,19],[53,18,45,22,"base"],[53,22,45,26],[53,25,45,29],[54,6,46,8],[55,6,47,8],[55,12,47,14,"url"],[55,15,47,17],[55,18,47,20],[55,22,47,24,"URL"],[55,25,47,27],[55,26,47,28,"href"],[55,30,47,32],[55,32,47,34],[55,51,47,53,"base"],[55,55,47,57],[55,57,47,59],[55,58,47,60],[56,6,48,8,"href"],[56,10,48,12],[56,13,48,15],[56,16,48,18,"url"],[56,19,48,21],[56,20,48,22,"pathname"],[56,28,48,30],[56,31,48,33,"url"],[56,34,48,36],[56,35,48,37,"search"],[56,41,48,43],[56,43,48,45],[57,4,49,4],[58,4,50,4],[58,11,50,11,"href"],[58,15,50,15],[59,2,51,0],[60,2,52,0,"exports"],[60,9,52,7],[60,10,52,8,"resolveHrefStringWithSegments"],[60,39,52,37],[60,42,52,40,"resolveHrefStringWithSegments"],[60,71,52,69],[61,2,53,0],[61,11,53,9,"createQualifiedPathname"],[61,34,53,32,"createQualifiedPathname"],[61,35,53,33,"pathname"],[61,43,53,41],[61,45,53,43,"params"],[61,51,53,49],[61,53,53,51],[62,4,54,4],[62,9,54,9],[62,15,54,15],[62,16,54,16,"key"],[62,19,54,19],[62,21,54,21,"value"],[62,26,54,26],[62,29,54,29],[62,31,54,31],[62,32,54,32],[62,36,54,36,"Object"],[62,42,54,42],[62,43,54,43,"entries"],[62,50,54,50],[62,51,54,51,"params"],[62,57,54,57],[62,58,54,58],[62,60,54,60],[63,6,55,8],[63,12,55,14,"dynamicKey"],[63,22,55,24],[63,25,55,27],[63,29,55,31,"key"],[63,32,55,34],[63,35,55,37],[64,6,56,8],[64,12,56,14,"deepDynamicKey"],[64,26,56,28],[64,29,56,31],[64,36,56,38,"key"],[64,39,56,41],[64,42,56,44],[65,6,57,8],[65,10,57,12,"pathname"],[65,18,57,20],[65,19,57,21,"includes"],[65,27,57,29],[65,28,57,30,"dynamicKey"],[65,38,57,40],[65,39,57,41],[65,41,57,43],[66,8,58,12,"pathname"],[66,16,58,20],[66,19,58,23,"pathname"],[66,27,58,31],[66,28,58,32,"replace"],[66,35,58,39],[66,36,58,40,"dynamicKey"],[66,46,58,50],[66,48,58,52,"encodeParam"],[66,59,58,63],[66,60,58,64,"value"],[66,65,58,69],[66,66,58,70],[66,67,58,71],[67,6,59,8],[67,7,59,9],[67,13,60,13],[67,17,60,17,"pathname"],[67,25,60,25],[67,26,60,26,"includes"],[67,34,60,34],[67,35,60,35,"deepDynamicKey"],[67,49,60,49],[67,50,60,50],[67,52,60,52],[68,8,61,12,"pathname"],[68,16,61,20],[68,19,61,23,"pathname"],[68,27,61,31],[68,28,61,32,"replace"],[68,35,61,39],[68,36,61,40,"deepDynamicKey"],[68,50,61,54],[68,52,61,56,"encodeParam"],[68,63,61,67],[68,64,61,68,"value"],[68,69,61,73],[68,70,61,74],[68,71,61,75],[69,6,62,8],[69,7,62,9],[69,13,63,13],[70,8,64,12],[71,6,65,8],[72,6,66,8],[72,13,66,15,"params"],[72,19,66,21],[72,20,66,22,"key"],[72,23,66,25],[72,24,66,26],[73,4,67,4],[74,4,68,4],[74,11,68,11],[75,6,68,13,"pathname"],[75,14,68,21],[76,6,68,23,"params"],[77,4,68,30],[77,5,68,31],[78,2,69,0],[79,2,70,0],[79,11,70,9,"encodeParam"],[79,22,70,20,"encodeParam"],[79,23,70,21,"param"],[79,28,70,26],[79,30,70,28],[80,4,71,4],[80,8,71,8,"Array"],[80,13,71,13],[80,14,71,14,"isArray"],[80,21,71,21],[80,22,71,22,"param"],[80,27,71,27],[80,28,71,28],[80,30,71,30],[81,6,72,8],[81,13,72,15,"param"],[81,18,72,20],[81,19,72,21,"map"],[81,22,72,24],[81,23,72,26,"p"],[81,24,72,27],[81,28,72,32,"encodeParam"],[81,39,72,43],[81,40,72,44,"p"],[81,41,72,45],[81,42,72,46],[81,43,72,47],[81,44,72,48,"join"],[81,48,72,52],[81,49,72,53],[81,52,72,56],[81,53,72,57],[82,4,73,4],[83,4,74,4],[83,11,74,11,"encodeURIComponent"],[83,29,74,29],[83,30,74,30,"param"],[83,35,74,35],[83,36,74,36,"toString"],[83,44,74,44],[83,45,74,45],[83,46,74,46],[83,47,74,47],[84,2,75,0],[85,2,76,0],[85,11,76,9,"createQueryParams"],[85,28,76,26,"createQueryParams"],[85,29,76,27,"params"],[85,35,76,33],[85,37,76,35],[86,4,77,4],[86,11,77,12,"Object"],[86,17,77,18],[86,18,77,19,"entries"],[86,25,77,26],[86,26,77,27,"params"],[86,32,77,33],[87,4,78,8],[88,4,78,8],[88,5,79,9,"filter"],[88,11,79,15],[88,12,79,16],[88,13,79,17],[88,16,79,20,"value"],[88,21,79,25],[88,22,79,26],[88,27,79,31,"value"],[88,32,79,36],[88,36,79,40],[88,40,79,44],[88,41,79,45],[88,42,80,9,"map"],[88,45,80,12],[88,46,80,13],[88,47,80,14],[88,48,80,15,"key"],[88,51,80,18],[88,53,80,20,"value"],[88,58,80,25],[88,59,80,26],[88,64,80,31],[88,67,80,34,"key"],[88,70,80,37],[88,74,80,41,"encodeURIComponent"],[88,92,80,59],[88,93,80,60,"value"],[88,98,80,65],[88,99,80,66,"toString"],[88,107,80,74],[88,108,80,75],[88,109,80,76],[88,110,80,77],[88,112,80,79],[88,113,80,80],[88,114,81,9,"join"],[88,118,81,13],[88,119,81,14],[88,122,81,17],[88,123,81,18],[89,2,82,0],[90,0,82,1],[90,3]],"functionMap":{"names":["<global>","resolveHref","resolveHrefStringWithSegments","segments.map$argument_0","createQualifiedPathname","encodeParam","param.map$argument_0","createQueryParams","Object.entries.filter$argument_0","Object.entries.filter.map$argument_0"],"mappings":"AAA;oBCI;CDa;AEE;kBCI;SDiB;CFU;AIE;CJgB;AKC;yBCE,qBD;CLG;AOC;gBCG,4BD;aEC,kEF;CPE"}},"type":"js/module"}]}