{"dependencies":[{"name":"query-string","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":44,"index":59}}],"key":"GFSDDT7dIJnvWSebFhtcKgwXBCQ="}},{"name":"./getPatternParts.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":4,"column":0,"index":60},"end":{"line":4,"column":55,"index":115}}],"key":"z4Ap0VIyJOTYCzFllv6s+WEku7M="}},{"name":"./validatePathConfig.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":5,"column":0,"index":116},"end":{"line":5,"column":61,"index":177}}],"key":"VmpJdDW9SG25WCfHhqlvsXwd7IE="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getPathFromState = getPathFromState;\n  var queryString = _interopRequireWildcard(require(_dependencyMap[0], \"query-string\"));\n  var _getPatternParts = require(_dependencyMap[1], \"./getPatternParts.js\");\n  var _validatePathConfig = require(_dependencyMap[2], \"./validatePathConfig.js\");\n  function _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }\n  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\n  const getActiveRoute = state => {\n    const route = typeof state.index === 'number' ? state.routes[state.index] : state.routes[state.routes.length - 1];\n    if (route.state) {\n      return getActiveRoute(route.state);\n    }\n    return route;\n  };\n  const cachedNormalizedConfigs = new WeakMap();\n  const getNormalizedConfigs = options => {\n    if (!options?.screens) return {};\n    const cached = cachedNormalizedConfigs.get(options?.screens);\n    if (cached) return cached;\n    const normalizedConfigs = createNormalizedConfigs(options.screens);\n    cachedNormalizedConfigs.set(options.screens, normalizedConfigs);\n    return normalizedConfigs;\n  };\n\n  /**\n   * Utility to serialize a navigation state object to a path string.\n   *\n   * @example\n   * ```js\n   * getPathFromState(\n   *   {\n   *     routes: [\n   *       {\n   *         name: 'Chat',\n   *         params: { author: 'Jane', id: 42 },\n   *       },\n   *     ],\n   *   },\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         stringify: { author: author => author.toLowerCase() }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   *\n   * @param state Navigation state to serialize.\n   * @param options Extra options to fine-tune how to serialize the path.\n   * @returns Path representing the state, e.g. /foo/bar?count=42.\n   */\n  function getPathFromState(state, options) {\n    if (state == null) {\n      throw Error(`Got '${String(state)}' for the navigation state. You must pass a valid state object.`);\n    }\n    if (options) {\n      (0, _validatePathConfig.validatePathConfig)(options);\n    }\n    const configs = getNormalizedConfigs(options);\n    let path = '/';\n    let current = state;\n    const allParams = {};\n    while (current) {\n      let index = typeof current.index === 'number' ? current.index : 0;\n      let route = current.routes[index];\n      let parts;\n      let focusedParams;\n      let currentOptions = configs;\n      const focusedRoute = getActiveRoute(state);\n\n      // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n      const nestedRouteNames = [];\n      let hasNext = true;\n      while (route.name in currentOptions && hasNext) {\n        parts = currentOptions[route.name].parts;\n        nestedRouteNames.push(route.name);\n        if (route.params) {\n          const options = currentOptions[route.name];\n          const currentParams = Object.fromEntries(Object.entries(route.params).map(([key, value]) => {\n            if (value === undefined) {\n              if (options) {\n                const optional = options.parts?.find(part => part.param === key)?.optional;\n                if (optional) {\n                  return null;\n                }\n              } else {\n                return null;\n              }\n            }\n            const stringify = options?.stringify?.[key] ?? String;\n            return [key, stringify(value)];\n          }).filter(entry => entry != null));\n          if (parts?.length) {\n            Object.assign(allParams, currentParams);\n          }\n          if (focusedRoute === route) {\n            // If this is the focused route, keep the params for later use\n            // We save it here since it's been stringified already\n            focusedParams = Object.assign({}, currentParams);\n            parts\n            // eslint-disable-next-line no-loop-func\n            ?.forEach(({\n              param\n            }) => {\n              if (param) {\n                // Remove the params present in the pattern since we'll only use the rest for query string\n                if (focusedParams) {\n                  // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                  delete focusedParams[param];\n                }\n              }\n            });\n          }\n        }\n\n        // If there is no `screens` property or no nested state, we return pattern\n        if (!currentOptions[route.name].screens || route.state === undefined) {\n          hasNext = false;\n        } else {\n          index = typeof route.state.index === 'number' ? route.state.index : route.state.routes.length - 1;\n          const nextRoute = route.state.routes[index];\n          const nestedConfig = currentOptions[route.name].screens;\n\n          // if there is config for next route name, we go deeper\n          if (nestedConfig && nextRoute.name in nestedConfig) {\n            route = nextRoute;\n            currentOptions = nestedConfig;\n          } else {\n            // If not, there is no sense in going deeper in config\n            hasNext = false;\n          }\n        }\n      }\n      if (currentOptions[route.name] !== undefined) {\n        path += parts?.map(({\n          segment,\n          param,\n          optional\n        }) => {\n          // We don't know what to show for wildcard patterns\n          // Showing the route name seems ok, though whatever we show here will be incorrect\n          // Since the page doesn't actually exist\n          if (segment === '*') {\n            return route.name;\n          }\n\n          // If the path has a pattern for a param, put the param in the path\n          if (param) {\n            const value = allParams[param];\n            if (value === undefined && optional) {\n              // Optional params without value assigned in route.params should be ignored\n              return '';\n            }\n\n            // Valid characters according to\n            // https://datatracker.ietf.org/doc/html/rfc3986#section-3.3 (see pchar definition)\n            return String(value).replace(/[^A-Za-z0-9\\-._~!$&'()*+,;=:@]/g, char => encodeURIComponent(char));\n          }\n          return encodeURIComponent(segment);\n        }).join('/');\n      } else {\n        path += encodeURIComponent(route.name);\n      }\n      if (!focusedParams && focusedRoute.params) {\n        focusedParams = Object.fromEntries(Object.entries(focusedRoute.params).map(([key, value]) => [key, String(value)]));\n      }\n      if (route.state) {\n        path += '/';\n      } else if (focusedParams) {\n        for (const param in focusedParams) {\n          if (focusedParams[param] === 'undefined') {\n            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n            delete focusedParams[param];\n          }\n        }\n        const query = queryString.stringify(focusedParams, {\n          sort: false\n        });\n        if (query) {\n          path += `?${query}`;\n        }\n      }\n      current = route.state;\n    }\n\n    // Include the root path if specified\n    if (options?.path) {\n      path = `${options.path}/${path}`;\n    }\n\n    // Remove multiple as well as trailing slashes\n    path = path.replace(/\\/+/g, '/');\n    path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n\n    // If path doesn't start with a slash, add it\n    // This makes sure that history.pushState will update the path correctly instead of appending\n    if (!path.startsWith('/')) {\n      path = `/${path}`;\n    }\n    return path;\n  }\n  const createConfigItem = (config, parentParts) => {\n    if (typeof config === 'string') {\n      // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n      const parts = (0, _getPatternParts.getPatternParts)(config);\n      if (parentParts) {\n        return {\n          parts: [...parentParts, ...parts]\n        };\n      }\n      return {\n        parts\n      };\n    }\n    if (config.exact && config.path === undefined) {\n      throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n    }\n\n    // If an object is specified as the value (e.g. Foo: { ... }),\n    // It can have `path` property and `screens` prop which has nested configs\n    const parts = config.exact !== true ? [...(parentParts || []), ...(config.path ? (0, _getPatternParts.getPatternParts)(config.path) : [])] : config.path ? (0, _getPatternParts.getPatternParts)(config.path) : undefined;\n    const screens = config.screens ? createNormalizedConfigs(config.screens, parts) : undefined;\n    return {\n      parts,\n      stringify: config.stringify,\n      screens\n    };\n  };\n  const createNormalizedConfigs = (options, parts) => Object.fromEntries(Object.entries(options).map(([name, c]) => {\n    const result = createConfigItem(c, parts);\n    return [name, result];\n  }));\n});","lineCount":240,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,1,13,"exports"],[7,9,1,13],[7,10,1,13,"getPathFromState"],[7,26,1,13],[7,29,1,13,"getPathFromState"],[7,45,1,13],[8,2,3,0],[8,6,3,0,"queryString"],[8,17,3,0],[8,20,3,0,"_interopRequireWildcard"],[8,43,3,0],[8,44,3,0,"require"],[8,51,3,0],[8,52,3,0,"_dependencyMap"],[8,66,3,0],[9,2,4,0],[9,6,4,0,"_getPatternParts"],[9,22,4,0],[9,25,4,0,"require"],[9,32,4,0],[9,33,4,0,"_dependencyMap"],[9,47,4,0],[10,2,5,0],[10,6,5,0,"_validatePathConfig"],[10,25,5,0],[10,28,5,0,"require"],[10,35,5,0],[10,36,5,0,"_dependencyMap"],[10,50,5,0],[11,2,5,61],[11,11,5,61,"_getRequireWildcardCache"],[11,36,5,61,"e"],[11,37,5,61],[11,66,5,61,"WeakMap"],[11,73,5,61],[11,92,5,61,"r"],[11,93,5,61],[11,100,5,61,"WeakMap"],[11,107,5,61],[11,111,5,61,"t"],[11,112,5,61],[11,119,5,61,"WeakMap"],[11,126,5,61],[11,138,5,61,"_getRequireWildcardCache"],[11,162,5,61],[11,174,5,61,"_getRequireWildcardCache"],[11,175,5,61,"e"],[11,176,5,61],[11,187,5,61,"e"],[11,188,5,61],[11,191,5,61,"t"],[11,192,5,61],[11,195,5,61,"r"],[11,196,5,61],[11,201,5,61,"e"],[11,202,5,61],[12,2,5,61],[12,11,5,61,"_interopRequireWildcard"],[12,35,5,61,"e"],[12,36,5,61],[12,38,5,61,"r"],[12,39,5,61],[12,48,5,61,"r"],[12,49,5,61],[12,53,5,61,"e"],[12,54,5,61],[12,58,5,61,"e"],[12,59,5,61],[12,60,5,61,"__esModule"],[12,70,5,61],[12,79,5,61,"e"],[12,80,5,61],[12,95,5,61,"e"],[12,96,5,61],[12,119,5,61,"e"],[12,120,5,61],[12,145,5,61,"e"],[12,146,5,61],[12,157,5,61,"default"],[12,164,5,61],[12,166,5,61,"e"],[12,167,5,61],[12,175,5,61,"t"],[12,176,5,61],[12,179,5,61,"_getRequireWildcardCache"],[12,203,5,61],[12,204,5,61,"r"],[12,205,5,61],[12,212,5,61,"t"],[12,213,5,61],[12,217,5,61,"t"],[12,218,5,61],[12,219,5,61,"has"],[12,222,5,61],[12,223,5,61,"e"],[12,224,5,61],[12,234,5,61,"t"],[12,235,5,61],[12,236,5,61,"get"],[12,239,5,61],[12,240,5,61,"e"],[12,241,5,61],[12,248,5,61,"n"],[12,249,5,61],[12,254,5,61,"__proto__"],[12,263,5,61],[12,273,5,61,"a"],[12,274,5,61],[12,277,5,61,"Object"],[12,283,5,61],[12,284,5,61,"defineProperty"],[12,298,5,61],[12,302,5,61,"Object"],[12,308,5,61],[12,309,5,61,"getOwnPropertyDescriptor"],[12,333,5,61],[12,344,5,61,"u"],[12,345,5,61],[12,349,5,61,"e"],[12,350,5,61],[12,370,5,61,"u"],[12,371,5,61],[12,378,5,61,"hasOwnProperty"],[12,392,5,61],[12,393,5,61,"call"],[12,397,5,61],[12,398,5,61,"e"],[12,399,5,61],[12,401,5,61,"u"],[12,402,5,61],[12,411,5,61,"i"],[12,412,5,61],[12,415,5,61,"a"],[12,416,5,61],[12,419,5,61,"Object"],[12,425,5,61],[12,426,5,61,"getOwnPropertyDescriptor"],[12,450,5,61],[12,451,5,61,"e"],[12,452,5,61],[12,454,5,61,"u"],[12,455,5,61],[12,465,5,61,"i"],[12,466,5,61],[12,471,5,61,"i"],[12,472,5,61],[12,473,5,61,"get"],[12,476,5,61],[12,480,5,61,"i"],[12,481,5,61],[12,482,5,61,"set"],[12,485,5,61],[12,489,5,61,"Object"],[12,495,5,61],[12,496,5,61,"defineProperty"],[12,510,5,61],[12,511,5,61,"n"],[12,512,5,61],[12,514,5,61,"u"],[12,515,5,61],[12,517,5,61,"i"],[12,518,5,61],[12,522,5,61,"n"],[12,523,5,61],[12,524,5,61,"u"],[12,525,5,61],[12,529,5,61,"e"],[12,530,5,61],[12,531,5,61,"u"],[12,532,5,61],[12,544,5,61,"n"],[12,545,5,61],[12,546,5,61,"default"],[12,553,5,61],[12,556,5,61,"e"],[12,557,5,61],[12,559,5,61,"t"],[12,560,5,61],[12,564,5,61,"t"],[12,565,5,61],[12,566,5,61,"set"],[12,569,5,61],[12,570,5,61,"e"],[12,571,5,61],[12,573,5,61,"n"],[12,574,5,61],[12,577,5,61,"n"],[12,578,5,61],[13,2,6,0],[13,8,6,6,"getActiveRoute"],[13,22,6,20],[13,25,6,23,"state"],[13,30,6,28],[13,34,6,32],[14,4,7,2],[14,10,7,8,"route"],[14,15,7,13],[14,18,7,16],[14,25,7,23,"state"],[14,30,7,28],[14,31,7,29,"index"],[14,36,7,34],[14,41,7,39],[14,49,7,47],[14,52,7,50,"state"],[14,57,7,55],[14,58,7,56,"routes"],[14,64,7,62],[14,65,7,63,"state"],[14,70,7,68],[14,71,7,69,"index"],[14,76,7,74],[14,77,7,75],[14,80,7,78,"state"],[14,85,7,83],[14,86,7,84,"routes"],[14,92,7,90],[14,93,7,91,"state"],[14,98,7,96],[14,99,7,97,"routes"],[14,105,7,103],[14,106,7,104,"length"],[14,112,7,110],[14,115,7,113],[14,116,7,114],[14,117,7,115],[15,4,8,2],[15,8,8,6,"route"],[15,13,8,11],[15,14,8,12,"state"],[15,19,8,17],[15,21,8,19],[16,6,9,4],[16,13,9,11,"getActiveRoute"],[16,27,9,25],[16,28,9,26,"route"],[16,33,9,31],[16,34,9,32,"state"],[16,39,9,37],[16,40,9,38],[17,4,10,2],[18,4,11,2],[18,11,11,9,"route"],[18,16,11,14],[19,2,12,0],[19,3,12,1],[20,2,13,0],[20,8,13,6,"cachedNormalizedConfigs"],[20,31,13,29],[20,34,13,32],[20,38,13,36,"WeakMap"],[20,45,13,43],[20,46,13,44],[20,47,13,45],[21,2,14,0],[21,8,14,6,"getNormalizedConfigs"],[21,28,14,26],[21,31,14,29,"options"],[21,38,14,36],[21,42,14,40],[22,4,15,2],[22,8,15,6],[22,9,15,7,"options"],[22,16,15,14],[22,18,15,16,"screens"],[22,25,15,23],[22,27,15,25],[22,34,15,32],[22,35,15,33],[22,36,15,34],[23,4,16,2],[23,10,16,8,"cached"],[23,16,16,14],[23,19,16,17,"cachedNormalizedConfigs"],[23,42,16,40],[23,43,16,41,"get"],[23,46,16,44],[23,47,16,45,"options"],[23,54,16,52],[23,56,16,54,"screens"],[23,63,16,61],[23,64,16,62],[24,4,17,2],[24,8,17,6,"cached"],[24,14,17,12],[24,16,17,14],[24,23,17,21,"cached"],[24,29,17,27],[25,4,18,2],[25,10,18,8,"normalizedConfigs"],[25,27,18,25],[25,30,18,28,"createNormalizedConfigs"],[25,53,18,51],[25,54,18,52,"options"],[25,61,18,59],[25,62,18,60,"screens"],[25,69,18,67],[25,70,18,68],[26,4,19,2,"cachedNormalizedConfigs"],[26,27,19,25],[26,28,19,26,"set"],[26,31,19,29],[26,32,19,30,"options"],[26,39,19,37],[26,40,19,38,"screens"],[26,47,19,45],[26,49,19,47,"normalizedConfigs"],[26,66,19,64],[26,67,19,65],[27,4,20,2],[27,11,20,9,"normalizedConfigs"],[27,28,20,26],[28,2,21,0],[28,3,21,1],[30,2,23,0],[31,0,24,0],[32,0,25,0],[33,0,26,0],[34,0,27,0],[35,0,28,0],[36,0,29,0],[37,0,30,0],[38,0,31,0],[39,0,32,0],[40,0,33,0],[41,0,34,0],[42,0,35,0],[43,0,36,0],[44,0,37,0],[45,0,38,0],[46,0,39,0],[47,0,40,0],[48,0,41,0],[49,0,42,0],[50,0,43,0],[51,0,44,0],[52,0,45,0],[53,0,46,0],[54,0,47,0],[55,0,48,0],[56,0,49,0],[57,0,50,0],[58,0,51,0],[59,2,52,7],[59,11,52,16,"getPathFromState"],[59,27,52,32,"getPathFromState"],[59,28,52,33,"state"],[59,33,52,38],[59,35,52,40,"options"],[59,42,52,47],[59,44,52,49],[60,4,53,2],[60,8,53,6,"state"],[60,13,53,11],[60,17,53,15],[60,21,53,19],[60,23,53,21],[61,6,54,4],[61,12,54,10,"Error"],[61,17,54,15],[61,18,54,16],[61,26,54,24,"String"],[61,32,54,30],[61,33,54,31,"state"],[61,38,54,36],[61,39,54,37],[61,104,54,102],[61,105,54,103],[62,4,55,2],[63,4,56,2],[63,8,56,6,"options"],[63,15,56,13],[63,17,56,15],[64,6,57,4],[64,10,57,4,"validatePathConfig"],[64,48,57,22],[64,50,57,23,"options"],[64,57,57,30],[64,58,57,31],[65,4,58,2],[66,4,59,2],[66,10,59,8,"configs"],[66,17,59,15],[66,20,59,18,"getNormalizedConfigs"],[66,40,59,38],[66,41,59,39,"options"],[66,48,59,46],[66,49,59,47],[67,4,60,2],[67,8,60,6,"path"],[67,12,60,10],[67,15,60,13],[67,18,60,16],[68,4,61,2],[68,8,61,6,"current"],[68,15,61,13],[68,18,61,16,"state"],[68,23,61,21],[69,4,62,2],[69,10,62,8,"allParams"],[69,19,62,17],[69,22,62,20],[69,23,62,21],[69,24,62,22],[70,4,63,2],[70,11,63,9,"current"],[70,18,63,16],[70,20,63,18],[71,6,64,4],[71,10,64,8,"index"],[71,15,64,13],[71,18,64,16],[71,25,64,23,"current"],[71,32,64,30],[71,33,64,31,"index"],[71,38,64,36],[71,43,64,41],[71,51,64,49],[71,54,64,52,"current"],[71,61,64,59],[71,62,64,60,"index"],[71,67,64,65],[71,70,64,68],[71,71,64,69],[72,6,65,4],[72,10,65,8,"route"],[72,15,65,13],[72,18,65,16,"current"],[72,25,65,23],[72,26,65,24,"routes"],[72,32,65,30],[72,33,65,31,"index"],[72,38,65,36],[72,39,65,37],[73,6,66,4],[73,10,66,8,"parts"],[73,15,66,13],[74,6,67,4],[74,10,67,8,"focusedParams"],[74,23,67,21],[75,6,68,4],[75,10,68,8,"currentOptions"],[75,24,68,22],[75,27,68,25,"configs"],[75,34,68,32],[76,6,69,4],[76,12,69,10,"focusedRoute"],[76,24,69,22],[76,27,69,25,"getActiveRoute"],[76,41,69,39],[76,42,69,40,"state"],[76,47,69,45],[76,48,69,46],[78,6,71,4],[79,6,72,4],[79,12,72,10,"nestedRouteNames"],[79,28,72,26],[79,31,72,29],[79,33,72,31],[80,6,73,4],[80,10,73,8,"hasNext"],[80,17,73,15],[80,20,73,18],[80,24,73,22],[81,6,74,4],[81,13,74,11,"route"],[81,18,74,16],[81,19,74,17,"name"],[81,23,74,21],[81,27,74,25,"currentOptions"],[81,41,74,39],[81,45,74,43,"hasNext"],[81,52,74,50],[81,54,74,52],[82,8,75,6,"parts"],[82,13,75,11],[82,16,75,14,"currentOptions"],[82,30,75,28],[82,31,75,29,"route"],[82,36,75,34],[82,37,75,35,"name"],[82,41,75,39],[82,42,75,40],[82,43,75,41,"parts"],[82,48,75,46],[83,8,76,6,"nestedRouteNames"],[83,24,76,22],[83,25,76,23,"push"],[83,29,76,27],[83,30,76,28,"route"],[83,35,76,33],[83,36,76,34,"name"],[83,40,76,38],[83,41,76,39],[84,8,77,6],[84,12,77,10,"route"],[84,17,77,15],[84,18,77,16,"params"],[84,24,77,22],[84,26,77,24],[85,10,78,8],[85,16,78,14,"options"],[85,23,78,21],[85,26,78,24,"currentOptions"],[85,40,78,38],[85,41,78,39,"route"],[85,46,78,44],[85,47,78,45,"name"],[85,51,78,49],[85,52,78,50],[86,10,79,8],[86,16,79,14,"currentParams"],[86,29,79,27],[86,32,79,30,"Object"],[86,38,79,36],[86,39,79,37,"fromEntries"],[86,50,79,48],[86,51,79,49,"Object"],[86,57,79,55],[86,58,79,56,"entries"],[86,65,79,63],[86,66,79,64,"route"],[86,71,79,69],[86,72,79,70,"params"],[86,78,79,76],[86,79,79,77],[86,80,79,78,"map"],[86,83,79,81],[86,84,79,82],[86,85,79,83],[86,86,79,84,"key"],[86,89,79,87],[86,91,79,89,"value"],[86,96,79,94],[86,97,79,95],[86,102,79,100],[87,12,80,10],[87,16,80,14,"value"],[87,21,80,19],[87,26,80,24,"undefined"],[87,35,80,33],[87,37,80,35],[88,14,81,12],[88,18,81,16,"options"],[88,25,81,23],[88,27,81,25],[89,16,82,14],[89,22,82,20,"optional"],[89,30,82,28],[89,33,82,31,"options"],[89,40,82,38],[89,41,82,39,"parts"],[89,46,82,44],[89,48,82,46,"find"],[89,52,82,50],[89,53,82,51,"part"],[89,57,82,55],[89,61,82,59,"part"],[89,65,82,63],[89,66,82,64,"param"],[89,71,82,69],[89,76,82,74,"key"],[89,79,82,77],[89,80,82,78],[89,82,82,80,"optional"],[89,90,82,88],[90,16,83,14],[90,20,83,18,"optional"],[90,28,83,26],[90,30,83,28],[91,18,84,16],[91,25,84,23],[91,29,84,27],[92,16,85,14],[93,14,86,12],[93,15,86,13],[93,21,86,19],[94,16,87,14],[94,23,87,21],[94,27,87,25],[95,14,88,12],[96,12,89,10],[97,12,90,10],[97,18,90,16,"stringify"],[97,27,90,25],[97,30,90,28,"options"],[97,37,90,35],[97,39,90,37,"stringify"],[97,48,90,46],[97,51,90,49,"key"],[97,54,90,52],[97,55,90,53],[97,59,90,57,"String"],[97,65,90,63],[98,12,91,10],[98,19,91,17],[98,20,91,18,"key"],[98,23,91,21],[98,25,91,23,"stringify"],[98,34,91,32],[98,35,91,33,"value"],[98,40,91,38],[98,41,91,39],[98,42,91,40],[99,10,92,8],[99,11,92,9],[99,12,92,10],[99,13,92,11,"filter"],[99,19,92,17],[99,20,92,18,"entry"],[99,25,92,23],[99,29,92,27,"entry"],[99,34,92,32],[99,38,92,36],[99,42,92,40],[99,43,92,41],[99,44,92,42],[100,10,93,8],[100,14,93,12,"parts"],[100,19,93,17],[100,21,93,19,"length"],[100,27,93,25],[100,29,93,27],[101,12,94,10,"Object"],[101,18,94,16],[101,19,94,17,"assign"],[101,25,94,23],[101,26,94,24,"allParams"],[101,35,94,33],[101,37,94,35,"currentParams"],[101,50,94,48],[101,51,94,49],[102,10,95,8],[103,10,96,8],[103,14,96,12,"focusedRoute"],[103,26,96,24],[103,31,96,29,"route"],[103,36,96,34],[103,38,96,36],[104,12,97,10],[105,12,98,10],[106,12,99,10,"focusedParams"],[106,25,99,23],[106,28,99,23,"Object"],[106,34,99,23],[106,35,99,23,"assign"],[106,41,99,23],[106,46,100,15,"currentParams"],[106,59,100,28],[106,60,101,11],[107,12,102,10,"parts"],[108,12,103,10],[109,12,103,10],[109,14,104,12,"forEach"],[109,21,104,19],[109,22,104,20],[109,23,104,21],[110,14,105,12,"param"],[111,12,106,10],[111,13,106,11],[111,18,106,16],[112,14,107,12],[112,18,107,16,"param"],[112,23,107,21],[112,25,107,23],[113,16,108,14],[114,16,109,14],[114,20,109,18,"focusedParams"],[114,33,109,31],[114,35,109,33],[115,18,110,16],[116,18,111,16],[116,25,111,23,"focusedParams"],[116,38,111,36],[116,39,111,37,"param"],[116,44,111,42],[116,45,111,43],[117,16,112,14],[118,14,113,12],[119,12,114,10],[119,13,114,11],[119,14,114,12],[120,10,115,8],[121,8,116,6],[123,8,118,6],[124,8,119,6],[124,12,119,10],[124,13,119,11,"currentOptions"],[124,27,119,25],[124,28,119,26,"route"],[124,33,119,31],[124,34,119,32,"name"],[124,38,119,36],[124,39,119,37],[124,40,119,38,"screens"],[124,47,119,45],[124,51,119,49,"route"],[124,56,119,54],[124,57,119,55,"state"],[124,62,119,60],[124,67,119,65,"undefined"],[124,76,119,74],[124,78,119,76],[125,10,120,8,"hasNext"],[125,17,120,15],[125,20,120,18],[125,25,120,23],[126,8,121,6],[126,9,121,7],[126,15,121,13],[127,10,122,8,"index"],[127,15,122,13],[127,18,122,16],[127,25,122,23,"route"],[127,30,122,28],[127,31,122,29,"state"],[127,36,122,34],[127,37,122,35,"index"],[127,42,122,40],[127,47,122,45],[127,55,122,53],[127,58,122,56,"route"],[127,63,122,61],[127,64,122,62,"state"],[127,69,122,67],[127,70,122,68,"index"],[127,75,122,73],[127,78,122,76,"route"],[127,83,122,81],[127,84,122,82,"state"],[127,89,122,87],[127,90,122,88,"routes"],[127,96,122,94],[127,97,122,95,"length"],[127,103,122,101],[127,106,122,104],[127,107,122,105],[128,10,123,8],[128,16,123,14,"nextRoute"],[128,25,123,23],[128,28,123,26,"route"],[128,33,123,31],[128,34,123,32,"state"],[128,39,123,37],[128,40,123,38,"routes"],[128,46,123,44],[128,47,123,45,"index"],[128,52,123,50],[128,53,123,51],[129,10,124,8],[129,16,124,14,"nestedConfig"],[129,28,124,26],[129,31,124,29,"currentOptions"],[129,45,124,43],[129,46,124,44,"route"],[129,51,124,49],[129,52,124,50,"name"],[129,56,124,54],[129,57,124,55],[129,58,124,56,"screens"],[129,65,124,63],[131,10,126,8],[132,10,127,8],[132,14,127,12,"nestedConfig"],[132,26,127,24],[132,30,127,28,"nextRoute"],[132,39,127,37],[132,40,127,38,"name"],[132,44,127,42],[132,48,127,46,"nestedConfig"],[132,60,127,58],[132,62,127,60],[133,12,128,10,"route"],[133,17,128,15],[133,20,128,18,"nextRoute"],[133,29,128,27],[134,12,129,10,"currentOptions"],[134,26,129,24],[134,29,129,27,"nestedConfig"],[134,41,129,39],[135,10,130,8],[135,11,130,9],[135,17,130,15],[136,12,131,10],[137,12,132,10,"hasNext"],[137,19,132,17],[137,22,132,20],[137,27,132,25],[138,10,133,8],[139,8,134,6],[140,6,135,4],[141,6,136,4],[141,10,136,8,"currentOptions"],[141,24,136,22],[141,25,136,23,"route"],[141,30,136,28],[141,31,136,29,"name"],[141,35,136,33],[141,36,136,34],[141,41,136,39,"undefined"],[141,50,136,48],[141,52,136,50],[142,8,137,6,"path"],[142,12,137,10],[142,16,137,14,"parts"],[142,21,137,19],[142,23,137,21,"map"],[142,26,137,24],[142,27,137,25],[142,28,137,26],[143,10,138,8,"segment"],[143,17,138,15],[144,10,139,8,"param"],[144,15,139,13],[145,10,140,8,"optional"],[146,8,141,6],[146,9,141,7],[146,14,141,12],[147,10,142,8],[148,10,143,8],[149,10,144,8],[150,10,145,8],[150,14,145,12,"segment"],[150,21,145,19],[150,26,145,24],[150,29,145,27],[150,31,145,29],[151,12,146,10],[151,19,146,17,"route"],[151,24,146,22],[151,25,146,23,"name"],[151,29,146,27],[152,10,147,8],[154,10,149,8],[155,10,150,8],[155,14,150,12,"param"],[155,19,150,17],[155,21,150,19],[156,12,151,10],[156,18,151,16,"value"],[156,23,151,21],[156,26,151,24,"allParams"],[156,35,151,33],[156,36,151,34,"param"],[156,41,151,39],[156,42,151,40],[157,12,152,10],[157,16,152,14,"value"],[157,21,152,19],[157,26,152,24,"undefined"],[157,35,152,33],[157,39,152,37,"optional"],[157,47,152,45],[157,49,152,47],[158,14,153,12],[159,14,154,12],[159,21,154,19],[159,23,154,21],[160,12,155,10],[162,12,157,10],[163,12,158,10],[164,12,159,10],[164,19,159,17,"String"],[164,25,159,23],[164,26,159,24,"value"],[164,31,159,29],[164,32,159,30],[164,33,159,31,"replace"],[164,40,159,38],[164,41,159,39],[164,74,159,72],[164,76,159,74,"char"],[164,80,159,78],[164,84,159,82,"encodeURIComponent"],[164,102,159,100],[164,103,159,101,"char"],[164,107,159,105],[164,108,159,106],[164,109,159,107],[165,10,160,8],[166,10,161,8],[166,17,161,15,"encodeURIComponent"],[166,35,161,33],[166,36,161,34,"segment"],[166,43,161,41],[166,44,161,42],[167,8,162,6],[167,9,162,7],[167,10,162,8],[167,11,162,9,"join"],[167,15,162,13],[167,16,162,14],[167,19,162,17],[167,20,162,18],[168,6,163,4],[168,7,163,5],[168,13,163,11],[169,8,164,6,"path"],[169,12,164,10],[169,16,164,14,"encodeURIComponent"],[169,34,164,32],[169,35,164,33,"route"],[169,40,164,38],[169,41,164,39,"name"],[169,45,164,43],[169,46,164,44],[170,6,165,4],[171,6,166,4],[171,10,166,8],[171,11,166,9,"focusedParams"],[171,24,166,22],[171,28,166,26,"focusedRoute"],[171,40,166,38],[171,41,166,39,"params"],[171,47,166,45],[171,49,166,47],[172,8,167,6,"focusedParams"],[172,21,167,19],[172,24,167,22,"Object"],[172,30,167,28],[172,31,167,29,"fromEntries"],[172,42,167,40],[172,43,167,41,"Object"],[172,49,167,47],[172,50,167,48,"entries"],[172,57,167,55],[172,58,167,56,"focusedRoute"],[172,70,167,68],[172,71,167,69,"params"],[172,77,167,75],[172,78,167,76],[172,79,167,77,"map"],[172,82,167,80],[172,83,167,81],[172,84,167,82],[172,85,167,83,"key"],[172,88,167,86],[172,90,167,88,"value"],[172,95,167,93],[172,96,167,94],[172,101,167,99],[172,102,167,100,"key"],[172,105,167,103],[172,107,167,105,"String"],[172,113,167,111],[172,114,167,112,"value"],[172,119,167,117],[172,120,167,118],[172,121,167,119],[172,122,167,120],[172,123,167,121],[173,6,168,4],[174,6,169,4],[174,10,169,8,"route"],[174,15,169,13],[174,16,169,14,"state"],[174,21,169,19],[174,23,169,21],[175,8,170,6,"path"],[175,12,170,10],[175,16,170,14],[175,19,170,17],[176,6,171,4],[176,7,171,5],[176,13,171,11],[176,17,171,15,"focusedParams"],[176,30,171,28],[176,32,171,30],[177,8,172,6],[177,13,172,11],[177,19,172,17,"param"],[177,24,172,22],[177,28,172,26,"focusedParams"],[177,41,172,39],[177,43,172,41],[178,10,173,8],[178,14,173,12,"focusedParams"],[178,27,173,25],[178,28,173,26,"param"],[178,33,173,31],[178,34,173,32],[178,39,173,37],[178,50,173,48],[178,52,173,50],[179,12,174,10],[180,12,175,10],[180,19,175,17,"focusedParams"],[180,32,175,30],[180,33,175,31,"param"],[180,38,175,36],[180,39,175,37],[181,10,176,8],[182,8,177,6],[183,8,178,6],[183,14,178,12,"query"],[183,19,178,17],[183,22,178,20,"queryString"],[183,33,178,31],[183,34,178,32,"stringify"],[183,43,178,41],[183,44,178,42,"focusedParams"],[183,57,178,55],[183,59,178,57],[184,10,179,8,"sort"],[184,14,179,12],[184,16,179,14],[185,8,180,6],[185,9,180,7],[185,10,180,8],[186,8,181,6],[186,12,181,10,"query"],[186,17,181,15],[186,19,181,17],[187,10,182,8,"path"],[187,14,182,12],[187,18,182,16],[187,22,182,20,"query"],[187,27,182,25],[187,29,182,27],[188,8,183,6],[189,6,184,4],[190,6,185,4,"current"],[190,13,185,11],[190,16,185,14,"route"],[190,21,185,19],[190,22,185,20,"state"],[190,27,185,25],[191,4,186,2],[193,4,188,2],[194,4,189,2],[194,8,189,6,"options"],[194,15,189,13],[194,17,189,15,"path"],[194,21,189,19],[194,23,189,21],[195,6,190,4,"path"],[195,10,190,8],[195,13,190,11],[195,16,190,14,"options"],[195,23,190,21],[195,24,190,22,"path"],[195,28,190,26],[195,32,190,30,"path"],[195,36,190,34],[195,38,190,36],[196,4,191,2],[198,4,193,2],[199,4,194,2,"path"],[199,8,194,6],[199,11,194,9,"path"],[199,15,194,13],[199,16,194,14,"replace"],[199,23,194,21],[199,24,194,22],[199,30,194,28],[199,32,194,30],[199,35,194,33],[199,36,194,34],[200,4,195,2,"path"],[200,8,195,6],[200,11,195,9,"path"],[200,15,195,13],[200,16,195,14,"length"],[200,22,195,20],[200,25,195,23],[200,26,195,24],[200,29,195,27,"path"],[200,33,195,31],[200,34,195,32,"replace"],[200,41,195,39],[200,42,195,40],[200,47,195,45],[200,49,195,47],[200,51,195,49],[200,52,195,50],[200,55,195,53,"path"],[200,59,195,57],[202,4,197,2],[203,4,198,2],[204,4,199,2],[204,8,199,6],[204,9,199,7,"path"],[204,13,199,11],[204,14,199,12,"startsWith"],[204,24,199,22],[204,25,199,23],[204,28,199,26],[204,29,199,27],[204,31,199,29],[205,6,200,4,"path"],[205,10,200,8],[205,13,200,11],[205,17,200,15,"path"],[205,21,200,19],[205,23,200,21],[206,4,201,2],[207,4,202,2],[207,11,202,9,"path"],[207,15,202,13],[208,2,203,0],[209,2,204,0],[209,8,204,6,"createConfigItem"],[209,24,204,22],[209,27,204,25,"createConfigItem"],[209,28,204,26,"config"],[209,34,204,32],[209,36,204,34,"parentParts"],[209,47,204,45],[209,52,204,50],[210,4,205,2],[210,8,205,6],[210,15,205,13,"config"],[210,21,205,19],[210,26,205,24],[210,34,205,32],[210,36,205,34],[211,6,206,4],[212,6,207,4],[212,12,207,10,"parts"],[212,17,207,15],[212,20,207,18],[212,24,207,18,"getPatternParts"],[212,56,207,33],[212,58,207,34,"config"],[212,64,207,40],[212,65,207,41],[213,6,208,4],[213,10,208,8,"parentParts"],[213,21,208,19],[213,23,208,21],[214,8,209,6],[214,15,209,13],[215,10,210,8,"parts"],[215,15,210,13],[215,17,210,15],[215,18,210,16],[215,21,210,19,"parentParts"],[215,32,210,30],[215,34,210,32],[215,37,210,35,"parts"],[215,42,210,40],[216,8,211,6],[216,9,211,7],[217,6,212,4],[218,6,213,4],[218,13,213,11],[219,8,214,6,"parts"],[220,6,215,4],[220,7,215,5],[221,4,216,2],[222,4,217,2],[222,8,217,6,"config"],[222,14,217,12],[222,15,217,13,"exact"],[222,20,217,18],[222,24,217,22,"config"],[222,30,217,28],[222,31,217,29,"path"],[222,35,217,33],[222,40,217,38,"undefined"],[222,49,217,47],[222,51,217,49],[223,6,218,4],[223,12,218,10],[223,16,218,14,"Error"],[223,21,218,19],[223,22,218,20],[223,172,218,170],[223,173,218,171],[224,4,219,2],[226,4,221,2],[227,4,222,2],[228,4,223,2],[228,10,223,8,"parts"],[228,15,223,13],[228,18,223,16,"config"],[228,24,223,22],[228,25,223,23,"exact"],[228,30,223,28],[228,35,223,33],[228,39,223,37],[228,42,223,40],[228,43,223,41],[228,47,223,45,"parentParts"],[228,58,223,56],[228,62,223,60],[228,64,223,62],[228,65,223,63],[228,67,223,65],[228,71,223,69,"config"],[228,77,223,75],[228,78,223,76,"path"],[228,82,223,80],[228,85,223,83],[228,89,223,83,"getPatternParts"],[228,121,223,98],[228,123,223,99,"config"],[228,129,223,105],[228,130,223,106,"path"],[228,134,223,110],[228,135,223,111],[228,138,223,114],[228,140,223,116],[228,141,223,117],[228,142,223,118],[228,145,223,121,"config"],[228,151,223,127],[228,152,223,128,"path"],[228,156,223,132],[228,159,223,135],[228,163,223,135,"getPatternParts"],[228,195,223,150],[228,197,223,151,"config"],[228,203,223,157],[228,204,223,158,"path"],[228,208,223,162],[228,209,223,163],[228,212,223,166,"undefined"],[228,221,223,175],[229,4,224,2],[229,10,224,8,"screens"],[229,17,224,15],[229,20,224,18,"config"],[229,26,224,24],[229,27,224,25,"screens"],[229,34,224,32],[229,37,224,35,"createNormalizedConfigs"],[229,60,224,58],[229,61,224,59,"config"],[229,67,224,65],[229,68,224,66,"screens"],[229,75,224,73],[229,77,224,75,"parts"],[229,82,224,80],[229,83,224,81],[229,86,224,84,"undefined"],[229,95,224,93],[230,4,225,2],[230,11,225,9],[231,6,226,4,"parts"],[231,11,226,9],[232,6,227,4,"stringify"],[232,15,227,13],[232,17,227,15,"config"],[232,23,227,21],[232,24,227,22,"stringify"],[232,33,227,31],[233,6,228,4,"screens"],[234,4,229,2],[234,5,229,3],[235,2,230,0],[235,3,230,1],[236,2,231,0],[236,8,231,6,"createNormalizedConfigs"],[236,31,231,29],[236,34,231,32,"createNormalizedConfigs"],[236,35,231,33,"options"],[236,42,231,40],[236,44,231,42,"parts"],[236,49,231,47],[236,54,231,52,"Object"],[236,60,231,58],[236,61,231,59,"fromEntries"],[236,72,231,70],[236,73,231,71,"Object"],[236,79,231,77],[236,80,231,78,"entries"],[236,87,231,85],[236,88,231,86,"options"],[236,95,231,93],[236,96,231,94],[236,97,231,95,"map"],[236,100,231,98],[236,101,231,99],[236,102,231,100],[236,103,231,101,"name"],[236,107,231,105],[236,109,231,107,"c"],[236,110,231,108],[236,111,231,109],[236,116,231,114],[237,4,232,2],[237,10,232,8,"result"],[237,16,232,14],[237,19,232,17,"createConfigItem"],[237,35,232,33],[237,36,232,34,"c"],[237,37,232,35],[237,39,232,37,"parts"],[237,44,232,42],[237,45,232,43],[238,4,233,2],[238,11,233,9],[238,12,233,10,"name"],[238,16,233,14],[238,18,233,16,"result"],[238,24,233,22],[238,25,233,23],[239,2,234,0],[239,3,234,1],[239,4,234,2],[239,5,234,3],[240,0,234,4],[240,3]],"functionMap":{"names":["<global>","getActiveRoute","getNormalizedConfigs","getPathFromState","Object.entries.map$argument_0","options.parts.find$argument_0","Object.entries.map.filter$argument_0","parts.forEach$argument_0","parts.map$argument_0","String.replace$argument_1","createConfigItem","createNormalizedConfigs"],"mappings":"AAA;uBCK;CDM;6BEE;CFO;OG+B;kFC2B;mDCG,0BD;SDU,SG,sBH;oBIY;WJU;yBKuB;0ECsB,gCD;OLG;iFCK,sCD;CHoC;yBUC;CV0B;gCWC,mEP;COG,EX"}},"type":"js/module"}]}