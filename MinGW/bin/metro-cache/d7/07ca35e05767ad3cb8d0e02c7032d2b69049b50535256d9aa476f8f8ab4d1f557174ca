{"dependencies":[{"name":"@react-navigation/native","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":30,"column":17,"index":1295},"end":{"line":30,"column":52,"index":1330}}],"key":"+CMsq8mGitISxINZGSTIjwwHCvE="}},{"name":"escape-string-regexp","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":31,"column":47,"index":1379},"end":{"line":31,"column":78,"index":1410}}],"key":"pv3xsw91DuEhfWNv1C6M3srszHc="}},{"name":"./findFocusedRoute","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":32,"column":27,"index":1440},"end":{"line":32,"column":56,"index":1469}}],"key":"9+VFhBOjQcTQeIvNi1xuiiMPBRA="}},{"name":"./getStateFromPath-forks","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":33,"column":26,"index":1497},"end":{"line":33,"column":61,"index":1532}}],"key":"4vrbraquME4BHp/ovy7bcL0vuto="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = {\n        enumerable: true,\n        get: function () {\n          return m[k];\n        }\n      };\n    }\n    Object.defineProperty(o, k2, desc);\n  } : function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n  });\n  var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n    Object.defineProperty(o, \"default\", {\n      enumerable: true,\n      value: v\n    });\n  } : function (o, v) {\n    o[\"default\"] = v;\n  });\n  var __importStar = this && this.__importStar || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n  };\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getStateFromPath = void 0;\n  const native_1 = require(_dependencyMap[0], \"@react-navigation/native\");\n  const escape_string_regexp_1 = __importDefault(require(_dependencyMap[1], \"escape-string-regexp\"));\n  const findFocusedRoute_1 = require(_dependencyMap[2], \"./findFocusedRoute\");\n  const expo = __importStar(require(_dependencyMap[3], \"./getStateFromPath-forks\"));\n  /**\n   * Utility to parse a path string to initial state object accepted by the container.\n   * This is useful for deep linking when we need to handle the incoming URL.\n   *\n   * @example\n   * ```js\n   * getStateFromPath(\n   *   '/chat/jane/42',\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         parse: { id: Number }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n   * @param options Extra options to fine-tune how to parse the path.\n   */\n  function getStateFromPath(\n  // END FORK\n  path, options) {\n    const {\n      initialRoutes,\n      configs,\n      configWithRegexes\n    } = getConfigResources(options, this?.routeInfo?.segments);\n    const screens = options?.screens;\n    // START FORK\n    const expoPath = expo.getUrlWithReactNavigationConcessions(path);\n    // END FORK\n    // START FORK\n    let remaining = expoPath.nonstandardPathname\n    // let remaining = path\n    // END FORK\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n    // Make sure there is a trailing slash\n    remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n    const prefix = options?.path?.replace(/^\\//, ''); // Remove extra leading slash\n    if (prefix) {\n      // Make sure there is a trailing slash\n      const normalizedPrefix = prefix.endsWith('/') ? prefix : `${prefix}/`;\n      // If the path doesn't start with the prefix, it's not a match\n      if (!remaining.startsWith(normalizedPrefix)) {\n        return undefined;\n      }\n      // Remove the prefix from the path\n      remaining = remaining.replace(normalizedPrefix, '');\n    }\n    if (screens === undefined) {\n      // When no config is specified, use the path segments as route names\n      const routes = remaining.split('/').filter(Boolean).map(segment => {\n        const name = decodeURIComponent(segment);\n        return {\n          name\n        };\n      });\n      if (routes.length) {\n        return createNestedStateObject(expoPath, routes, initialRoutes, [], expoPath.url.hash);\n      }\n      return undefined;\n    }\n    if (remaining === '/') {\n      // We need to add special handling of empty path so navigation to empty path also works\n      // When handling empty path, we should only look at the root level config\n      // START FORK\n      const match = expo.matchForEmptyPath(configWithRegexes);\n      // const match = configs.find(\n      //   (config) =>\n      //     config.path === '' &&\n      //     config.routeNames.every(\n      //       // Make sure that none of the parent configs have a non-empty path defined\n      //       (name) => !configs.find((c) => c.screen === name)?.path\n      //     )\n      // );\n      // END FORK\n      if (match) {\n        return createNestedStateObject(expoPath, match.routeNames.map(name => ({\n          name\n        })), initialRoutes, configs, expoPath.url.hash);\n      }\n      return undefined;\n    }\n    let result;\n    let current;\n    // We match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    const {\n      routes,\n      remainingPath\n    } = matchAgainstConfigs(remaining, configWithRegexes);\n    if (routes !== undefined) {\n      // This will always be empty if full path matched\n      current = createNestedStateObject(expoPath, routes, initialRoutes, configs, expoPath.url.hash);\n      remaining = remainingPath;\n      result = current;\n    }\n    if (current == null || result == null) {\n      return undefined;\n    }\n    return result;\n  }\n  exports.getStateFromPath = getStateFromPath;\n  /**\n   * Reference to the last used config resources. This is used to avoid recomputing the config resources when the options are the same.\n   */\n  let cachedConfigResources = [undefined, prepareConfigResources()];\n  function getConfigResources(options,\n  // START FORK\n  previousSegments\n  // END FORK\n  ) {\n    // START FORK - We need to disable this caching as our configs can change based upon the current state\n    // if (cachedConfigResources[0] !== options) {\n    //   console.log(previousSegments);\n    cachedConfigResources = [options, prepareConfigResources(options, previousSegments)];\n    // }\n    // END FORK FORK\n    return cachedConfigResources[1];\n  }\n  function prepareConfigResources(options, previousSegments) {\n    if (options) {\n      (0, native_1.validatePathConfig)(options);\n    }\n    const initialRoutes = getInitialRoutes(options);\n    const configs = getNormalizedConfigs(initialRoutes, options?.screens, previousSegments);\n    checkForDuplicatedConfigs(configs);\n    const configWithRegexes = getConfigsWithRegexes(configs);\n    return {\n      initialRoutes,\n      configs,\n      configWithRegexes\n    };\n  }\n  function getInitialRoutes(options) {\n    const initialRoutes = [];\n    if (options?.initialRouteName) {\n      initialRoutes.push({\n        initialRouteName: options.initialRouteName,\n        parentScreens: []\n      });\n    }\n    return initialRoutes;\n  }\n  function getNormalizedConfigs(initialRoutes, screens = {},\n  // START FORK\n  previousSegments\n  // END FORK\n  ) {\n    // Create a normalized configs array which will be easier to use\n    return [].concat(...Object.keys(screens).map(key => createNormalizedConfigs(key, screens, [], initialRoutes, []))).map(expo.appendIsInitial(initialRoutes)).sort(expo.getRouteConfigSorter(previousSegments));\n    // .sort((a, b) => {\n    //   // Sort config so that:\n    //   // - the most exhaustive ones are always at the beginning\n    //   // - patterns with wildcard are always at the end\n    //   // If 2 patterns are same, move the one with less route names up\n    //   // This is an error state, so it's only useful for consistent error messages\n    //   if (a.pattern === b.pattern) {\n    //     return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    //   }\n    //   // If one of the patterns starts with the other, it's more exhaustive\n    //   // So move it up\n    //   if (a.pattern.startsWith(b.pattern)) {\n    //     return -1;\n    //   }\n    //   if (b.pattern.startsWith(a.pattern)) {\n    //     return 1;\n    //   }\n    //   const aParts = a.pattern.split('/');\n    //   const bParts = b.pattern.split('/');\n    //   for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n    //     // if b is longer, b get higher priority\n    //     if (aParts[i] == null) {\n    //       return 1;\n    //     }\n    //     // if a is longer, a get higher priority\n    //     if (bParts[i] == null) {\n    //       return -1;\n    //     }\n    //     const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n    //     const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n    //     // if both are wildcard we compare next component\n    //     if (aWildCard && bWildCard) {\n    //       continue;\n    //     }\n    //     // if only a is wild card, b get higher priority\n    //     if (aWildCard) {\n    //       return 1;\n    //     }\n    //     // if only b is wild card, a get higher priority\n    //     if (bWildCard) {\n    //       return -1;\n    //     }\n    //   }\n    //   return bParts.length - aParts.length;\n    // });\n  }\n  function checkForDuplicatedConfigs(configs) {\n    // Check for duplicate patterns in the config\n    configs.reduce((acc, config) => {\n      if (acc[config.pattern]) {\n        const a = acc[config.pattern].routeNames;\n        const b = config.routeNames;\n        // It's not a problem if the path string omitted from a inner most screen\n        // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n        const intersects = a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);\n        if (!intersects) {\n          throw new Error(`Found conflicting screens with the same pattern. The pattern '${config.pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n        }\n      }\n      return Object.assign(acc, {\n        [config.pattern]: config\n      });\n    }, {});\n  }\n  function getConfigsWithRegexes(configs) {\n    return configs.map(c => ({\n      ...c,\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      // START FORK\n      // regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n      regex: expo.configRegExp(c)\n      // END FORK\n    }));\n  }\n  const joinPaths = (...paths) => [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n  const matchAgainstConfigs = (remaining, configs) => {\n    let routes;\n    let remainingPath = remaining;\n    // START FORK\n    const allParams = Object.create(null);\n    // END FORK\n    // Go through all configs, and see if the next path segment matches our regex\n    for (const config of configs) {\n      if (!config.regex) {\n        continue;\n      }\n      const match = remainingPath.match(config.regex);\n      // If our regex matches, we need to extract params from the path\n      if (match) {\n        const matchResult = config.pattern?.split('/').reduce((acc, p, index) => {\n          if (!expo.isDynamicPart(p)) {\n            return acc;\n          }\n          acc.pos += 1;\n          // START FORK\n          const decodedParamSegment = expo.safelyDecodeURIComponent(\n          // const decodedParamSegment = decodeURIComponent(\n          // The param segments appear every second item starting from 2 in the regex match result\n          match[(acc.pos + 1) * 2]\n          // Remove trailing slash\n          .replace(/\\/$/, ''));\n          // END FORK\n          Object.assign(acc.matchedParams, {\n            [p]: Object.assign(acc.matchedParams[p] || {}, {\n              [index]: decodedParamSegment\n            })\n          });\n          return acc;\n        }, {\n          pos: -1,\n          matchedParams: {}\n        });\n        const matchedParams = matchResult.matchedParams || {};\n        routes = config.routeNames.map(name => {\n          const routeConfig = configs.find(c => {\n            // Check matching name AND pattern in case same screen is used at different levels in config\n            return c.screen === name && config.pattern.startsWith(c.pattern);\n          });\n          // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n          const normalizedPath = routeConfig?.path.split('/').filter(Boolean).join('/');\n          // Get the number of segments in the initial pattern\n          const numInitialSegments = routeConfig?.pattern\n          // Extract the prefix from the pattern by removing the ending path pattern (e.g pattern=`a/b/c/d` and normalizedPath=`c/d` becomes `a/b`)\n          .replace(new RegExp(`${(0, escape_string_regexp_1.default)(normalizedPath)}$`), '')?.split('/').length;\n          const params = normalizedPath?.split('/').reduce((acc, p, index) => {\n            if (!expo.isDynamicPart(p)) {\n              return acc;\n            }\n            // Get the real index of the path parameter in the matched path\n            // by offsetting by the number of segments in the initial pattern\n            const offset = numInitialSegments ? numInitialSegments - 1 : 0;\n            // START FORK\n            // const value = matchedParams[p]?.[index + offset];\n            const value = expo.getParamValue(p, matchedParams[p]?.[index + offset]);\n            // END FORK\n            if (value) {\n              // START FORK\n              // const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              const key = expo.replacePart(p);\n              // END FORK\n              acc[key] = routeConfig?.parse?.[key] ? routeConfig.parse[key](value) : value;\n            }\n            return acc;\n          }, {});\n          if (params && Object.keys(params).length) {\n            Object.assign(allParams, params);\n            return {\n              name,\n              params\n            };\n          }\n          return {\n            name\n          };\n        });\n        remainingPath = remainingPath.replace(match[1], '');\n        break;\n      }\n    }\n    // START FORK\n    expo.populateParams(routes, allParams);\n    // END FORK\n    return {\n      routes,\n      remainingPath\n    };\n  };\n  const createNormalizedConfigs = (screen, routeConfig, routeNames = [], initials, parentScreens, parentPattern) => {\n    const configs = [];\n    routeNames.push(screen);\n    parentScreens.push(screen);\n    const config = routeConfig[screen];\n    if (typeof config === 'string') {\n      // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n      const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n      configs.push(createConfigItem(screen, routeNames, pattern, config));\n    } else if (typeof config === 'object') {\n      let pattern;\n      // if an object is specified as the value (e.g. Foo: { ... }),\n      // it can have `path` property and\n      // it could have `screens` prop which has nested configs\n      if (typeof config.path === 'string') {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n        }\n        pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n        configs.push(createConfigItem(screen, routeNames, pattern, config.path, config.parse, config));\n      }\n      if (config.screens) {\n        // property `initialRouteName` without `screens` has no purpose\n        if (config.initialRouteName) {\n          initials.push({\n            initialRouteName: config.initialRouteName,\n            parentScreens\n          });\n        }\n        Object.keys(config.screens).forEach(nestedConfig => {\n          const result = createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, [...parentScreens], pattern ?? parentPattern);\n          configs.push(...result);\n        });\n      }\n    }\n    routeNames.pop();\n    return configs;\n  };\n  const createConfigItem = (screen, routeNames, pattern, path, parse = undefined, config = {}) => {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern = pattern.split('/').filter(Boolean).join('/');\n    const regex = pattern ? new RegExp(`^(${pattern.split('/').map(it => {\n      if (it.startsWith(':')) {\n        return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n      }\n      return `${it === '*' ? '.*' : (0, escape_string_regexp_1.default)(it)}\\\\/`;\n    }).join('')})`) : undefined;\n    return {\n      screen,\n      regex,\n      pattern,\n      path,\n      // The routeNames array is mutated, so copy it to keep the current state\n      routeNames: [...routeNames],\n      parse,\n      // START FORK\n      ...expo.createConfig(screen, pattern, routeNames, config)\n      // END FORK\n    };\n  };\n  const findParseConfigForRoute = (routeName, flatConfig) => {\n    for (const config of flatConfig) {\n      if (routeName === config.routeNames[config.routeNames.length - 1]) {\n        return config.parse;\n      }\n    }\n    return undefined;\n  };\n  // Try to find an initial route connected with the one passed\n  const findInitialRoute = (routeName, parentScreens, initialRoutes) => {\n    for (const config of initialRoutes) {\n      if (parentScreens.length === config.parentScreens.length) {\n        let sameParents = true;\n        for (let i = 0; i < parentScreens.length; i++) {\n          if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n            sameParents = false;\n            break;\n          }\n        }\n        if (sameParents) {\n          return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n        }\n      }\n    }\n    return undefined;\n  };\n  // returns state object with values depending on whether\n  // it is the end of state and if there is initialRoute for this level\n  const createStateObject = (initialRoute, route, isEmpty) => {\n    if (isEmpty) {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute,\n            params: route.params\n          }, route]\n        };\n      } else {\n        return {\n          routes: [route]\n        };\n      }\n    } else {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute,\n            params: route.params\n          }, {\n            ...route,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      } else {\n        return {\n          routes: [{\n            ...route,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      }\n    }\n  };\n  const createNestedStateObject = ({\n    path,\n    ...expoURL\n  }, routes, initialRoutes, flatConfig, hash) => {\n    let route = routes.shift();\n    const parentScreens = [];\n    let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n    parentScreens.push(route.name);\n    const state = createStateObject(initialRoute, route, routes.length === 0);\n    if (routes.length > 0) {\n      let nestedState = state;\n      while (route = routes.shift()) {\n        initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n        const nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n        nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n        if (routes.length > 0) {\n          nestedState = nestedState.routes[nestedStateIndex].state;\n        }\n        parentScreens.push(route.name);\n      }\n    }\n    route = (0, findFocusedRoute_1.findFocusedRoute)(state);\n    // START FORK\n    route.path = expoURL.pathWithoutGroups;\n    // route.path = path;\n    // END FORK\n    // START FORK\n    // const params = parseQueryParams(\n    const params = expo.parseQueryParams(path, route, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined, hash);\n    // END FORK\n    // START FORK\n    // expo.handleUrlParams(route, params, hash);\n    if (params) {\n      route.params = {\n        ...route.params,\n        ...params\n      };\n    }\n    // END FORK\n    return state;\n  };\n  // START FORK\n  // const parseQueryParams = (path: string, parseConfig?: Record<string, (value: string) => any>) => {\n  //   const query = path.split('?')[1];\n  //   const params = queryString.parse(query);\n  //   if (parseConfig) {\n  //     Object.keys(params).forEach((name) => {\n  //       if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n  //         params[name] = parseConfig[name](params[name] as string);\n  //       }\n  //     });\n  //   }\n  //   return Object.keys(params).length ? params : undefined;\n  // };\n  // END FORK\n});","lineCount":554,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[4,6,2,4,"__createBinding"],[4,21,2,19],[4,24,2,23],[4,28,2,27],[4,32,2,31],[4,36,2,35],[4,37,2,36,"__createBinding"],[4,52,2,51],[4,57,2,57,"Object"],[4,63,2,63],[4,64,2,64,"create"],[4,70,2,70],[4,73,2,74],[4,83,2,83,"o"],[4,84,2,84],[4,86,2,86,"m"],[4,87,2,87],[4,89,2,89,"k"],[4,90,2,90],[4,92,2,92,"k2"],[4,94,2,94],[4,96,2,96],[5,4,3,4],[5,8,3,8,"k2"],[5,10,3,10],[5,15,3,15,"undefined"],[5,24,3,24],[5,26,3,26,"k2"],[5,28,3,28],[5,31,3,31,"k"],[5,32,3,32],[6,4,4,4],[6,8,4,8,"desc"],[6,12,4,12],[6,15,4,15,"Object"],[6,21,4,21],[6,22,4,22,"getOwnPropertyDescriptor"],[6,46,4,46],[6,47,4,47,"m"],[6,48,4,48],[6,50,4,50,"k"],[6,51,4,51],[6,52,4,52],[7,4,5,4],[7,8,5,8],[7,9,5,9,"desc"],[7,13,5,13],[7,18,5,18],[7,23,5,23],[7,27,5,27,"desc"],[7,31,5,31],[7,34,5,34],[7,35,5,35,"m"],[7,36,5,36],[7,37,5,37,"__esModule"],[7,47,5,47],[7,50,5,50,"desc"],[7,54,5,54],[7,55,5,55,"writable"],[7,63,5,63],[7,67,5,67,"desc"],[7,71,5,71],[7,72,5,72,"configurable"],[7,84,5,84],[7,85,5,85],[7,87,5,87],[8,6,6,6,"desc"],[8,10,6,10],[8,13,6,13],[9,8,6,15,"enumerable"],[9,18,6,25],[9,20,6,27],[9,24,6,31],[10,8,6,33,"get"],[10,11,6,36],[10,13,6,38],[10,22,6,38,"get"],[10,23,6,38],[10,25,6,49],[11,10,6,51],[11,17,6,58,"m"],[11,18,6,59],[11,19,6,60,"k"],[11,20,6,61],[11,21,6,62],[12,8,6,64],[13,6,6,66],[13,7,6,67],[14,4,7,4],[15,4,8,4,"Object"],[15,10,8,10],[15,11,8,11,"defineProperty"],[15,25,8,25],[15,26,8,26,"o"],[15,27,8,27],[15,29,8,29,"k2"],[15,31,8,31],[15,33,8,33,"desc"],[15,37,8,37],[15,38,8,38],[16,2,9,0],[16,3,9,1],[16,6,9,6],[16,16,9,15,"o"],[16,17,9,16],[16,19,9,18,"m"],[16,20,9,19],[16,22,9,21,"k"],[16,23,9,22],[16,25,9,24,"k2"],[16,27,9,26],[16,29,9,28],[17,4,10,4],[17,8,10,8,"k2"],[17,10,10,10],[17,15,10,15,"undefined"],[17,24,10,24],[17,26,10,26,"k2"],[17,28,10,28],[17,31,10,31,"k"],[17,32,10,32],[18,4,11,4,"o"],[18,5,11,5],[18,6,11,6,"k2"],[18,8,11,8],[18,9,11,9],[18,12,11,12,"m"],[18,13,11,13],[18,14,11,14,"k"],[18,15,11,15],[18,16,11,16],[19,2,12,0],[19,3,12,2],[19,4,12,3],[20,2,13,0],[20,6,13,4,"__setModuleDefault"],[20,24,13,22],[20,27,13,26],[20,31,13,30],[20,35,13,34],[20,39,13,38],[20,40,13,39,"__setModuleDefault"],[20,58,13,57],[20,63,13,63,"Object"],[20,69,13,69],[20,70,13,70,"create"],[20,76,13,76],[20,79,13,80],[20,89,13,89,"o"],[20,90,13,90],[20,92,13,92,"v"],[20,93,13,93],[20,95,13,95],[21,4,14,4,"Object"],[21,10,14,10],[21,11,14,11,"defineProperty"],[21,25,14,25],[21,26,14,26,"o"],[21,27,14,27],[21,29,14,29],[21,38,14,38],[21,40,14,40],[22,6,14,42,"enumerable"],[22,16,14,52],[22,18,14,54],[22,22,14,58],[23,6,14,60,"value"],[23,11,14,65],[23,13,14,67,"v"],[24,4,14,69],[24,5,14,70],[24,6,14,71],[25,2,15,0],[25,3,15,1],[25,6,15,5],[25,16,15,14,"o"],[25,17,15,15],[25,19,15,17,"v"],[25,20,15,18],[25,22,15,20],[26,4,16,4,"o"],[26,5,16,5],[26,6,16,6],[26,15,16,15],[26,16,16,16],[26,19,16,19,"v"],[26,20,16,20],[27,2,17,0],[27,3,17,1],[27,4,17,2],[28,2,18,0],[28,6,18,4,"__importStar"],[28,18,18,16],[28,21,18,20],[28,25,18,24],[28,29,18,28],[28,33,18,32],[28,34,18,33,"__importStar"],[28,46,18,45],[28,50,18,50],[28,60,18,60,"mod"],[28,63,18,63],[28,65,18,65],[29,4,19,4],[29,8,19,8,"mod"],[29,11,19,11],[29,15,19,15,"mod"],[29,18,19,18],[29,19,19,19,"__esModule"],[29,29,19,29],[29,31,19,31],[29,38,19,38,"mod"],[29,41,19,41],[30,4,20,4],[30,8,20,8,"result"],[30,14,20,14],[30,17,20,17],[30,18,20,18],[30,19,20,19],[31,4,21,4],[31,8,21,8,"mod"],[31,11,21,11],[31,15,21,15],[31,19,21,19],[31,21,21,21],[31,26,21,26],[31,30,21,30,"k"],[31,31,21,31],[31,35,21,35,"mod"],[31,38,21,38],[31,40,21,40],[31,44,21,44,"k"],[31,45,21,45],[31,50,21,50],[31,59,21,59],[31,63,21,63,"Object"],[31,69,21,69],[31,70,21,70,"prototype"],[31,79,21,79],[31,80,21,80,"hasOwnProperty"],[31,94,21,94],[31,95,21,95,"call"],[31,99,21,99],[31,100,21,100,"mod"],[31,103,21,103],[31,105,21,105,"k"],[31,106,21,106],[31,107,21,107],[31,109,21,109,"__createBinding"],[31,124,21,124],[31,125,21,125,"result"],[31,131,21,131],[31,133,21,133,"mod"],[31,136,21,136],[31,138,21,138,"k"],[31,139,21,139],[31,140,21,140],[32,4,22,4,"__setModuleDefault"],[32,22,22,22],[32,23,22,23,"result"],[32,29,22,29],[32,31,22,31,"mod"],[32,34,22,34],[32,35,22,35],[33,4,23,4],[33,11,23,11,"result"],[33,17,23,17],[34,2,24,0],[34,3,24,1],[35,2,25,0],[35,6,25,4,"__importDefault"],[35,21,25,19],[35,24,25,23],[35,28,25,27],[35,32,25,31],[35,36,25,35],[35,37,25,36,"__importDefault"],[35,52,25,51],[35,56,25,56],[35,66,25,66,"mod"],[35,69,25,69],[35,71,25,71],[36,4,26,4],[36,11,26,12,"mod"],[36,14,26,15],[36,18,26,19,"mod"],[36,21,26,22],[36,22,26,23,"__esModule"],[36,32,26,33],[36,35,26,37,"mod"],[36,38,26,40],[36,41,26,43],[37,6,26,45],[37,15,26,54],[37,17,26,56,"mod"],[38,4,26,60],[38,5,26,61],[39,2,27,0],[39,3,27,1],[40,2,28,0,"Object"],[40,8,28,6],[40,9,28,7,"defineProperty"],[40,23,28,21],[40,24,28,22,"exports"],[40,31,28,29],[40,33,28,31],[40,45,28,43],[40,47,28,45],[41,4,28,47,"value"],[41,9,28,52],[41,11,28,54],[42,2,28,59],[42,3,28,60],[42,4,28,61],[43,2,29,0,"exports"],[43,9,29,7],[43,10,29,8,"getStateFromPath"],[43,26,29,24],[43,29,29,27],[43,34,29,32],[43,35,29,33],[44,2,30,0],[44,8,30,6,"native_1"],[44,16,30,14],[44,19,30,17,"require"],[44,26,30,24],[44,27,30,24,"_dependencyMap"],[44,41,30,24],[44,72,30,51],[44,73,30,52],[45,2,31,0],[45,8,31,6,"escape_string_regexp_1"],[45,30,31,28],[45,33,31,31,"__importDefault"],[45,48,31,46],[45,49,31,47,"require"],[45,56,31,54],[45,57,31,54,"_dependencyMap"],[45,71,31,54],[45,98,31,77],[45,99,31,78],[45,100,31,79],[46,2,32,0],[46,8,32,6,"findFocusedRoute_1"],[46,26,32,24],[46,29,32,27,"require"],[46,36,32,34],[46,37,32,34,"_dependencyMap"],[46,51,32,34],[46,76,32,55],[46,77,32,56],[47,2,33,0],[47,8,33,6,"expo"],[47,12,33,10],[47,15,33,13,"__importStar"],[47,27,33,25],[47,28,33,26,"require"],[47,35,33,33],[47,36,33,33,"_dependencyMap"],[47,50,33,33],[47,81,33,60],[47,82,33,61],[47,83,33,62],[48,2,34,0],[49,0,35,0],[50,0,36,0],[51,0,37,0],[52,0,38,0],[53,0,39,0],[54,0,40,0],[55,0,41,0],[56,0,42,0],[57,0,43,0],[58,0,44,0],[59,0,45,0],[60,0,46,0],[61,0,47,0],[62,0,48,0],[63,0,49,0],[64,0,50,0],[65,0,51,0],[66,0,52,0],[67,0,53,0],[68,0,54,0],[69,2,55,0],[69,11,55,9,"getStateFromPath"],[69,27,55,25,"getStateFromPath"],[70,2,56,0],[71,2,57,0,"path"],[71,6,57,4],[71,8,57,6,"options"],[71,15,57,13],[71,17,57,15],[72,4,58,4],[72,10,58,10],[73,6,58,12,"initialRoutes"],[73,19,58,25],[74,6,58,27,"configs"],[74,13,58,34],[75,6,58,36,"configWithRegexes"],[76,4,58,54],[76,5,58,55],[76,8,58,58,"getConfigResources"],[76,26,58,76],[76,27,58,77,"options"],[76,34,58,84],[76,36,58,86],[76,40,58,90],[76,42,58,92,"routeInfo"],[76,51,58,101],[76,53,58,103,"segments"],[76,61,58,111],[76,62,58,112],[77,4,59,4],[77,10,59,10,"screens"],[77,17,59,17],[77,20,59,20,"options"],[77,27,59,27],[77,29,59,29,"screens"],[77,36,59,36],[78,4,60,4],[79,4,61,4],[79,10,61,10,"expoPath"],[79,18,61,18],[79,21,61,21,"expo"],[79,25,61,25],[79,26,61,26,"getUrlWithReactNavigationConcessions"],[79,62,61,62],[79,63,61,63,"path"],[79,67,61,67],[79,68,61,68],[80,4,62,4],[81,4,63,4],[82,4,64,4],[82,8,64,8,"remaining"],[82,17,64,17],[82,20,64,20,"expoPath"],[82,28,64,28],[82,29,64,29,"nonstandardPathname"],[83,4,65,8],[84,4,66,8],[85,4,66,8],[85,5,67,9,"replace"],[85,12,67,16],[85,13,67,17],[85,19,67,23],[85,21,67,25],[85,24,67,28],[85,25,67,29],[85,26,67,30],[86,4,67,30],[86,5,68,9,"replace"],[86,12,68,16],[86,13,68,17],[86,18,68,22],[86,20,68,24],[86,22,68,26],[86,23,68,27],[86,24,68,28],[87,4,68,28],[87,5,69,9,"replace"],[87,12,69,16],[87,13,69,17],[87,20,69,24],[87,22,69,26],[87,24,69,28],[87,25,69,29],[87,26,69,30],[87,27,69,31],[88,4,70,4],[89,4,71,4,"remaining"],[89,13,71,13],[89,16,71,16,"remaining"],[89,25,71,25],[89,26,71,26,"endsWith"],[89,34,71,34],[89,35,71,35],[89,38,71,38],[89,39,71,39],[89,42,71,42,"remaining"],[89,51,71,51],[89,54,71,54],[89,57,71,57,"remaining"],[89,66,71,66],[89,69,71,69],[90,4,72,4],[90,10,72,10,"prefix"],[90,16,72,16],[90,19,72,19,"options"],[90,26,72,26],[90,28,72,28,"path"],[90,32,72,32],[90,34,72,34,"replace"],[90,41,72,41],[90,42,72,42],[90,47,72,47],[90,49,72,49],[90,51,72,51],[90,52,72,52],[90,53,72,53],[90,54,72,54],[91,4,73,4],[91,8,73,8,"prefix"],[91,14,73,14],[91,16,73,16],[92,6,74,8],[93,6,75,8],[93,12,75,14,"normalizedPrefix"],[93,28,75,30],[93,31,75,33,"prefix"],[93,37,75,39],[93,38,75,40,"endsWith"],[93,46,75,48],[93,47,75,49],[93,50,75,52],[93,51,75,53],[93,54,75,56,"prefix"],[93,60,75,62],[93,63,75,65],[93,66,75,68,"prefix"],[93,72,75,74],[93,75,75,77],[94,6,76,8],[95,6,77,8],[95,10,77,12],[95,11,77,13,"remaining"],[95,20,77,22],[95,21,77,23,"startsWith"],[95,31,77,33],[95,32,77,34,"normalizedPrefix"],[95,48,77,50],[95,49,77,51],[95,51,77,53],[96,8,78,12],[96,15,78,19,"undefined"],[96,24,78,28],[97,6,79,8],[98,6,80,8],[99,6,81,8,"remaining"],[99,15,81,17],[99,18,81,20,"remaining"],[99,27,81,29],[99,28,81,30,"replace"],[99,35,81,37],[99,36,81,38,"normalizedPrefix"],[99,52,81,54],[99,54,81,56],[99,56,81,58],[99,57,81,59],[100,4,82,4],[101,4,83,4],[101,8,83,8,"screens"],[101,15,83,15],[101,20,83,20,"undefined"],[101,29,83,29],[101,31,83,31],[102,6,84,8],[103,6,85,8],[103,12,85,14,"routes"],[103,18,85,20],[103,21,85,23,"remaining"],[103,30,85,32],[103,31,86,13,"split"],[103,36,86,18],[103,37,86,19],[103,40,86,22],[103,41,86,23],[103,42,87,13,"filter"],[103,48,87,19],[103,49,87,20,"Boolean"],[103,56,87,27],[103,57,87,28],[103,58,88,13,"map"],[103,61,88,16],[103,62,88,18,"segment"],[103,69,88,25],[103,73,88,30],[104,8,89,12],[104,14,89,18,"name"],[104,18,89,22],[104,21,89,25,"decodeURIComponent"],[104,39,89,43],[104,40,89,44,"segment"],[104,47,89,51],[104,48,89,52],[105,8,90,12],[105,15,90,19],[106,10,90,21,"name"],[107,8,90,26],[107,9,90,27],[108,6,91,8],[108,7,91,9],[108,8,91,10],[109,6,92,8],[109,10,92,12,"routes"],[109,16,92,18],[109,17,92,19,"length"],[109,23,92,25],[109,25,92,27],[110,8,93,12],[110,15,93,19,"createNestedStateObject"],[110,38,93,42],[110,39,93,43,"expoPath"],[110,47,93,51],[110,49,93,53,"routes"],[110,55,93,59],[110,57,93,61,"initialRoutes"],[110,70,93,74],[110,72,93,76],[110,74,93,78],[110,76,93,80,"expoPath"],[110,84,93,88],[110,85,93,89,"url"],[110,88,93,92],[110,89,93,93,"hash"],[110,93,93,97],[110,94,93,98],[111,6,94,8],[112,6,95,8],[112,13,95,15,"undefined"],[112,22,95,24],[113,4,96,4],[114,4,97,4],[114,8,97,8,"remaining"],[114,17,97,17],[114,22,97,22],[114,25,97,25],[114,27,97,27],[115,6,98,8],[116,6,99,8],[117,6,100,8],[118,6,101,8],[118,12,101,14,"match"],[118,17,101,19],[118,20,101,22,"expo"],[118,24,101,26],[118,25,101,27,"matchForEmptyPath"],[118,42,101,44],[118,43,101,45,"configWithRegexes"],[118,60,101,62],[118,61,101,63],[119,6,102,8],[120,6,103,8],[121,6,104,8],[122,6,105,8],[123,6,106,8],[124,6,107,8],[125,6,108,8],[126,6,109,8],[127,6,110,8],[128,6,111,8],[128,10,111,12,"match"],[128,15,111,17],[128,17,111,19],[129,8,112,12],[129,15,112,19,"createNestedStateObject"],[129,38,112,42],[129,39,112,43,"expoPath"],[129,47,112,51],[129,49,112,53,"match"],[129,54,112,58],[129,55,112,59,"routeNames"],[129,65,112,69],[129,66,112,70,"map"],[129,69,112,73],[129,70,112,75,"name"],[129,74,112,79],[129,79,112,85],[130,10,112,87,"name"],[131,8,112,92],[131,9,112,93],[131,10,112,94],[131,11,112,95],[131,13,112,97,"initialRoutes"],[131,26,112,110],[131,28,112,112,"configs"],[131,35,112,119],[131,37,112,121,"expoPath"],[131,45,112,129],[131,46,112,130,"url"],[131,49,112,133],[131,50,112,134,"hash"],[131,54,112,138],[131,55,112,139],[132,6,113,8],[133,6,114,8],[133,13,114,15,"undefined"],[133,22,114,24],[134,4,115,4],[135,4,116,4],[135,8,116,8,"result"],[135,14,116,14],[136,4,117,4],[136,8,117,8,"current"],[136,15,117,15],[137,4,118,4],[138,4,119,4],[139,4,120,4],[139,10,120,10],[140,6,120,12,"routes"],[140,12,120,18],[141,6,120,20,"remainingPath"],[142,4,120,34],[142,5,120,35],[142,8,120,38,"matchAgainstConfigs"],[142,27,120,57],[142,28,120,58,"remaining"],[142,37,120,67],[142,39,120,69,"configWithRegexes"],[142,56,120,86],[142,57,120,87],[143,4,121,4],[143,8,121,8,"routes"],[143,14,121,14],[143,19,121,19,"undefined"],[143,28,121,28],[143,30,121,30],[144,6,122,8],[145,6,123,8,"current"],[145,13,123,15],[145,16,123,18,"createNestedStateObject"],[145,39,123,41],[145,40,123,42,"expoPath"],[145,48,123,50],[145,50,123,52,"routes"],[145,56,123,58],[145,58,123,60,"initialRoutes"],[145,71,123,73],[145,73,123,75,"configs"],[145,80,123,82],[145,82,123,84,"expoPath"],[145,90,123,92],[145,91,123,93,"url"],[145,94,123,96],[145,95,123,97,"hash"],[145,99,123,101],[145,100,123,102],[146,6,124,8,"remaining"],[146,15,124,17],[146,18,124,20,"remainingPath"],[146,31,124,33],[147,6,125,8,"result"],[147,12,125,14],[147,15,125,17,"current"],[147,22,125,24],[148,4,126,4],[149,4,127,4],[149,8,127,8,"current"],[149,15,127,15],[149,19,127,19],[149,23,127,23],[149,27,127,27,"result"],[149,33,127,33],[149,37,127,37],[149,41,127,41],[149,43,127,43],[150,6,128,8],[150,13,128,15,"undefined"],[150,22,128,24],[151,4,129,4],[152,4,130,4],[152,11,130,11,"result"],[152,17,130,17],[153,2,131,0],[154,2,132,0,"exports"],[154,9,132,7],[154,10,132,8,"getStateFromPath"],[154,26,132,24],[154,29,132,27,"getStateFromPath"],[154,45,132,43],[155,2,133,0],[156,0,134,0],[157,0,135,0],[158,2,136,0],[158,6,136,4,"cachedConfigResources"],[158,27,136,25],[158,30,136,28],[158,31,137,4,"undefined"],[158,40,137,13],[158,42,138,4,"prepareConfigResources"],[158,64,138,26],[158,65,138,27],[158,66,138,28],[158,67,139,1],[159,2,140,0],[159,11,140,9,"getConfigResources"],[159,29,140,27,"getConfigResources"],[159,30,140,28,"options"],[159,37,140,35],[160,2,141,0],[161,2,142,0,"previousSegments"],[162,2,143,0],[163,2,143,0],[163,4,144,2],[164,4,145,4],[165,4,146,4],[166,4,147,4],[167,4,148,4,"cachedConfigResources"],[167,25,148,25],[167,28,148,28],[167,29,148,29,"options"],[167,36,148,36],[167,38,148,38,"prepareConfigResources"],[167,60,148,60],[167,61,148,61,"options"],[167,68,148,68],[167,70,148,70,"previousSegments"],[167,86,148,86],[167,87,148,87],[167,88,148,88],[168,4,149,4],[169,4,150,4],[170,4,151,4],[170,11,151,11,"cachedConfigResources"],[170,32,151,32],[170,33,151,33],[170,34,151,34],[170,35,151,35],[171,2,152,0],[172,2,153,0],[172,11,153,9,"prepareConfigResources"],[172,33,153,31,"prepareConfigResources"],[172,34,153,32,"options"],[172,41,153,39],[172,43,153,41,"previousSegments"],[172,59,153,57],[172,61,153,59],[173,4,154,4],[173,8,154,8,"options"],[173,15,154,15],[173,17,154,17],[174,6,155,8],[174,7,155,9],[174,8,155,10],[174,10,155,12,"native_1"],[174,18,155,20],[174,19,155,21,"validatePathConfig"],[174,37,155,39],[174,39,155,41,"options"],[174,46,155,48],[174,47,155,49],[175,4,156,4],[176,4,157,4],[176,10,157,10,"initialRoutes"],[176,23,157,23],[176,26,157,26,"getInitialRoutes"],[176,42,157,42],[176,43,157,43,"options"],[176,50,157,50],[176,51,157,51],[177,4,158,4],[177,10,158,10,"configs"],[177,17,158,17],[177,20,158,20,"getNormalizedConfigs"],[177,40,158,40],[177,41,158,41,"initialRoutes"],[177,54,158,54],[177,56,158,56,"options"],[177,63,158,63],[177,65,158,65,"screens"],[177,72,158,72],[177,74,158,74,"previousSegments"],[177,90,158,90],[177,91,158,91],[178,4,159,4,"checkForDuplicatedConfigs"],[178,29,159,29],[178,30,159,30,"configs"],[178,37,159,37],[178,38,159,38],[179,4,160,4],[179,10,160,10,"configWithRegexes"],[179,27,160,27],[179,30,160,30,"getConfigsWithRegexes"],[179,51,160,51],[179,52,160,52,"configs"],[179,59,160,59],[179,60,160,60],[180,4,161,4],[180,11,161,11],[181,6,162,8,"initialRoutes"],[181,19,162,21],[182,6,163,8,"configs"],[182,13,163,15],[183,6,164,8,"configWithRegexes"],[184,4,165,4],[184,5,165,5],[185,2,166,0],[186,2,167,0],[186,11,167,9,"getInitialRoutes"],[186,27,167,25,"getInitialRoutes"],[186,28,167,26,"options"],[186,35,167,33],[186,37,167,35],[187,4,168,4],[187,10,168,10,"initialRoutes"],[187,23,168,23],[187,26,168,26],[187,28,168,28],[188,4,169,4],[188,8,169,8,"options"],[188,15,169,15],[188,17,169,17,"initialRouteName"],[188,33,169,33],[188,35,169,35],[189,6,170,8,"initialRoutes"],[189,19,170,21],[189,20,170,22,"push"],[189,24,170,26],[189,25,170,27],[190,8,171,12,"initialRouteName"],[190,24,171,28],[190,26,171,30,"options"],[190,33,171,37],[190,34,171,38,"initialRouteName"],[190,50,171,54],[191,8,172,12,"parentScreens"],[191,21,172,25],[191,23,172,27],[192,6,173,8],[192,7,173,9],[192,8,173,10],[193,4,174,4],[194,4,175,4],[194,11,175,11,"initialRoutes"],[194,24,175,24],[195,2,176,0],[196,2,177,0],[196,11,177,9,"getNormalizedConfigs"],[196,31,177,29,"getNormalizedConfigs"],[196,32,177,30,"initialRoutes"],[196,45,177,43],[196,47,177,45,"screens"],[196,54,177,52],[196,57,177,55],[196,58,177,56],[196,59,177,57],[197,2,178,0],[198,2,179,0,"previousSegments"],[199,2,180,0],[200,2,180,0],[200,4,181,2],[201,4,182,4],[202,4,183,4],[202,11,183,11],[202,13,183,13],[202,14,184,9,"concat"],[202,20,184,15],[202,21,184,16],[202,24,184,19,"Object"],[202,30,184,25],[202,31,184,26,"keys"],[202,35,184,30],[202,36,184,31,"screens"],[202,43,184,38],[202,44,184,39],[202,45,184,40,"map"],[202,48,184,43],[202,49,184,45,"key"],[202,52,184,48],[202,56,184,53,"createNormalizedConfigs"],[202,79,184,76],[202,80,184,77,"key"],[202,83,184,80],[202,85,184,82,"screens"],[202,92,184,89],[202,94,184,91],[202,96,184,93],[202,98,184,95,"initialRoutes"],[202,111,184,108],[202,113,184,110],[202,115,184,112],[202,116,184,113],[202,117,184,114],[202,118,184,115],[202,119,185,9,"map"],[202,122,185,12],[202,123,185,13,"expo"],[202,127,185,17],[202,128,185,18,"appendIsInitial"],[202,143,185,33],[202,144,185,34,"initialRoutes"],[202,157,185,47],[202,158,185,48],[202,159,185,49],[202,160,186,9,"sort"],[202,164,186,13],[202,165,186,14,"expo"],[202,169,186,18],[202,170,186,19,"getRouteConfigSorter"],[202,190,186,39],[202,191,186,40,"previousSegments"],[202,207,186,56],[202,208,186,57],[202,209,186,58],[203,4,187,4],[204,4,188,4],[205,4,189,4],[206,4,190,4],[207,4,191,4],[208,4,192,4],[209,4,193,4],[210,4,194,4],[211,4,195,4],[212,4,196,4],[213,4,197,4],[214,4,198,4],[215,4,199,4],[216,4,200,4],[217,4,201,4],[218,4,202,4],[219,4,203,4],[220,4,204,4],[221,4,205,4],[222,4,206,4],[223,4,207,4],[224,4,208,4],[225,4,209,4],[226,4,210,4],[227,4,211,4],[228,4,212,4],[229,4,213,4],[230,4,214,4],[231,4,215,4],[232,4,216,4],[233,4,217,4],[234,4,218,4],[235,4,219,4],[236,4,220,4],[237,4,221,4],[238,4,222,4],[239,4,223,4],[240,4,224,4],[241,4,225,4],[242,4,226,4],[243,4,227,4],[244,4,228,4],[245,4,229,4],[246,4,230,4],[247,4,231,4],[248,2,232,0],[249,2,233,0],[249,11,233,9,"checkForDuplicatedConfigs"],[249,36,233,34,"checkForDuplicatedConfigs"],[249,37,233,35,"configs"],[249,44,233,42],[249,46,233,44],[250,4,234,4],[251,4,235,4,"configs"],[251,11,235,11],[251,12,235,12,"reduce"],[251,18,235,18],[251,19,235,19],[251,20,235,20,"acc"],[251,23,235,23],[251,25,235,25,"config"],[251,31,235,31],[251,36,235,36],[252,6,236,8],[252,10,236,12,"acc"],[252,13,236,15],[252,14,236,16,"config"],[252,20,236,22],[252,21,236,23,"pattern"],[252,28,236,30],[252,29,236,31],[252,31,236,33],[253,8,237,12],[253,14,237,18,"a"],[253,15,237,19],[253,18,237,22,"acc"],[253,21,237,25],[253,22,237,26,"config"],[253,28,237,32],[253,29,237,33,"pattern"],[253,36,237,40],[253,37,237,41],[253,38,237,42,"routeNames"],[253,48,237,52],[254,8,238,12],[254,14,238,18,"b"],[254,15,238,19],[254,18,238,22,"config"],[254,24,238,28],[254,25,238,29,"routeNames"],[254,35,238,39],[255,8,239,12],[256,8,240,12],[257,8,241,12],[257,14,241,18,"intersects"],[257,24,241,28],[257,27,241,31,"a"],[257,28,241,32],[257,29,241,33,"length"],[257,35,241,39],[257,38,241,42,"b"],[257,39,241,43],[257,40,241,44,"length"],[257,46,241,50],[257,49,241,53,"b"],[257,50,241,54],[257,51,241,55,"every"],[257,56,241,60],[257,57,241,61],[257,58,241,62,"it"],[257,60,241,64],[257,62,241,66,"i"],[257,63,241,67],[257,68,241,72,"a"],[257,69,241,73],[257,70,241,74,"i"],[257,71,241,75],[257,72,241,76],[257,77,241,81,"it"],[257,79,241,83],[257,80,241,84],[257,83,241,87,"a"],[257,84,241,88],[257,85,241,89,"every"],[257,90,241,94],[257,91,241,95],[257,92,241,96,"it"],[257,94,241,98],[257,96,241,100,"i"],[257,97,241,101],[257,102,241,106,"b"],[257,103,241,107],[257,104,241,108,"i"],[257,105,241,109],[257,106,241,110],[257,111,241,115,"it"],[257,113,241,117],[257,114,241,118],[258,8,242,12],[258,12,242,16],[258,13,242,17,"intersects"],[258,23,242,27],[258,25,242,29],[259,10,243,16],[259,16,243,22],[259,20,243,26,"Error"],[259,25,243,31],[259,26,243,32],[259,91,243,97,"config"],[259,97,243,103],[259,98,243,104,"pattern"],[259,105,243,111],[259,128,243,134,"a"],[259,129,243,135],[259,130,243,136,"join"],[259,134,243,140],[259,135,243,141],[259,140,243,146],[259,141,243,147],[259,151,243,157,"b"],[259,152,243,158],[259,153,243,159,"join"],[259,157,243,163],[259,158,243,164],[259,163,243,169],[259,164,243,170],[259,236,243,242],[259,237,243,243],[260,8,244,12],[261,6,245,8],[262,6,246,8],[262,13,246,15,"Object"],[262,19,246,21],[262,20,246,22,"assign"],[262,26,246,28],[262,27,246,29,"acc"],[262,30,246,32],[262,32,246,34],[263,8,247,12],[263,9,247,13,"config"],[263,15,247,19],[263,16,247,20,"pattern"],[263,23,247,27],[263,26,247,30,"config"],[264,6,248,8],[264,7,248,9],[264,8,248,10],[265,4,249,4],[265,5,249,5],[265,7,249,7],[265,8,249,8],[265,9,249,9],[265,10,249,10],[266,2,250,0],[267,2,251,0],[267,11,251,9,"getConfigsWithRegexes"],[267,32,251,30,"getConfigsWithRegexes"],[267,33,251,31,"configs"],[267,40,251,38],[267,42,251,40],[268,4,252,4],[268,11,252,11,"configs"],[268,18,252,18],[268,19,252,19,"map"],[268,22,252,22],[268,23,252,24,"c"],[268,24,252,25],[268,29,252,31],[269,6,253,8],[269,9,253,11,"c"],[269,10,253,12],[270,6,254,8],[271,6,255,8],[272,6,256,8],[273,6,257,8,"regex"],[273,11,257,13],[273,13,257,15,"expo"],[273,17,257,19],[273,18,257,20,"configRegExp"],[273,30,257,32],[273,31,257,33,"c"],[273,32,257,34],[274,6,258,8],[275,4,259,4],[275,5,259,5],[275,6,259,6],[275,7,259,7],[276,2,260,0],[277,2,261,0],[277,8,261,6,"joinPaths"],[277,17,261,15],[277,20,261,18,"joinPaths"],[277,21,261,19],[277,24,261,22,"paths"],[277,29,261,27],[277,34,261,32],[277,36,261,34],[277,37,262,5,"concat"],[277,43,262,11],[277,44,262,12],[277,47,262,15,"paths"],[277,52,262,20],[277,53,262,21,"map"],[277,56,262,24],[277,57,262,26,"p"],[277,58,262,27],[277,62,262,32,"p"],[277,63,262,33],[277,64,262,34,"split"],[277,69,262,39],[277,70,262,40],[277,73,262,43],[277,74,262,44],[277,75,262,45],[277,76,262,46],[277,77,263,5,"filter"],[277,83,263,11],[277,84,263,12,"Boolean"],[277,91,263,19],[277,92,263,20],[277,93,264,5,"join"],[277,97,264,9],[277,98,264,10],[277,101,264,13],[277,102,264,14],[278,2,265,0],[278,8,265,6,"matchAgainstConfigs"],[278,27,265,25],[278,30,265,28,"matchAgainstConfigs"],[278,31,265,29,"remaining"],[278,40,265,38],[278,42,265,40,"configs"],[278,49,265,47],[278,54,265,52],[279,4,266,4],[279,8,266,8,"routes"],[279,14,266,14],[280,4,267,4],[280,8,267,8,"remainingPath"],[280,21,267,21],[280,24,267,24,"remaining"],[280,33,267,33],[281,4,268,4],[282,4,269,4],[282,10,269,10,"allParams"],[282,19,269,19],[282,22,269,22,"Object"],[282,28,269,28],[282,29,269,29,"create"],[282,35,269,35],[282,36,269,36],[282,40,269,40],[282,41,269,41],[283,4,270,4],[284,4,271,4],[285,4,272,4],[285,9,272,9],[285,15,272,15,"config"],[285,21,272,21],[285,25,272,25,"configs"],[285,32,272,32],[285,34,272,34],[286,6,273,8],[286,10,273,12],[286,11,273,13,"config"],[286,17,273,19],[286,18,273,20,"regex"],[286,23,273,25],[286,25,273,27],[287,8,274,12],[288,6,275,8],[289,6,276,8],[289,12,276,14,"match"],[289,17,276,19],[289,20,276,22,"remainingPath"],[289,33,276,35],[289,34,276,36,"match"],[289,39,276,41],[289,40,276,42,"config"],[289,46,276,48],[289,47,276,49,"regex"],[289,52,276,54],[289,53,276,55],[290,6,277,8],[291,6,278,8],[291,10,278,12,"match"],[291,15,278,17],[291,17,278,19],[292,8,279,12],[292,14,279,18,"matchResult"],[292,25,279,29],[292,28,279,32,"config"],[292,34,279,38],[292,35,279,39,"pattern"],[292,42,279,46],[292,44,279,48,"split"],[292,49,279,53],[292,50,279,54],[292,53,279,57],[292,54,279,58],[292,55,279,59,"reduce"],[292,61,279,65],[292,62,279,66],[292,63,279,67,"acc"],[292,66,279,70],[292,68,279,72,"p"],[292,69,279,73],[292,71,279,75,"index"],[292,76,279,80],[292,81,279,85],[293,10,280,16],[293,14,280,20],[293,15,280,21,"expo"],[293,19,280,25],[293,20,280,26,"isDynamicPart"],[293,33,280,39],[293,34,280,40,"p"],[293,35,280,41],[293,36,280,42],[293,38,280,44],[294,12,281,20],[294,19,281,27,"acc"],[294,22,281,30],[295,10,282,16],[296,10,283,16,"acc"],[296,13,283,19],[296,14,283,20,"pos"],[296,17,283,23],[296,21,283,27],[296,22,283,28],[297,10,284,16],[298,10,285,16],[298,16,285,22,"decodedParamSegment"],[298,35,285,41],[298,38,285,44,"expo"],[298,42,285,48],[298,43,285,49,"safelyDecodeURIComponent"],[298,67,285,73],[299,10,286,16],[300,10,287,16],[301,10,288,16,"match"],[301,15,288,21],[301,16,288,22],[301,17,288,23,"acc"],[301,20,288,26],[301,21,288,27,"pos"],[301,24,288,30],[301,27,288,33],[301,28,288,34],[301,32,288,38],[301,33,288,39],[302,10,289,20],[303,10,289,20],[303,11,290,21,"replace"],[303,18,290,28],[303,19,290,29],[303,24,290,34],[303,26,290,36],[303,28,290,38],[303,29,290,39],[303,30,290,40],[304,10,291,16],[305,10,292,16,"Object"],[305,16,292,22],[305,17,292,23,"assign"],[305,23,292,29],[305,24,292,30,"acc"],[305,27,292,33],[305,28,292,34,"matchedParams"],[305,41,292,47],[305,43,292,49],[306,12,293,20],[306,13,293,21,"p"],[306,14,293,22],[306,17,293,25,"Object"],[306,23,293,31],[306,24,293,32,"assign"],[306,30,293,38],[306,31,293,39,"acc"],[306,34,293,42],[306,35,293,43,"matchedParams"],[306,48,293,56],[306,49,293,57,"p"],[306,50,293,58],[306,51,293,59],[306,55,293,63],[306,56,293,64],[306,57,293,65],[306,59,293,67],[307,14,294,24],[307,15,294,25,"index"],[307,20,294,30],[307,23,294,33,"decodedParamSegment"],[308,12,295,20],[308,13,295,21],[309,10,296,16],[309,11,296,17],[309,12,296,18],[310,10,297,16],[310,17,297,23,"acc"],[310,20,297,26],[311,8,298,12],[311,9,298,13],[311,11,298,15],[312,10,298,17,"pos"],[312,13,298,20],[312,15,298,22],[312,16,298,23],[312,17,298,24],[313,10,298,26,"matchedParams"],[313,23,298,39],[313,25,298,41],[313,26,298,42],[314,8,298,44],[314,9,298,45],[314,10,298,46],[315,8,299,12],[315,14,299,18,"matchedParams"],[315,27,299,31],[315,30,299,34,"matchResult"],[315,41,299,45],[315,42,299,46,"matchedParams"],[315,55,299,59],[315,59,299,63],[315,60,299,64],[315,61,299,65],[316,8,300,12,"routes"],[316,14,300,18],[316,17,300,21,"config"],[316,23,300,27],[316,24,300,28,"routeNames"],[316,34,300,38],[316,35,300,39,"map"],[316,38,300,42],[316,39,300,44,"name"],[316,43,300,48],[316,47,300,53],[317,10,301,16],[317,16,301,22,"routeConfig"],[317,27,301,33],[317,30,301,36,"configs"],[317,37,301,43],[317,38,301,44,"find"],[317,42,301,48],[317,43,301,50,"c"],[317,44,301,51],[317,48,301,56],[318,12,302,20],[319,12,303,20],[319,19,303,27,"c"],[319,20,303,28],[319,21,303,29,"screen"],[319,27,303,35],[319,32,303,40,"name"],[319,36,303,44],[319,40,303,48,"config"],[319,46,303,54],[319,47,303,55,"pattern"],[319,54,303,62],[319,55,303,63,"startsWith"],[319,65,303,73],[319,66,303,74,"c"],[319,67,303,75],[319,68,303,76,"pattern"],[319,75,303,83],[319,76,303,84],[320,10,304,16],[320,11,304,17],[320,12,304,18],[321,10,305,16],[322,10,306,16],[322,16,306,22,"normalizedPath"],[322,30,306,36],[322,33,306,39,"routeConfig"],[322,44,306,50],[322,46,306,52,"path"],[322,50,306,56],[322,51,306,57,"split"],[322,56,306,62],[322,57,306,63],[322,60,306,66],[322,61,306,67],[322,62,306,68,"filter"],[322,68,306,74],[322,69,306,75,"Boolean"],[322,76,306,82],[322,77,306,83],[322,78,306,84,"join"],[322,82,306,88],[322,83,306,89],[322,86,306,92],[322,87,306,93],[323,10,307,16],[324,10,308,16],[324,16,308,22,"numInitialSegments"],[324,34,308,40],[324,37,308,43,"routeConfig"],[324,48,308,54],[324,50,308,56,"pattern"],[325,10,309,20],[326,10,309,20],[326,11,310,21,"replace"],[326,18,310,28],[326,19,310,29],[326,23,310,33,"RegExp"],[326,29,310,39],[326,30,310,40],[326,33,310,43],[326,34,310,44],[326,35,310,45],[326,37,310,47,"escape_string_regexp_1"],[326,59,310,69],[326,60,310,70,"default"],[326,67,310,77],[326,69,310,79,"normalizedPath"],[326,83,310,93],[326,84,310,94],[326,87,310,97],[326,88,310,98],[326,90,310,100],[326,92,310,102],[326,93,310,103],[326,95,311,22,"split"],[326,100,311,27],[326,101,311,28],[326,104,311,31],[326,105,311,32],[326,106,311,33,"length"],[326,112,311,39],[327,10,312,16],[327,16,312,22,"params"],[327,22,312,28],[327,25,312,31,"normalizedPath"],[327,39,312,45],[327,41,313,22,"split"],[327,46,313,27],[327,47,313,28],[327,50,313,31],[327,51,313,32],[327,52,314,21,"reduce"],[327,58,314,27],[327,59,314,28],[327,60,314,29,"acc"],[327,63,314,32],[327,65,314,34,"p"],[327,66,314,35],[327,68,314,37,"index"],[327,73,314,42],[327,78,314,47],[328,12,315,20],[328,16,315,24],[328,17,315,25,"expo"],[328,21,315,29],[328,22,315,30,"isDynamicPart"],[328,35,315,43],[328,36,315,44,"p"],[328,37,315,45],[328,38,315,46],[328,40,315,48],[329,14,316,24],[329,21,316,31,"acc"],[329,24,316,34],[330,12,317,20],[331,12,318,20],[332,12,319,20],[333,12,320,20],[333,18,320,26,"offset"],[333,24,320,32],[333,27,320,35,"numInitialSegments"],[333,45,320,53],[333,48,320,56,"numInitialSegments"],[333,66,320,74],[333,69,320,77],[333,70,320,78],[333,73,320,81],[333,74,320,82],[334,12,321,20],[335,12,322,20],[336,12,323,20],[336,18,323,26,"value"],[336,23,323,31],[336,26,323,34,"expo"],[336,30,323,38],[336,31,323,39,"getParamValue"],[336,44,323,52],[336,45,323,53,"p"],[336,46,323,54],[336,48,323,56,"matchedParams"],[336,61,323,69],[336,62,323,70,"p"],[336,63,323,71],[336,64,323,72],[336,67,323,75,"index"],[336,72,323,80],[336,75,323,83,"offset"],[336,81,323,89],[336,82,323,90],[336,83,323,91],[337,12,324,20],[338,12,325,20],[338,16,325,24,"value"],[338,21,325,29],[338,23,325,31],[339,14,326,24],[340,14,327,24],[341,14,328,24],[341,20,328,30,"key"],[341,23,328,33],[341,26,328,36,"expo"],[341,30,328,40],[341,31,328,41,"replacePart"],[341,42,328,52],[341,43,328,53,"p"],[341,44,328,54],[341,45,328,55],[342,14,329,24],[343,14,330,24,"acc"],[343,17,330,27],[343,18,330,28,"key"],[343,21,330,31],[343,22,330,32],[343,25,330,35,"routeConfig"],[343,36,330,46],[343,38,330,48,"parse"],[343,43,330,53],[343,46,330,56,"key"],[343,49,330,59],[343,50,330,60],[343,53,330,63,"routeConfig"],[343,64,330,74],[343,65,330,75,"parse"],[343,70,330,80],[343,71,330,81,"key"],[343,74,330,84],[343,75,330,85],[343,76,330,86,"value"],[343,81,330,91],[343,82,330,92],[343,85,330,95,"value"],[343,90,330,100],[344,12,331,20],[345,12,332,20],[345,19,332,27,"acc"],[345,22,332,30],[346,10,333,16],[346,11,333,17],[346,13,333,19],[346,14,333,20],[346,15,333,21],[346,16,333,22],[347,10,334,16],[347,14,334,20,"params"],[347,20,334,26],[347,24,334,30,"Object"],[347,30,334,36],[347,31,334,37,"keys"],[347,35,334,41],[347,36,334,42,"params"],[347,42,334,48],[347,43,334,49],[347,44,334,50,"length"],[347,50,334,56],[347,52,334,58],[348,12,335,20,"Object"],[348,18,335,26],[348,19,335,27,"assign"],[348,25,335,33],[348,26,335,34,"allParams"],[348,35,335,43],[348,37,335,45,"params"],[348,43,335,51],[348,44,335,52],[349,12,336,20],[349,19,336,27],[350,14,336,29,"name"],[350,18,336,33],[351,14,336,35,"params"],[352,12,336,42],[352,13,336,43],[353,10,337,16],[354,10,338,16],[354,17,338,23],[355,12,338,25,"name"],[356,10,338,30],[356,11,338,31],[357,8,339,12],[357,9,339,13],[357,10,339,14],[358,8,340,12,"remainingPath"],[358,21,340,25],[358,24,340,28,"remainingPath"],[358,37,340,41],[358,38,340,42,"replace"],[358,45,340,49],[358,46,340,50,"match"],[358,51,340,55],[358,52,340,56],[358,53,340,57],[358,54,340,58],[358,56,340,60],[358,58,340,62],[358,59,340,63],[359,8,341,12],[360,6,342,8],[361,4,343,4],[362,4,344,4],[363,4,345,4,"expo"],[363,8,345,8],[363,9,345,9,"populateParams"],[363,23,345,23],[363,24,345,24,"routes"],[363,30,345,30],[363,32,345,32,"allParams"],[363,41,345,41],[363,42,345,42],[364,4,346,4],[365,4,347,4],[365,11,347,11],[366,6,347,13,"routes"],[366,12,347,19],[367,6,347,21,"remainingPath"],[368,4,347,35],[368,5,347,36],[369,2,348,0],[369,3,348,1],[370,2,349,0],[370,8,349,6,"createNormalizedConfigs"],[370,31,349,29],[370,34,349,32,"createNormalizedConfigs"],[370,35,349,33,"screen"],[370,41,349,39],[370,43,349,41,"routeConfig"],[370,54,349,52],[370,56,349,54,"routeNames"],[370,66,349,64],[370,69,349,67],[370,71,349,69],[370,73,349,71,"initials"],[370,81,349,79],[370,83,349,81,"parentScreens"],[370,96,349,94],[370,98,349,96,"parentPattern"],[370,111,349,109],[370,116,349,114],[371,4,350,4],[371,10,350,10,"configs"],[371,17,350,17],[371,20,350,20],[371,22,350,22],[372,4,351,4,"routeNames"],[372,14,351,14],[372,15,351,15,"push"],[372,19,351,19],[372,20,351,20,"screen"],[372,26,351,26],[372,27,351,27],[373,4,352,4,"parentScreens"],[373,17,352,17],[373,18,352,18,"push"],[373,22,352,22],[373,23,352,23,"screen"],[373,29,352,29],[373,30,352,30],[374,4,353,4],[374,10,353,10,"config"],[374,16,353,16],[374,19,353,19,"routeConfig"],[374,30,353,30],[374,31,353,31,"screen"],[374,37,353,37],[374,38,353,38],[375,4,354,4],[375,8,354,8],[375,15,354,15,"config"],[375,21,354,21],[375,26,354,26],[375,34,354,34],[375,36,354,36],[376,6,355,8],[377,6,356,8],[377,12,356,14,"pattern"],[377,19,356,21],[377,22,356,24,"parentPattern"],[377,35,356,37],[377,38,356,40,"joinPaths"],[377,47,356,49],[377,48,356,50,"parentPattern"],[377,61,356,63],[377,63,356,65,"config"],[377,69,356,71],[377,70,356,72],[377,73,356,75,"config"],[377,79,356,81],[378,6,357,8,"configs"],[378,13,357,15],[378,14,357,16,"push"],[378,18,357,20],[378,19,357,21,"createConfigItem"],[378,35,357,37],[378,36,357,38,"screen"],[378,42,357,44],[378,44,357,46,"routeNames"],[378,54,357,56],[378,56,357,58,"pattern"],[378,63,357,65],[378,65,357,67,"config"],[378,71,357,73],[378,72,357,74],[378,73,357,75],[379,4,358,4],[379,5,358,5],[379,11,359,9],[379,15,359,13],[379,22,359,20,"config"],[379,28,359,26],[379,33,359,31],[379,41,359,39],[379,43,359,41],[380,6,360,8],[380,10,360,12,"pattern"],[380,17,360,19],[381,6,361,8],[382,6,362,8],[383,6,363,8],[384,6,364,8],[384,10,364,12],[384,17,364,19,"config"],[384,23,364,25],[384,24,364,26,"path"],[384,28,364,30],[384,33,364,35],[384,41,364,43],[384,43,364,45],[385,8,365,12],[385,12,365,16,"config"],[385,18,365,22],[385,19,365,23,"exact"],[385,24,365,28],[385,28,365,32,"config"],[385,34,365,38],[385,35,365,39,"path"],[385,39,365,43],[385,44,365,48,"undefined"],[385,53,365,57],[385,55,365,59],[386,10,366,16],[386,16,366,22],[386,20,366,26,"Error"],[386,25,366,31],[386,26,366,32],[386,176,366,182],[386,177,366,183],[387,8,367,12],[388,8,368,12,"pattern"],[388,15,368,19],[388,18,369,16,"config"],[388,24,369,22],[388,25,369,23,"exact"],[388,30,369,28],[388,35,369,33],[388,39,369,37],[388,42,370,22,"joinPaths"],[388,51,370,31],[388,52,370,32,"parentPattern"],[388,65,370,45],[388,69,370,49],[388,71,370,51],[388,73,370,53,"config"],[388,79,370,59],[388,80,370,60,"path"],[388,84,370,64],[388,88,370,68],[388,90,370,70],[388,91,370,71],[388,94,371,22,"config"],[388,100,371,28],[388,101,371,29,"path"],[388,105,371,33],[388,109,371,37],[388,111,371,39],[389,8,372,12,"configs"],[389,15,372,19],[389,16,372,20,"push"],[389,20,372,24],[389,21,372,25,"createConfigItem"],[389,37,372,41],[389,38,372,42,"screen"],[389,44,372,48],[389,46,372,50,"routeNames"],[389,56,372,60],[389,58,372,62,"pattern"],[389,65,372,69],[389,67,372,71,"config"],[389,73,372,77],[389,74,372,78,"path"],[389,78,372,82],[389,80,372,84,"config"],[389,86,372,90],[389,87,372,91,"parse"],[389,92,372,96],[389,94,372,98,"config"],[389,100,372,104],[389,101,372,105],[389,102,372,106],[390,6,373,8],[391,6,374,8],[391,10,374,12,"config"],[391,16,374,18],[391,17,374,19,"screens"],[391,24,374,26],[391,26,374,28],[392,8,375,12],[393,8,376,12],[393,12,376,16,"config"],[393,18,376,22],[393,19,376,23,"initialRouteName"],[393,35,376,39],[393,37,376,41],[394,10,377,16,"initials"],[394,18,377,24],[394,19,377,25,"push"],[394,23,377,29],[394,24,377,30],[395,12,378,20,"initialRouteName"],[395,28,378,36],[395,30,378,38,"config"],[395,36,378,44],[395,37,378,45,"initialRouteName"],[395,53,378,61],[396,12,379,20,"parentScreens"],[397,10,380,16],[397,11,380,17],[397,12,380,18],[398,8,381,12],[399,8,382,12,"Object"],[399,14,382,18],[399,15,382,19,"keys"],[399,19,382,23],[399,20,382,24,"config"],[399,26,382,30],[399,27,382,31,"screens"],[399,34,382,38],[399,35,382,39],[399,36,382,40,"forEach"],[399,43,382,47],[399,44,382,49,"nestedConfig"],[399,56,382,61],[399,60,382,66],[400,10,383,16],[400,16,383,22,"result"],[400,22,383,28],[400,25,383,31,"createNormalizedConfigs"],[400,48,383,54],[400,49,383,55,"nestedConfig"],[400,61,383,67],[400,63,383,69,"config"],[400,69,383,75],[400,70,383,76,"screens"],[400,77,383,83],[400,79,383,85,"routeNames"],[400,89,383,95],[400,91,383,97,"initials"],[400,99,383,105],[400,101,383,107],[400,102,383,108],[400,105,383,111,"parentScreens"],[400,118,383,124],[400,119,383,125],[400,121,383,127,"pattern"],[400,128,383,134],[400,132,383,138,"parentPattern"],[400,145,383,151],[400,146,383,152],[401,10,384,16,"configs"],[401,17,384,23],[401,18,384,24,"push"],[401,22,384,28],[401,23,384,29],[401,26,384,32,"result"],[401,32,384,38],[401,33,384,39],[402,8,385,12],[402,9,385,13],[402,10,385,14],[403,6,386,8],[404,4,387,4],[405,4,388,4,"routeNames"],[405,14,388,14],[405,15,388,15,"pop"],[405,18,388,18],[405,19,388,19],[405,20,388,20],[406,4,389,4],[406,11,389,11,"configs"],[406,18,389,18],[407,2,390,0],[407,3,390,1],[408,2,391,0],[408,8,391,6,"createConfigItem"],[408,24,391,22],[408,27,391,25,"createConfigItem"],[408,28,391,26,"screen"],[408,34,391,32],[408,36,391,34,"routeNames"],[408,46,391,44],[408,48,391,46,"pattern"],[408,55,391,53],[408,57,391,55,"path"],[408,61,391,59],[408,63,391,61,"parse"],[408,68,391,66],[408,71,391,69,"undefined"],[408,80,391,78],[408,82,391,80,"config"],[408,88,391,86],[408,91,391,89],[408,92,391,90],[408,93,391,91],[408,98,391,96],[409,4,392,4],[410,4,393,4,"pattern"],[410,11,393,11],[410,14,393,14,"pattern"],[410,21,393,21],[410,22,393,22,"split"],[410,27,393,27],[410,28,393,28],[410,31,393,31],[410,32,393,32],[410,33,393,33,"filter"],[410,39,393,39],[410,40,393,40,"Boolean"],[410,47,393,47],[410,48,393,48],[410,49,393,49,"join"],[410,53,393,53],[410,54,393,54],[410,57,393,57],[410,58,393,58],[411,4,394,4],[411,10,394,10,"regex"],[411,15,394,15],[411,18,394,18,"pattern"],[411,25,394,25],[411,28,395,10],[411,32,395,14,"RegExp"],[411,38,395,20],[411,39,395,21],[411,44,395,26,"pattern"],[411,51,395,33],[411,52,396,13,"split"],[411,57,396,18],[411,58,396,19],[411,61,396,22],[411,62,396,23],[411,63,397,13,"map"],[411,66,397,16],[411,67,397,18,"it"],[411,69,397,20],[411,73,397,25],[412,6,398,12],[412,10,398,16,"it"],[412,12,398,18],[412,13,398,19,"startsWith"],[412,23,398,29],[412,24,398,30],[412,27,398,33],[412,28,398,34],[412,30,398,36],[413,8,399,16],[413,15,399,23],[413,29,399,37,"it"],[413,31,399,39],[413,32,399,40,"endsWith"],[413,40,399,48],[413,41,399,49],[413,44,399,52],[413,45,399,53],[413,48,399,56],[413,51,399,59],[413,54,399,62],[413,56,399,64],[413,59,399,67],[414,6,400,12],[415,6,401,12],[415,13,401,19],[415,16,401,22,"it"],[415,18,401,24],[415,23,401,29],[415,26,401,32],[415,29,401,35],[415,33,401,39],[415,36,401,42],[415,37,401,43],[415,38,401,44],[415,40,401,46,"escape_string_regexp_1"],[415,62,401,68],[415,63,401,69,"default"],[415,70,401,76],[415,72,401,78,"it"],[415,74,401,80],[415,75,401,81],[415,80,401,86],[416,4,402,8],[416,5,402,9],[416,6,402,10],[416,7,403,13,"join"],[416,11,403,17],[416,12,403,18],[416,14,403,20],[416,15,403,21],[416,18,403,24],[416,19,403,25],[416,22,404,10,"undefined"],[416,31,404,19],[417,4,405,4],[417,11,405,11],[418,6,406,8,"screen"],[418,12,406,14],[419,6,407,8,"regex"],[419,11,407,13],[420,6,408,8,"pattern"],[420,13,408,15],[421,6,409,8,"path"],[421,10,409,12],[422,6,410,8],[423,6,411,8,"routeNames"],[423,16,411,18],[423,18,411,20],[423,19,411,21],[423,22,411,24,"routeNames"],[423,32,411,34],[423,33,411,35],[424,6,412,8,"parse"],[424,11,412,13],[425,6,413,8],[426,6,414,8],[426,9,414,11,"expo"],[426,13,414,15],[426,14,414,16,"createConfig"],[426,26,414,28],[426,27,414,29,"screen"],[426,33,414,35],[426,35,414,37,"pattern"],[426,42,414,44],[426,44,414,46,"routeNames"],[426,54,414,56],[426,56,414,58,"config"],[426,62,414,64],[427,6,415,8],[428,4,416,4],[428,5,416,5],[429,2,417,0],[429,3,417,1],[430,2,418,0],[430,8,418,6,"findParseConfigForRoute"],[430,31,418,29],[430,34,418,32,"findParseConfigForRoute"],[430,35,418,33,"routeName"],[430,44,418,42],[430,46,418,44,"flatConfig"],[430,56,418,54],[430,61,418,59],[431,4,419,4],[431,9,419,9],[431,15,419,15,"config"],[431,21,419,21],[431,25,419,25,"flatConfig"],[431,35,419,35],[431,37,419,37],[432,6,420,8],[432,10,420,12,"routeName"],[432,19,420,21],[432,24,420,26,"config"],[432,30,420,32],[432,31,420,33,"routeNames"],[432,41,420,43],[432,42,420,44,"config"],[432,48,420,50],[432,49,420,51,"routeNames"],[432,59,420,61],[432,60,420,62,"length"],[432,66,420,68],[432,69,420,71],[432,70,420,72],[432,71,420,73],[432,73,420,75],[433,8,421,12],[433,15,421,19,"config"],[433,21,421,25],[433,22,421,26,"parse"],[433,27,421,31],[434,6,422,8],[435,4,423,4],[436,4,424,4],[436,11,424,11,"undefined"],[436,20,424,20],[437,2,425,0],[437,3,425,1],[438,2,426,0],[439,2,427,0],[439,8,427,6,"findInitialRoute"],[439,24,427,22],[439,27,427,25,"findInitialRoute"],[439,28,427,26,"routeName"],[439,37,427,35],[439,39,427,37,"parentScreens"],[439,52,427,50],[439,54,427,52,"initialRoutes"],[439,67,427,65],[439,72,427,70],[440,4,428,4],[440,9,428,9],[440,15,428,15,"config"],[440,21,428,21],[440,25,428,25,"initialRoutes"],[440,38,428,38],[440,40,428,40],[441,6,429,8],[441,10,429,12,"parentScreens"],[441,23,429,25],[441,24,429,26,"length"],[441,30,429,32],[441,35,429,37,"config"],[441,41,429,43],[441,42,429,44,"parentScreens"],[441,55,429,57],[441,56,429,58,"length"],[441,62,429,64],[441,64,429,66],[442,8,430,12],[442,12,430,16,"sameParents"],[442,23,430,27],[442,26,430,30],[442,30,430,34],[443,8,431,12],[443,13,431,17],[443,17,431,21,"i"],[443,18,431,22],[443,21,431,25],[443,22,431,26],[443,24,431,28,"i"],[443,25,431,29],[443,28,431,32,"parentScreens"],[443,41,431,45],[443,42,431,46,"length"],[443,48,431,52],[443,50,431,54,"i"],[443,51,431,55],[443,53,431,57],[443,55,431,59],[444,10,432,16],[444,14,432,20,"parentScreens"],[444,27,432,33],[444,28,432,34,"i"],[444,29,432,35],[444,30,432,36],[444,31,432,37,"localeCompare"],[444,44,432,50],[444,45,432,51,"config"],[444,51,432,57],[444,52,432,58,"parentScreens"],[444,65,432,71],[444,66,432,72,"i"],[444,67,432,73],[444,68,432,74],[444,69,432,75],[444,74,432,80],[444,75,432,81],[444,77,432,83],[445,12,433,20,"sameParents"],[445,23,433,31],[445,26,433,34],[445,31,433,39],[446,12,434,20],[447,10,435,16],[448,8,436,12],[449,8,437,12],[449,12,437,16,"sameParents"],[449,23,437,27],[449,25,437,29],[450,10,438,16],[450,17,438,23,"routeName"],[450,26,438,32],[450,31,438,37,"config"],[450,37,438,43],[450,38,438,44,"initialRouteName"],[450,54,438,60],[450,57,438,63,"config"],[450,63,438,69],[450,64,438,70,"initialRouteName"],[450,80,438,86],[450,83,438,89,"undefined"],[450,92,438,98],[451,8,439,12],[452,6,440,8],[453,4,441,4],[454,4,442,4],[454,11,442,11,"undefined"],[454,20,442,20],[455,2,443,0],[455,3,443,1],[456,2,444,0],[457,2,445,0],[458,2,446,0],[458,8,446,6,"createStateObject"],[458,25,446,23],[458,28,446,26,"createStateObject"],[458,29,446,27,"initialRoute"],[458,41,446,39],[458,43,446,41,"route"],[458,48,446,46],[458,50,446,48,"isEmpty"],[458,57,446,55],[458,62,446,60],[459,4,447,4],[459,8,447,8,"isEmpty"],[459,15,447,15],[459,17,447,17],[460,6,448,8],[460,10,448,12,"initialRoute"],[460,22,448,24],[460,24,448,26],[461,8,449,12],[461,15,449,19],[462,10,450,16,"index"],[462,15,450,21],[462,17,450,23],[462,18,450,24],[463,10,451,16,"routes"],[463,16,451,22],[463,18,451,24],[463,19,451,25],[464,12,451,27,"name"],[464,16,451,31],[464,18,451,33,"initialRoute"],[464,30,451,45],[465,12,451,47,"params"],[465,18,451,53],[465,20,451,55,"route"],[465,25,451,60],[465,26,451,61,"params"],[466,10,451,68],[466,11,451,69],[466,13,451,71,"route"],[466,18,451,76],[467,8,452,12],[467,9,452,13],[468,6,453,8],[468,7,453,9],[468,13,454,13],[469,8,455,12],[469,15,455,19],[470,10,456,16,"routes"],[470,16,456,22],[470,18,456,24],[470,19,456,25,"route"],[470,24,456,30],[471,8,457,12],[471,9,457,13],[472,6,458,8],[473,4,459,4],[473,5,459,5],[473,11,460,9],[474,6,461,8],[474,10,461,12,"initialRoute"],[474,22,461,24],[474,24,461,26],[475,8,462,12],[475,15,462,19],[476,10,463,16,"index"],[476,15,463,21],[476,17,463,23],[476,18,463,24],[477,10,464,16,"routes"],[477,16,464,22],[477,18,464,24],[477,19,465,20],[478,12,465,22,"name"],[478,16,465,26],[478,18,465,28,"initialRoute"],[478,30,465,40],[479,12,465,42,"params"],[479,18,465,48],[479,20,465,50,"route"],[479,25,465,55],[479,26,465,56,"params"],[480,10,465,63],[480,11,465,64],[480,13,466,20],[481,12,466,22],[481,15,466,25,"route"],[481,20,466,30],[482,12,466,32,"state"],[482,17,466,37],[482,19,466,39],[483,14,466,41,"routes"],[483,20,466,47],[483,22,466,49],[484,12,466,52],[485,10,466,54],[485,11,466,55],[486,8,468,12],[486,9,468,13],[487,6,469,8],[487,7,469,9],[487,13,470,13],[488,8,471,12],[488,15,471,19],[489,10,472,16,"routes"],[489,16,472,22],[489,18,472,24],[489,19,472,25],[490,12,472,27],[490,15,472,30,"route"],[490,20,472,35],[491,12,472,37,"state"],[491,17,472,42],[491,19,472,44],[492,14,472,46,"routes"],[492,20,472,52],[492,22,472,54],[493,12,472,57],[494,10,472,59],[494,11,472,60],[495,8,473,12],[495,9,473,13],[496,6,474,8],[497,4,475,4],[498,2,476,0],[498,3,476,1],[499,2,477,0],[499,8,477,6,"createNestedStateObject"],[499,31,477,29],[499,34,477,32,"createNestedStateObject"],[499,35,477,33],[500,4,477,35,"path"],[500,8,477,39],[501,4,477,41],[501,7,477,44,"expoURL"],[502,2,477,52],[502,3,477,53],[502,5,477,55,"routes"],[502,11,477,61],[502,13,477,63,"initialRoutes"],[502,26,477,76],[502,28,477,78,"flatConfig"],[502,38,477,88],[502,40,477,90,"hash"],[502,44,477,94],[502,49,477,99],[503,4,478,4],[503,8,478,8,"route"],[503,13,478,13],[503,16,478,16,"routes"],[503,22,478,22],[503,23,478,23,"shift"],[503,28,478,28],[503,29,478,29],[503,30,478,30],[504,4,479,4],[504,10,479,10,"parentScreens"],[504,23,479,23],[504,26,479,26],[504,28,479,28],[505,4,480,4],[505,8,480,8,"initialRoute"],[505,20,480,20],[505,23,480,23,"findInitialRoute"],[505,39,480,39],[505,40,480,40,"route"],[505,45,480,45],[505,46,480,46,"name"],[505,50,480,50],[505,52,480,52,"parentScreens"],[505,65,480,65],[505,67,480,67,"initialRoutes"],[505,80,480,80],[505,81,480,81],[506,4,481,4,"parentScreens"],[506,17,481,17],[506,18,481,18,"push"],[506,22,481,22],[506,23,481,23,"route"],[506,28,481,28],[506,29,481,29,"name"],[506,33,481,33],[506,34,481,34],[507,4,482,4],[507,10,482,10,"state"],[507,15,482,15],[507,18,482,18,"createStateObject"],[507,35,482,35],[507,36,482,36,"initialRoute"],[507,48,482,48],[507,50,482,50,"route"],[507,55,482,55],[507,57,482,57,"routes"],[507,63,482,63],[507,64,482,64,"length"],[507,70,482,70],[507,75,482,75],[507,76,482,76],[507,77,482,77],[508,4,483,4],[508,8,483,8,"routes"],[508,14,483,14],[508,15,483,15,"length"],[508,21,483,21],[508,24,483,24],[508,25,483,25],[508,27,483,27],[509,6,484,8],[509,10,484,12,"nestedState"],[509,21,484,23],[509,24,484,26,"state"],[509,29,484,31],[510,6,485,8],[510,13,485,16,"route"],[510,18,485,21],[510,21,485,24,"routes"],[510,27,485,30],[510,28,485,31,"shift"],[510,33,485,36],[510,34,485,37],[510,35,485,38],[510,37,485,41],[511,8,486,12,"initialRoute"],[511,20,486,24],[511,23,486,27,"findInitialRoute"],[511,39,486,43],[511,40,486,44,"route"],[511,45,486,49],[511,46,486,50,"name"],[511,50,486,54],[511,52,486,56,"parentScreens"],[511,65,486,69],[511,67,486,71,"initialRoutes"],[511,80,486,84],[511,81,486,85],[512,8,487,12],[512,14,487,18,"nestedStateIndex"],[512,30,487,34],[512,33,487,37,"nestedState"],[512,44,487,48],[512,45,487,49,"index"],[512,50,487,54],[512,54,487,58,"nestedState"],[512,65,487,69],[512,66,487,70,"routes"],[512,72,487,76],[512,73,487,77,"length"],[512,79,487,83],[512,82,487,86],[512,83,487,87],[513,8,488,12,"nestedState"],[513,19,488,23],[513,20,488,24,"routes"],[513,26,488,30],[513,27,488,31,"nestedStateIndex"],[513,43,488,47],[513,44,488,48],[513,45,488,49,"state"],[513,50,488,54],[513,53,488,57,"createStateObject"],[513,70,488,74],[513,71,488,75,"initialRoute"],[513,83,488,87],[513,85,488,89,"route"],[513,90,488,94],[513,92,488,96,"routes"],[513,98,488,102],[513,99,488,103,"length"],[513,105,488,109],[513,110,488,114],[513,111,488,115],[513,112,488,116],[514,8,489,12],[514,12,489,16,"routes"],[514,18,489,22],[514,19,489,23,"length"],[514,25,489,29],[514,28,489,32],[514,29,489,33],[514,31,489,35],[515,10,490,16,"nestedState"],[515,21,490,27],[515,24,490,30,"nestedState"],[515,35,490,41],[515,36,490,42,"routes"],[515,42,490,48],[515,43,490,49,"nestedStateIndex"],[515,59,490,65],[515,60,490,66],[515,61,490,67,"state"],[515,66,490,72],[516,8,491,12],[517,8,492,12,"parentScreens"],[517,21,492,25],[517,22,492,26,"push"],[517,26,492,30],[517,27,492,31,"route"],[517,32,492,36],[517,33,492,37,"name"],[517,37,492,41],[517,38,492,42],[518,6,493,8],[519,4,494,4],[520,4,495,4,"route"],[520,9,495,9],[520,12,495,12],[520,13,495,13],[520,14,495,14],[520,16,495,16,"findFocusedRoute_1"],[520,34,495,34],[520,35,495,35,"findFocusedRoute"],[520,51,495,51],[520,53,495,53,"state"],[520,58,495,58],[520,59,495,59],[521,4,496,4],[522,4,497,4,"route"],[522,9,497,9],[522,10,497,10,"path"],[522,14,497,14],[522,17,497,17,"expoURL"],[522,24,497,24],[522,25,497,25,"pathWithoutGroups"],[522,42,497,42],[523,4,498,4],[524,4,499,4],[525,4,500,4],[526,4,501,4],[527,4,502,4],[527,10,502,10,"params"],[527,16,502,16],[527,19,502,19,"expo"],[527,23,502,23],[527,24,502,24,"parseQueryParams"],[527,40,502,40],[527,41,502,41,"path"],[527,45,502,45],[527,47,502,47,"route"],[527,52,502,52],[527,54,502,54,"flatConfig"],[527,64,502,64],[527,67,502,67,"findParseConfigForRoute"],[527,90,502,90],[527,91,502,91,"route"],[527,96,502,96],[527,97,502,97,"name"],[527,101,502,101],[527,103,502,103,"flatConfig"],[527,113,502,113],[527,114,502,114],[527,117,502,117,"undefined"],[527,126,502,126],[527,128,502,128,"hash"],[527,132,502,132],[527,133,502,133],[528,4,503,4],[529,4,504,4],[530,4,505,4],[531,4,506,4],[531,8,506,8,"params"],[531,14,506,14],[531,16,506,16],[532,6,507,8,"route"],[532,11,507,13],[532,12,507,14,"params"],[532,18,507,20],[532,21,507,23],[533,8,507,25],[533,11,507,28,"route"],[533,16,507,33],[533,17,507,34,"params"],[533,23,507,40],[534,8,507,42],[534,11,507,45,"params"],[535,6,507,52],[535,7,507,53],[536,4,508,4],[537,4,509,4],[538,4,510,4],[538,11,510,11,"state"],[538,16,510,16],[539,2,511,0],[539,3,511,1],[540,2,512,0],[541,2,513,0],[542,2,514,0],[543,2,515,0],[544,2,516,0],[545,2,517,0],[546,2,518,0],[547,2,519,0],[548,2,520,0],[549,2,521,0],[550,2,522,0],[551,2,523,0],[552,2,524,0],[553,2,525,0],[554,0,525,0],[554,3]],"functionMap":{"names":["<global>","<anonymous>","desc.get","getStateFromPath","remaining.split.filter.map$argument_0","match.routeNames.map$argument_0","getConfigResources","prepareConfigResources","getInitialRoutes","getNormalizedConfigs","Object.keys.map$argument_0","checkForDuplicatedConfigs","configs.reduce$argument_0","b.every$argument_0","a.every$argument_0","getConfigsWithRegexes","configs.map$argument_0","joinPaths","paths.map$argument_0","matchAgainstConfigs","config.pattern.split.reduce$argument_0","config.routeNames.map$argument_0","configs.find$argument_0","normalizedPath.split.reduce$argument_0","createNormalizedConfigs","Object.keys.forEach$argument_0","createConfigItem","pattern.split.map$argument_0","findParseConfigForRoute","findInitialRoute","createStateObject","createNestedStateObject"],"mappings":"AAA;0ECC;sCCI,2BD;CDG,KC;CDG;gFCC;CDE,IC;CDE;kDCC;CDM;wDCC;CDE;AG4B;iBCiC;SDG;0EEqB,oBF;CHmB;AMS;CNY;AOC;CPa;AQC;CRS;ASC;4CCO,qED;CTgD;AWC;mBCE;6DCM,sBD,YE,sBF;KDQ;CXC;AeC;uBCC;MDO;CfC;kBiBC;yBCC,mBD;cjBE;4BmBC;kECc;aDmB;2CEE;iDCC;iBDG;4BEU;iBFmB;aFM;CnBS;gCwBC;gDCiC;aDG;CxBK;yB0BC;iBCM;SDK;C1Be;gC4BC;C5BO;yB6BE;C7BgB;0B8BG;C9B8B;gC+BC;C/BkC"}},"type":"js/module"}]}