{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":325,"column":44,"index":14026}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"query-string","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":27,"column":33,"index":1227},"end":{"line":27,"column":56,"index":1250}}],"key":"GFSDDT7dIJnvWSebFhtcKgwXBCQ="}},{"name":"./getPathFromState-forks","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":28,"column":26,"index":1279},"end":{"line":28,"column":61,"index":1314}}],"key":"0jhtinFbCJO2FpQ/0MZEN6C03us="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = {\n        enumerable: true,\n        get: function () {\n          return m[k];\n        }\n      };\n    }\n    Object.defineProperty(o, k2, desc);\n  } : function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n  });\n  var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n    Object.defineProperty(o, \"default\", {\n      enumerable: true,\n      value: v\n    });\n  } : function (o, v) {\n    o[\"default\"] = v;\n  });\n  var __importStar = this && this.__importStar || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.appendBaseUrl = exports.getPathDataFromState = exports.getPathFromState = void 0;\n  var queryString = __importStar(require(_dependencyMap[1], \"query-string\"));\n  var expo = __importStar(require(_dependencyMap[2], \"./getPathFromState-forks\"));\n  // END FORK\n  var getActiveRoute = state => {\n    var route = typeof state.index === 'number' ? state.routes[state.index] : state.routes[state.routes.length - 1];\n    if (route.state) {\n      return getActiveRoute(route.state);\n    }\n    return route;\n  };\n  var cachedNormalizedConfigs = [undefined, {}];\n  /**\n   * Utility to serialize a navigation state object to a path string.\n   *\n   * @example\n   * ```js\n   * getPathFromState(\n   *   {\n   *     routes: [\n   *       {\n   *         name: 'Chat',\n   *         params: { author: 'Jane', id: 42 },\n   *       },\n   *     ],\n   *   },\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         stringify: { author: author => author.toLowerCase() }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   *\n   * @param state Navigation state to serialize.\n   * @param options Extra options to fine-tune how to serialize the path.\n   * @returns Path representing the state, e.g. /foo/bar?count=42.\n   */\n  function getPathFromState(state, options) {\n    return getPathDataFromState(state, options).path;\n  }\n  exports.getPathFromState = getPathFromState;\n  function getPathDataFromState(state, options) {\n    if (state == null) {\n      throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");\n    }\n    if (options) {\n      // START FORK\n      expo.validatePathConfig(options);\n      // validatePathConfig(options);\n      // END FORK\n    }\n    // Create a normalized configs object which will be easier to use\n    if (cachedNormalizedConfigs[0] !== options?.screens) {\n      cachedNormalizedConfigs = [options?.screens, options?.screens ? createNormalizedConfigs(options.screens) : {}];\n    }\n    var configs = cachedNormalizedConfigs[1];\n    var path = '/';\n    var current = state;\n    var allParams = {};\n    var _loop = function () {\n      var index = typeof current.index === 'number' ? current.index : 0;\n      var route = current.routes[index];\n      var pattern;\n      var focusedParams;\n      var focusedRoute = getActiveRoute(state);\n      var currentOptions = configs;\n      // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n      var nestedRouteNames = [];\n      var hasNext = true;\n      while (route.name in currentOptions && hasNext) {\n        pattern = currentOptions[route.name].pattern;\n        nestedRouteNames.push(route.name);\n        if (route.params) {\n          var stringify = currentOptions[route.name]?.stringify;\n          // START FORK\n          // This mutates allParams\n          var currentParams = expo.fixCurrentParams(allParams, route, stringify);\n          // const currentParams = Object.fromEntries(\n          //   Object.entries(route.params).map(([key, value]) => [\n          //     key,\n          //     stringify?.[key] ? stringify[key](value) : String(value),\n          //   ])\n          // );\n          // if (pattern) {\n          //   Object.assign(allParams, currentParams);\n          // }\n          // END FORK\n          if (focusedRoute === route) {\n            // If this is the focused route, keep the params for later use\n            // We save it here since it's been stringified already\n            focusedParams = {\n              ...currentParams\n            };\n            pattern?.split('/').filter(p => expo.isDynamicPart(p))\n            // eslint-disable-next-line no-loop-func\n            .forEach(p => {\n              var name = expo.getParamName(p);\n              // Remove the params present in the pattern since we'll only use the rest for query string\n              if (focusedParams) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete focusedParams[name];\n              }\n            });\n          }\n        }\n        // If there is no `screens` property or no nested state, we return pattern\n        if (!currentOptions[route.name].screens || route.state === undefined) {\n          // START FORK\n          // Expo Router allows you to navigate to a (group) and not specify a target screen\n          // This is different from React Navigation, which requires a target screen\n          // We need to handle this case here, by selecting either the index screen or the first screen of the group\n          // IMPORTANT: This does not affect groups that use _layout files with initialRouteNames\n          // Layout files create a new route config. This only affects groups without layouts that have their screens\n          // hoisted.\n          // Example:\n          // - /home/_layout\n          // - /home/(a|b|c)/index          --> Hoisted to /home/_layout navigator\n          // - /home/(a|b|c)/other          --> Hoisted to /home/_layout navigator\n          // - /home/(profile)/me           --> Hoisted to /home/_layout navigator\n          //\n          // route.push('/home/(a)')        --> This should navigate to /home/(a)/index\n          // route.push('/home/(profile)')  --> This should navigate to /home/(profile)/me\n          var screens = currentOptions[route.name].screens;\n          // Determine what screen the user wants to navigate to. If no screen is specified, assume there is an index screen\n          // In the examples above, this ensures that /home/(a) navigates to /home/(a)/index\n          var targetScreen =\n          // This is typed as unknown, so we need to add these extra assertions\n          route.params && 'screen' in route.params && typeof route.params.screen === 'string' ? route.params.screen : 'index';\n          // If the target screen is not in the screens object, default to the first screen\n          // In the examples above, this ensures that /home/(profile) navigates to /home/(profile)/me\n          // As there is no index screen in the group\n          var screen = screens ? screens[targetScreen] ? targetScreen : Object.keys(screens)[0] : undefined;\n          if (screen && screens && currentOptions[route.name].screens?.[screen]) {\n            route = {\n              ...screens[screen],\n              name: screen,\n              key: screen\n            };\n            currentOptions = screens;\n          } else {\n            hasNext = false;\n          }\n          // hasNext = false;\n          // END FORK\n        } else {\n          index = typeof route.state.index === 'number' ? route.state.index : route.state.routes.length - 1;\n          var nextRoute = route.state.routes[index];\n          var nestedConfig = currentOptions[route.name].screens;\n          // if there is config for next route name, we go deeper\n          if (nestedConfig && nextRoute.name in nestedConfig) {\n            route = nextRoute;\n            currentOptions = nestedConfig;\n          } else {\n            // If not, there is no sense in going deeper in config\n            hasNext = false;\n          }\n        }\n      }\n      if (pattern === undefined) {\n        pattern = nestedRouteNames.join('/');\n      }\n      if (currentOptions[route.name] !== undefined) {\n        // START FORK\n        path += expo.getPathWithConventionsCollapsed({\n          ...options,\n          pattern,\n          route,\n          params: allParams,\n          initialRouteName: configs[route.name]?.initialRouteName\n        });\n        // path += pattern\n        //   .split('/')\n        //   .map((p) => {\n        //     const name = getParamName(p);\n        //     // We don't know what to show for wildcard patterns\n        //     // Showing the route name seems ok, though whatever we show here will be incorrect\n        //     // Since the page doesn't actually exist\n        //     if (p === '*') {\n        //       return route.name;\n        //     }\n        //     // If the path has a pattern for a param, put the param in the path\n        //     if (p.startsWith(':')) {\n        //       const value = allParams[name];\n        //       if (value === undefined && p.endsWith('?')) {\n        //         // Optional params without value assigned in route.params should be ignored\n        //         return '';\n        //       }\n        //       // Valid characters according to\n        //       // https://datatracker.ietf.org/doc/html/rfc3986#section-3.3 (see pchar definition)\n        //       return String(value).replace(/[^A-Za-z0-9\\-._~!$&'()*+,;=:@]/g, (char) =>\n        //         encodeURIComponent(char)\n        //       );\n        //     }\n        //     return encodeURIComponent(p);\n        //   })\n        //   .join('/');\n        // } else {\n      } else if (!route.name.startsWith('+')) {\n        path += encodeURIComponent(route.name);\n      }\n      // END FORK\n      if (!focusedParams) {\n        focusedParams = focusedRoute.params;\n      }\n      if (route.state) {\n        path += '/';\n      } else if (focusedParams) {\n        for (var param in focusedParams) {\n          if (focusedParams[param] === 'undefined') {\n            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n            delete focusedParams[param];\n          }\n        }\n        // START FORK\n        delete focusedParams['#'];\n        // END FORK\n        var query = queryString.stringify(focusedParams, {\n          sort: false\n        });\n        if (query) {\n          path += `?${query}`;\n        }\n      }\n      current = route.state;\n    };\n    while (current) {\n      _loop();\n    }\n    // Remove multiple as well as trailing slashes\n    path = path.replace(/\\/+/g, '/');\n    path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n    // Include the root path if specified\n    if (options?.path) {\n      path = joinPaths(options.path, path);\n    }\n    // START FORK\n    path = expo.appendBaseUrl(path);\n    if (allParams['#']) {\n      path += `#${allParams['#']}`;\n    }\n    // END FORK\n    // START FORK\n    return {\n      path,\n      params: allParams\n    };\n    // END FORK\n  }\n  exports.getPathDataFromState = getPathDataFromState;\n  // const getParamName = (pattern: string) => pattern.replace(/^:/, '').replace(/\\?$/, '');\n  var joinPaths = function () {\n    for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n      paths[_key] = arguments[_key];\n    }\n    return [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n  };\n  var createConfigItem = (config, parentPattern) => {\n    if (typeof config === 'string') {\n      // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n      var _pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n      return {\n        pattern: _pattern\n      };\n    }\n    if (config.exact && config.path === undefined) {\n      throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n    }\n    // If an object is specified as the value (e.g. Foo: { ... }),\n    // It can have `path` property and `screens` prop which has nested configs\n    var pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n    var screens = config.screens ? createNormalizedConfigs(config.screens, pattern) : undefined;\n    return {\n      // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n      pattern: pattern?.split('/').filter(Boolean).join('/'),\n      stringify: config.stringify,\n      screens\n    };\n  };\n  var createNormalizedConfigs = (options, pattern) => Object.fromEntries(Object.entries(options).map(_ref => {\n    var _ref2 = _slicedToArray(_ref, 2),\n      name = _ref2[0],\n      c = _ref2[1];\n    var result = createConfigItem(c, pattern);\n    return [name, result];\n  }));\n  function appendBaseUrl(path) {\n    var baseUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    if (process.env.NODE_ENV !== 'development') {\n      if (baseUrl) {\n        return `/${baseUrl.replace(/^\\/+/, '').replace(/\\/$/, '')}${path}`;\n      }\n    }\n    return path;\n  }\n  exports.appendBaseUrl = appendBaseUrl;\n});","lineCount":338,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"require"],[4,30,1,13],[4,31,1,13,"_dependencyMap"],[4,45,1,13],[5,2,2,0],[5,6,2,4,"__createBinding"],[5,21,2,19],[5,24,2,23],[5,28,2,27],[5,32,2,31],[5,36,2,35],[5,37,2,36,"__createBinding"],[5,52,2,51],[5,57,2,57,"Object"],[5,63,2,63],[5,64,2,64,"create"],[5,70,2,70],[5,73,2,74],[5,83,2,83,"o"],[5,84,2,84],[5,86,2,86,"m"],[5,87,2,87],[5,89,2,89,"k"],[5,90,2,90],[5,92,2,92,"k2"],[5,94,2,94],[5,96,2,96],[6,4,3,4],[6,8,3,8,"k2"],[6,10,3,10],[6,15,3,15,"undefined"],[6,24,3,24],[6,26,3,26,"k2"],[6,28,3,28],[6,31,3,31,"k"],[6,32,3,32],[7,4,4,4],[7,8,4,8,"desc"],[7,12,4,12],[7,15,4,15,"Object"],[7,21,4,21],[7,22,4,22,"getOwnPropertyDescriptor"],[7,46,4,46],[7,47,4,47,"m"],[7,48,4,48],[7,50,4,50,"k"],[7,51,4,51],[7,52,4,52],[8,4,5,4],[8,8,5,8],[8,9,5,9,"desc"],[8,13,5,13],[8,18,5,18],[8,23,5,23],[8,27,5,27,"desc"],[8,31,5,31],[8,34,5,34],[8,35,5,35,"m"],[8,36,5,36],[8,37,5,37,"__esModule"],[8,47,5,47],[8,50,5,50,"desc"],[8,54,5,54],[8,55,5,55,"writable"],[8,63,5,63],[8,67,5,67,"desc"],[8,71,5,71],[8,72,5,72,"configurable"],[8,84,5,84],[8,85,5,85],[8,87,5,87],[9,6,6,6,"desc"],[9,10,6,10],[9,13,6,13],[10,8,6,15,"enumerable"],[10,18,6,25],[10,20,6,27],[10,24,6,31],[11,8,6,33,"get"],[11,11,6,36],[11,13,6,38],[11,22,6,38,"get"],[11,23,6,38],[11,25,6,49],[12,10,6,51],[12,17,6,58,"m"],[12,18,6,59],[12,19,6,60,"k"],[12,20,6,61],[12,21,6,62],[13,8,6,64],[14,6,6,66],[14,7,6,67],[15,4,7,4],[16,4,8,4,"Object"],[16,10,8,10],[16,11,8,11,"defineProperty"],[16,25,8,25],[16,26,8,26,"o"],[16,27,8,27],[16,29,8,29,"k2"],[16,31,8,31],[16,33,8,33,"desc"],[16,37,8,37],[16,38,8,38],[17,2,9,0],[17,3,9,1],[17,6,9,6],[17,16,9,15,"o"],[17,17,9,16],[17,19,9,18,"m"],[17,20,9,19],[17,22,9,21,"k"],[17,23,9,22],[17,25,9,24,"k2"],[17,27,9,26],[17,29,9,28],[18,4,10,4],[18,8,10,8,"k2"],[18,10,10,10],[18,15,10,15,"undefined"],[18,24,10,24],[18,26,10,26,"k2"],[18,28,10,28],[18,31,10,31,"k"],[18,32,10,32],[19,4,11,4,"o"],[19,5,11,5],[19,6,11,6,"k2"],[19,8,11,8],[19,9,11,9],[19,12,11,12,"m"],[19,13,11,13],[19,14,11,14,"k"],[19,15,11,15],[19,16,11,16],[20,2,12,0],[20,3,12,2],[20,4,12,3],[21,2,13,0],[21,6,13,4,"__setModuleDefault"],[21,24,13,22],[21,27,13,26],[21,31,13,30],[21,35,13,34],[21,39,13,38],[21,40,13,39,"__setModuleDefault"],[21,58,13,57],[21,63,13,63,"Object"],[21,69,13,69],[21,70,13,70,"create"],[21,76,13,76],[21,79,13,80],[21,89,13,89,"o"],[21,90,13,90],[21,92,13,92,"v"],[21,93,13,93],[21,95,13,95],[22,4,14,4,"Object"],[22,10,14,10],[22,11,14,11,"defineProperty"],[22,25,14,25],[22,26,14,26,"o"],[22,27,14,27],[22,29,14,29],[22,38,14,38],[22,40,14,40],[23,6,14,42,"enumerable"],[23,16,14,52],[23,18,14,54],[23,22,14,58],[24,6,14,60,"value"],[24,11,14,65],[24,13,14,67,"v"],[25,4,14,69],[25,5,14,70],[25,6,14,71],[26,2,15,0],[26,3,15,1],[26,6,15,5],[26,16,15,14,"o"],[26,17,15,15],[26,19,15,17,"v"],[26,20,15,18],[26,22,15,20],[27,4,16,4,"o"],[27,5,16,5],[27,6,16,6],[27,15,16,15],[27,16,16,16],[27,19,16,19,"v"],[27,20,16,20],[28,2,17,0],[28,3,17,1],[28,4,17,2],[29,2,18,0],[29,6,18,4,"__importStar"],[29,18,18,16],[29,21,18,20],[29,25,18,24],[29,29,18,28],[29,33,18,32],[29,34,18,33,"__importStar"],[29,46,18,45],[29,50,18,50],[29,60,18,60,"mod"],[29,63,18,63],[29,65,18,65],[30,4,19,4],[30,8,19,8,"mod"],[30,11,19,11],[30,15,19,15,"mod"],[30,18,19,18],[30,19,19,19,"__esModule"],[30,29,19,29],[30,31,19,31],[30,38,19,38,"mod"],[30,41,19,41],[31,4,20,4],[31,8,20,8,"result"],[31,14,20,14],[31,17,20,17],[31,18,20,18],[31,19,20,19],[32,4,21,4],[32,8,21,8,"mod"],[32,11,21,11],[32,15,21,15],[32,19,21,19],[32,21,21,21],[32,26,21,26],[32,30,21,30,"k"],[32,31,21,31],[32,35,21,35,"mod"],[32,38,21,38],[32,40,21,40],[32,44,21,44,"k"],[32,45,21,45],[32,50,21,50],[32,59,21,59],[32,63,21,63,"Object"],[32,69,21,69],[32,70,21,70,"prototype"],[32,79,21,79],[32,80,21,80,"hasOwnProperty"],[32,94,21,94],[32,95,21,95,"call"],[32,99,21,99],[32,100,21,100,"mod"],[32,103,21,103],[32,105,21,105,"k"],[32,106,21,106],[32,107,21,107],[32,109,21,109,"__createBinding"],[32,124,21,124],[32,125,21,125,"result"],[32,131,21,131],[32,133,21,133,"mod"],[32,136,21,136],[32,138,21,138,"k"],[32,139,21,139],[32,140,21,140],[33,4,22,4,"__setModuleDefault"],[33,22,22,22],[33,23,22,23,"result"],[33,29,22,29],[33,31,22,31,"mod"],[33,34,22,34],[33,35,22,35],[34,4,23,4],[34,11,23,11,"result"],[34,17,23,17],[35,2,24,0],[35,3,24,1],[36,2,25,0,"Object"],[36,8,25,6],[36,9,25,7,"defineProperty"],[36,23,25,21],[36,24,25,22,"exports"],[36,31,25,29],[36,33,25,31],[36,45,25,43],[36,47,25,45],[37,4,25,47,"value"],[37,9,25,52],[37,11,25,54],[38,2,25,59],[38,3,25,60],[38,4,25,61],[39,2,26,0,"exports"],[39,9,26,7],[39,10,26,8,"appendBaseUrl"],[39,23,26,21],[39,26,26,24,"exports"],[39,33,26,31],[39,34,26,32,"getPathDataFromState"],[39,54,26,52],[39,57,26,55,"exports"],[39,64,26,62],[39,65,26,63,"getPathFromState"],[39,81,26,79],[39,84,26,82],[39,89,26,87],[39,90,26,88],[40,2,27,0],[40,6,27,6,"queryString"],[40,17,27,17],[40,20,27,20,"__importStar"],[40,32,27,32],[40,33,27,33,"require"],[40,40,27,40],[40,41,27,40,"_dependencyMap"],[40,55,27,40],[40,74,27,55],[40,75,27,56],[40,76,27,57],[41,2,28,0],[41,6,28,6,"expo"],[41,10,28,10],[41,13,28,13,"__importStar"],[41,25,28,25],[41,26,28,26,"require"],[41,33,28,33],[41,34,28,33,"_dependencyMap"],[41,48,28,33],[41,79,28,60],[41,80,28,61],[41,81,28,62],[42,2,29,0],[43,2,30,0],[43,6,30,6,"getActiveRoute"],[43,20,30,20],[43,23,30,24,"state"],[43,28,30,29],[43,32,30,34],[44,4,31,4],[44,8,31,10,"route"],[44,13,31,15],[44,16,31,18],[44,23,31,25,"state"],[44,28,31,30],[44,29,31,31,"index"],[44,34,31,36],[44,39,31,41],[44,47,31,49],[44,50,32,10,"state"],[44,55,32,15],[44,56,32,16,"routes"],[44,62,32,22],[44,63,32,23,"state"],[44,68,32,28],[44,69,32,29,"index"],[44,74,32,34],[44,75,32,35],[44,78,33,10,"state"],[44,83,33,15],[44,84,33,16,"routes"],[44,90,33,22],[44,91,33,23,"state"],[44,96,33,28],[44,97,33,29,"routes"],[44,103,33,35],[44,104,33,36,"length"],[44,110,33,42],[44,113,33,45],[44,114,33,46],[44,115,33,47],[45,4,34,4],[45,8,34,8,"route"],[45,13,34,13],[45,14,34,14,"state"],[45,19,34,19],[45,21,34,21],[46,6,35,8],[46,13,35,15,"getActiveRoute"],[46,27,35,29],[46,28,35,30,"route"],[46,33,35,35],[46,34,35,36,"state"],[46,39,35,41],[46,40,35,42],[47,4,36,4],[48,4,37,4],[48,11,37,11,"route"],[48,16,37,16],[49,2,38,0],[49,3,38,1],[50,2,39,0],[50,6,39,4,"cachedNormalizedConfigs"],[50,29,39,27],[50,32,39,30],[50,33,40,4,"undefined"],[50,42,40,13],[50,44,41,4],[50,45,41,5],[50,46,41,6],[50,47,42,1],[51,2,43,0],[52,0,44,0],[53,0,45,0],[54,0,46,0],[55,0,47,0],[56,0,48,0],[57,0,49,0],[58,0,50,0],[59,0,51,0],[60,0,52,0],[61,0,53,0],[62,0,54,0],[63,0,55,0],[64,0,56,0],[65,0,57,0],[66,0,58,0],[67,0,59,0],[68,0,60,0],[69,0,61,0],[70,0,62,0],[71,0,63,0],[72,0,64,0],[73,0,65,0],[74,0,66,0],[75,0,67,0],[76,0,68,0],[77,0,69,0],[78,0,70,0],[79,0,71,0],[80,2,72,0],[80,11,72,9,"getPathFromState"],[80,27,72,25,"getPathFromState"],[80,28,72,26,"state"],[80,33,72,31],[80,35,72,33,"options"],[80,42,72,40],[80,44,72,42],[81,4,73,4],[81,11,73,11,"getPathDataFromState"],[81,31,73,31],[81,32,73,32,"state"],[81,37,73,37],[81,39,73,39,"options"],[81,46,73,46],[81,47,73,47],[81,48,73,48,"path"],[81,52,73,52],[82,2,74,0],[83,2,75,0,"exports"],[83,9,75,7],[83,10,75,8,"getPathFromState"],[83,26,75,24],[83,29,75,27,"getPathFromState"],[83,45,75,43],[84,2,76,0],[84,11,76,9,"getPathDataFromState"],[84,31,76,29,"getPathDataFromState"],[84,32,76,30,"state"],[84,37,76,35],[84,39,76,37,"options"],[84,46,76,44],[84,48,76,46],[85,4,77,4],[85,8,77,8,"state"],[85,13,77,13],[85,17,77,17],[85,21,77,21],[85,23,77,23],[86,6,78,8],[86,12,78,14,"Error"],[86,17,78,19],[86,18,78,20],[86,97,78,99],[86,98,78,100],[87,4,79,4],[88,4,80,4],[88,8,80,8,"options"],[88,15,80,15],[88,17,80,17],[89,6,81,8],[90,6,82,8,"expo"],[90,10,82,12],[90,11,82,13,"validatePathConfig"],[90,29,82,31],[90,30,82,32,"options"],[90,37,82,39],[90,38,82,40],[91,6,83,8],[92,6,84,8],[93,4,85,4],[94,4,86,4],[95,4,87,4],[95,8,87,8,"cachedNormalizedConfigs"],[95,31,87,31],[95,32,87,32],[95,33,87,33],[95,34,87,34],[95,39,87,39,"options"],[95,46,87,46],[95,48,87,48,"screens"],[95,55,87,55],[95,57,87,57],[96,6,88,8,"cachedNormalizedConfigs"],[96,29,88,31],[96,32,88,34],[96,33,89,12,"options"],[96,40,89,19],[96,42,89,21,"screens"],[96,49,89,28],[96,51,90,12,"options"],[96,58,90,19],[96,60,90,21,"screens"],[96,67,90,28],[96,70,90,31,"createNormalizedConfigs"],[96,93,90,54],[96,94,90,55,"options"],[96,101,90,62],[96,102,90,63,"screens"],[96,109,90,70],[96,110,90,71],[96,113,90,74],[96,114,90,75],[96,115,90,76],[96,116,91,9],[97,4,92,4],[98,4,93,4],[98,8,93,10,"configs"],[98,15,93,17],[98,18,93,20,"cachedNormalizedConfigs"],[98,41,93,43],[98,42,93,44],[98,43,93,45],[98,44,93,46],[99,4,94,4],[99,8,94,8,"path"],[99,12,94,12],[99,15,94,15],[99,18,94,18],[100,4,95,4],[100,8,95,8,"current"],[100,15,95,15],[100,18,95,18,"state"],[100,23,95,23],[101,4,96,4],[101,8,96,10,"allParams"],[101,17,96,19],[101,20,96,22],[101,21,96,23],[101,22,96,24],[102,4,96,25],[102,8,96,25,"_loop"],[102,13,96,25],[102,25,96,25,"_loop"],[102,26,96,25],[102,28,97,20],[103,6,98,8],[103,10,98,12,"index"],[103,15,98,17],[103,18,98,20],[103,25,98,27,"current"],[103,32,98,34],[103,33,98,35,"index"],[103,38,98,40],[103,43,98,45],[103,51,98,53],[103,54,98,56,"current"],[103,61,98,63],[103,62,98,64,"index"],[103,67,98,69],[103,70,98,72],[103,71,98,73],[104,6,99,8],[104,10,99,12,"route"],[104,15,99,17],[104,18,99,20,"current"],[104,25,99,27],[104,26,99,28,"routes"],[104,32,99,34],[104,33,99,35,"index"],[104,38,99,40],[104,39,99,41],[105,6,100,8],[105,10,100,12,"pattern"],[105,17,100,19],[106,6,101,8],[106,10,101,12,"focusedParams"],[106,23,101,25],[107,6,102,8],[107,10,102,14,"focusedRoute"],[107,22,102,26],[107,25,102,29,"getActiveRoute"],[107,39,102,43],[107,40,102,44,"state"],[107,45,102,49],[107,46,102,50],[108,6,103,8],[108,10,103,12,"currentOptions"],[108,24,103,26],[108,27,103,29,"configs"],[108,34,103,36],[109,6,104,8],[110,6,105,8],[110,10,105,14,"nestedRouteNames"],[110,26,105,30],[110,29,105,33],[110,31,105,35],[111,6,106,8],[111,10,106,12,"hasNext"],[111,17,106,19],[111,20,106,22],[111,24,106,26],[112,6,107,8],[112,13,107,15,"route"],[112,18,107,20],[112,19,107,21,"name"],[112,23,107,25],[112,27,107,29,"currentOptions"],[112,41,107,43],[112,45,107,47,"hasNext"],[112,52,107,54],[112,54,107,56],[113,8,108,12,"pattern"],[113,15,108,19],[113,18,108,22,"currentOptions"],[113,32,108,36],[113,33,108,37,"route"],[113,38,108,42],[113,39,108,43,"name"],[113,43,108,47],[113,44,108,48],[113,45,108,49,"pattern"],[113,52,108,56],[114,8,109,12,"nestedRouteNames"],[114,24,109,28],[114,25,109,29,"push"],[114,29,109,33],[114,30,109,34,"route"],[114,35,109,39],[114,36,109,40,"name"],[114,40,109,44],[114,41,109,45],[115,8,110,12],[115,12,110,16,"route"],[115,17,110,21],[115,18,110,22,"params"],[115,24,110,28],[115,26,110,30],[116,10,111,16],[116,14,111,22,"stringify"],[116,23,111,31],[116,26,111,34,"currentOptions"],[116,40,111,48],[116,41,111,49,"route"],[116,46,111,54],[116,47,111,55,"name"],[116,51,111,59],[116,52,111,60],[116,54,111,62,"stringify"],[116,63,111,71],[117,10,112,16],[118,10,113,16],[119,10,114,16],[119,14,114,22,"currentParams"],[119,27,114,35],[119,30,114,38,"expo"],[119,34,114,42],[119,35,114,43,"fixCurrentParams"],[119,51,114,59],[119,52,114,60,"allParams"],[119,61,114,69],[119,63,114,71,"route"],[119,68,114,76],[119,70,114,78,"stringify"],[119,79,114,87],[119,80,114,88],[120,10,115,16],[121,10,116,16],[122,10,117,16],[123,10,118,16],[124,10,119,16],[125,10,120,16],[126,10,121,16],[127,10,122,16],[128,10,123,16],[129,10,124,16],[130,10,125,16],[130,14,125,20,"focusedRoute"],[130,26,125,32],[130,31,125,37,"route"],[130,36,125,42],[130,38,125,44],[131,12,126,20],[132,12,127,20],[133,12,128,20,"focusedParams"],[133,25,128,33],[133,28,128,36],[134,14,128,38],[134,17,128,41,"currentParams"],[135,12,128,55],[135,13,128,56],[136,12,129,20,"pattern"],[136,19,129,27],[136,21,130,26,"split"],[136,26,130,31],[136,27,130,32],[136,30,130,35],[136,31,130,36],[136,32,131,25,"filter"],[136,38,131,31],[136,39,131,33,"p"],[136,40,131,34],[136,44,131,39,"expo"],[136,48,131,43],[136,49,131,44,"isDynamicPart"],[136,62,131,57],[136,63,131,58,"p"],[136,64,131,59],[136,65,131,60],[137,12,132,24],[138,12,132,24],[138,13,133,25,"forEach"],[138,20,133,32],[138,21,133,34,"p"],[138,22,133,35],[138,26,133,40],[139,14,134,24],[139,18,134,30,"name"],[139,22,134,34],[139,25,134,37,"expo"],[139,29,134,41],[139,30,134,42,"getParamName"],[139,42,134,54],[139,43,134,55,"p"],[139,44,134,56],[139,45,134,57],[140,14,135,24],[141,14,136,24],[141,18,136,28,"focusedParams"],[141,31,136,41],[141,33,136,43],[142,16,137,28],[143,16,138,28],[143,23,138,35,"focusedParams"],[143,36,138,48],[143,37,138,49,"name"],[143,41,138,53],[143,42,138,54],[144,14,139,24],[145,12,140,20],[145,13,140,21],[145,14,140,22],[146,10,141,16],[147,8,142,12],[148,8,143,12],[149,8,144,12],[149,12,144,16],[149,13,144,17,"currentOptions"],[149,27,144,31],[149,28,144,32,"route"],[149,33,144,37],[149,34,144,38,"name"],[149,38,144,42],[149,39,144,43],[149,40,144,44,"screens"],[149,47,144,51],[149,51,144,55,"route"],[149,56,144,60],[149,57,144,61,"state"],[149,62,144,66],[149,67,144,71,"undefined"],[149,76,144,80],[149,78,144,82],[150,10,145,16],[151,10,146,16],[152,10,147,16],[153,10,148,16],[154,10,149,16],[155,10,150,16],[156,10,151,16],[157,10,152,16],[158,10,153,16],[159,10,154,16],[160,10,155,16],[161,10,156,16],[162,10,157,16],[163,10,158,16],[164,10,159,16],[165,10,160,16],[165,14,160,22,"screens"],[165,21,160,29],[165,24,160,32,"currentOptions"],[165,38,160,46],[165,39,160,47,"route"],[165,44,160,52],[165,45,160,53,"name"],[165,49,160,57],[165,50,160,58],[165,51,160,59,"screens"],[165,58,160,66],[166,10,161,16],[167,10,162,16],[168,10,163,16],[168,14,163,22,"targetScreen"],[168,26,163,34],[169,10,164,16],[170,10,165,16,"route"],[170,15,165,21],[170,16,165,22,"params"],[170,22,165,28],[170,26,165,32],[170,34,165,40],[170,38,165,44,"route"],[170,43,165,49],[170,44,165,50,"params"],[170,50,165,56],[170,54,165,60],[170,61,165,67,"route"],[170,66,165,72],[170,67,165,73,"params"],[170,73,165,79],[170,74,165,80,"screen"],[170,80,165,86],[170,85,165,91],[170,93,165,99],[170,96,166,22,"route"],[170,101,166,27],[170,102,166,28,"params"],[170,108,166,34],[170,109,166,35,"screen"],[170,115,166,41],[170,118,167,22],[170,125,167,29],[171,10,168,16],[172,10,169,16],[173,10,170,16],[174,10,171,16],[174,14,171,22,"screen"],[174,20,171,28],[174,23,171,31,"screens"],[174,30,171,38],[174,33,172,22,"screens"],[174,40,172,29],[174,41,172,30,"targetScreen"],[174,53,172,42],[174,54,172,43],[174,57,173,26,"targetScreen"],[174,69,173,38],[174,72,174,26,"Object"],[174,78,174,32],[174,79,174,33,"keys"],[174,83,174,37],[174,84,174,38,"screens"],[174,91,174,45],[174,92,174,46],[174,93,174,47],[174,94,174,48],[174,95,174,49],[174,98,175,22,"undefined"],[174,107,175,31],[175,10,176,16],[175,14,176,20,"screen"],[175,20,176,26],[175,24,176,30,"screens"],[175,31,176,37],[175,35,176,41,"currentOptions"],[175,49,176,55],[175,50,176,56,"route"],[175,55,176,61],[175,56,176,62,"name"],[175,60,176,66],[175,61,176,67],[175,62,176,68,"screens"],[175,69,176,75],[175,72,176,78,"screen"],[175,78,176,84],[175,79,176,85],[175,81,176,87],[176,12,177,20,"route"],[176,17,177,25],[176,20,177,28],[177,14,177,30],[177,17,177,33,"screens"],[177,24,177,40],[177,25,177,41,"screen"],[177,31,177,47],[177,32,177,48],[178,14,177,50,"name"],[178,18,177,54],[178,20,177,56,"screen"],[178,26,177,62],[179,14,177,64,"key"],[179,17,177,67],[179,19,177,69,"screen"],[180,12,177,76],[180,13,177,77],[181,12,178,20,"currentOptions"],[181,26,178,34],[181,29,178,37,"screens"],[181,36,178,44],[182,10,179,16],[182,11,179,17],[182,17,180,21],[183,12,181,20,"hasNext"],[183,19,181,27],[183,22,181,30],[183,27,181,35],[184,10,182,16],[185,10,183,16],[186,10,184,16],[187,8,185,12],[187,9,185,13],[187,15,186,17],[188,10,187,16,"index"],[188,15,187,21],[188,18,188,20],[188,25,188,27,"route"],[188,30,188,32],[188,31,188,33,"state"],[188,36,188,38],[188,37,188,39,"index"],[188,42,188,44],[188,47,188,49],[188,55,188,57],[188,58,188,60,"route"],[188,63,188,65],[188,64,188,66,"state"],[188,69,188,71],[188,70,188,72,"index"],[188,75,188,77],[188,78,188,80,"route"],[188,83,188,85],[188,84,188,86,"state"],[188,89,188,91],[188,90,188,92,"routes"],[188,96,188,98],[188,97,188,99,"length"],[188,103,188,105],[188,106,188,108],[188,107,188,109],[189,10,189,16],[189,14,189,22,"nextRoute"],[189,23,189,31],[189,26,189,34,"route"],[189,31,189,39],[189,32,189,40,"state"],[189,37,189,45],[189,38,189,46,"routes"],[189,44,189,52],[189,45,189,53,"index"],[189,50,189,58],[189,51,189,59],[190,10,190,16],[190,14,190,22,"nestedConfig"],[190,26,190,34],[190,29,190,37,"currentOptions"],[190,43,190,51],[190,44,190,52,"route"],[190,49,190,57],[190,50,190,58,"name"],[190,54,190,62],[190,55,190,63],[190,56,190,64,"screens"],[190,63,190,71],[191,10,191,16],[192,10,192,16],[192,14,192,20,"nestedConfig"],[192,26,192,32],[192,30,192,36,"nextRoute"],[192,39,192,45],[192,40,192,46,"name"],[192,44,192,50],[192,48,192,54,"nestedConfig"],[192,60,192,66],[192,62,192,68],[193,12,193,20,"route"],[193,17,193,25],[193,20,193,28,"nextRoute"],[193,29,193,37],[194,12,194,20,"currentOptions"],[194,26,194,34],[194,29,194,37,"nestedConfig"],[194,41,194,49],[195,10,195,16],[195,11,195,17],[195,17,196,21],[196,12,197,20],[197,12,198,20,"hasNext"],[197,19,198,27],[197,22,198,30],[197,27,198,35],[198,10,199,16],[199,8,200,12],[200,6,201,8],[201,6,202,8],[201,10,202,12,"pattern"],[201,17,202,19],[201,22,202,24,"undefined"],[201,31,202,33],[201,33,202,35],[202,8,203,12,"pattern"],[202,15,203,19],[202,18,203,22,"nestedRouteNames"],[202,34,203,38],[202,35,203,39,"join"],[202,39,203,43],[202,40,203,44],[202,43,203,47],[202,44,203,48],[203,6,204,8],[204,6,205,8],[204,10,205,12,"currentOptions"],[204,24,205,26],[204,25,205,27,"route"],[204,30,205,32],[204,31,205,33,"name"],[204,35,205,37],[204,36,205,38],[204,41,205,43,"undefined"],[204,50,205,52],[204,52,205,54],[205,8,206,12],[206,8,207,12,"path"],[206,12,207,16],[206,16,207,20,"expo"],[206,20,207,24],[206,21,207,25,"getPathWithConventionsCollapsed"],[206,52,207,56],[206,53,207,57],[207,10,208,16],[207,13,208,19,"options"],[207,20,208,26],[208,10,209,16,"pattern"],[208,17,209,23],[209,10,210,16,"route"],[209,15,210,21],[210,10,211,16,"params"],[210,16,211,22],[210,18,211,24,"allParams"],[210,27,211,33],[211,10,212,16,"initialRouteName"],[211,26,212,32],[211,28,212,34,"configs"],[211,35,212,41],[211,36,212,42,"route"],[211,41,212,47],[211,42,212,48,"name"],[211,46,212,52],[211,47,212,53],[211,49,212,55,"initialRouteName"],[212,8,213,12],[212,9,213,13],[212,10,213,14],[213,8,214,12],[214,8,215,12],[215,8,216,12],[216,8,217,12],[217,8,218,12],[218,8,219,12],[219,8,220,12],[220,8,221,12],[221,8,222,12],[222,8,223,12],[223,8,224,12],[224,8,225,12],[225,8,226,12],[226,8,227,12],[227,8,228,12],[228,8,229,12],[229,8,230,12],[230,8,231,12],[231,8,232,12],[232,8,233,12],[233,8,234,12],[234,8,235,12],[235,8,236,12],[236,8,237,12],[237,8,238,12],[238,8,239,12],[239,8,240,12],[240,6,241,8],[240,7,241,9],[240,13,242,13],[240,17,242,17],[240,18,242,18,"route"],[240,23,242,23],[240,24,242,24,"name"],[240,28,242,28],[240,29,242,29,"startsWith"],[240,39,242,39],[240,40,242,40],[240,43,242,43],[240,44,242,44],[240,46,242,46],[241,8,243,12,"path"],[241,12,243,16],[241,16,243,20,"encodeURIComponent"],[241,34,243,38],[241,35,243,39,"route"],[241,40,243,44],[241,41,243,45,"name"],[241,45,243,49],[241,46,243,50],[242,6,244,8],[243,6,245,8],[244,6,246,8],[244,10,246,12],[244,11,246,13,"focusedParams"],[244,24,246,26],[244,26,246,28],[245,8,247,12,"focusedParams"],[245,21,247,25],[245,24,247,28,"focusedRoute"],[245,36,247,40],[245,37,247,41,"params"],[245,43,247,47],[246,6,248,8],[247,6,249,8],[247,10,249,12,"route"],[247,15,249,17],[247,16,249,18,"state"],[247,21,249,23],[247,23,249,25],[248,8,250,12,"path"],[248,12,250,16],[248,16,250,20],[248,19,250,23],[249,6,251,8],[249,7,251,9],[249,13,252,13],[249,17,252,17,"focusedParams"],[249,30,252,30],[249,32,252,32],[250,8,253,12],[250,13,253,17],[250,17,253,23,"param"],[250,22,253,28],[250,26,253,32,"focusedParams"],[250,39,253,45],[250,41,253,47],[251,10,254,16],[251,14,254,20,"focusedParams"],[251,27,254,33],[251,28,254,34,"param"],[251,33,254,39],[251,34,254,40],[251,39,254,45],[251,50,254,56],[251,52,254,58],[252,12,255,20],[253,12,256,20],[253,19,256,27,"focusedParams"],[253,32,256,40],[253,33,256,41,"param"],[253,38,256,46],[253,39,256,47],[254,10,257,16],[255,8,258,12],[256,8,259,12],[257,8,260,12],[257,15,260,19,"focusedParams"],[257,28,260,32],[257,29,260,33],[257,32,260,36],[257,33,260,37],[258,8,261,12],[259,8,262,12],[259,12,262,18,"query"],[259,17,262,23],[259,20,262,26,"queryString"],[259,31,262,37],[259,32,262,38,"stringify"],[259,41,262,47],[259,42,262,48,"focusedParams"],[259,55,262,61],[259,57,262,63],[260,10,262,65,"sort"],[260,14,262,69],[260,16,262,71],[261,8,262,77],[261,9,262,78],[261,10,262,79],[262,8,263,12],[262,12,263,16,"query"],[262,17,263,21],[262,19,263,23],[263,10,264,16,"path"],[263,14,264,20],[263,18,264,24],[263,22,264,28,"query"],[263,27,264,33],[263,29,264,35],[264,8,265,12],[265,6,266,8],[266,6,267,8,"current"],[266,13,267,15],[266,16,267,18,"route"],[266,21,267,23],[266,22,267,24,"state"],[266,27,267,29],[267,4,268,4],[267,5,268,5],[268,4,97,4],[268,11,97,11,"current"],[268,18,97,18],[269,6,97,18,"_loop"],[269,11,97,18],[270,4,97,18],[271,4,269,4],[272,4,270,4,"path"],[272,8,270,8],[272,11,270,11,"path"],[272,15,270,15],[272,16,270,16,"replace"],[272,23,270,23],[272,24,270,24],[272,30,270,30],[272,32,270,32],[272,35,270,35],[272,36,270,36],[273,4,271,4,"path"],[273,8,271,8],[273,11,271,11,"path"],[273,15,271,15],[273,16,271,16,"length"],[273,22,271,22],[273,25,271,25],[273,26,271,26],[273,29,271,29,"path"],[273,33,271,33],[273,34,271,34,"replace"],[273,41,271,41],[273,42,271,42],[273,47,271,47],[273,49,271,49],[273,51,271,51],[273,52,271,52],[273,55,271,55,"path"],[273,59,271,59],[274,4,272,4],[275,4,273,4],[275,8,273,8,"options"],[275,15,273,15],[275,17,273,17,"path"],[275,21,273,21],[275,23,273,23],[276,6,274,8,"path"],[276,10,274,12],[276,13,274,15,"joinPaths"],[276,22,274,24],[276,23,274,25,"options"],[276,30,274,32],[276,31,274,33,"path"],[276,35,274,37],[276,37,274,39,"path"],[276,41,274,43],[276,42,274,44],[277,4,275,4],[278,4,276,4],[279,4,277,4,"path"],[279,8,277,8],[279,11,277,11,"expo"],[279,15,277,15],[279,16,277,16,"appendBaseUrl"],[279,29,277,29],[279,30,277,30,"path"],[279,34,277,34],[279,35,277,35],[280,4,278,4],[280,8,278,8,"allParams"],[280,17,278,17],[280,18,278,18],[280,21,278,21],[280,22,278,22],[280,24,278,24],[281,6,279,8,"path"],[281,10,279,12],[281,14,279,16],[281,18,279,20,"allParams"],[281,27,279,29],[281,28,279,30],[281,31,279,33],[281,32,279,34],[281,34,279,36],[282,4,280,4],[283,4,281,4],[284,4,282,4],[285,4,283,4],[285,11,283,11],[286,6,283,13,"path"],[286,10,283,17],[287,6,283,19,"params"],[287,12,283,25],[287,14,283,27,"allParams"],[288,4,283,37],[288,5,283,38],[289,4,284,4],[290,2,285,0],[291,2,286,0,"exports"],[291,9,286,7],[291,10,286,8,"getPathDataFromState"],[291,30,286,28],[291,33,286,31,"getPathDataFromState"],[291,53,286,51],[292,2,287,0],[293,2,288,0],[293,6,288,6,"joinPaths"],[293,15,288,15],[293,18,288,18],[293,27,288,18,"joinPaths"],[293,28,288,18],[294,4,288,18],[294,13,288,18,"_len"],[294,17,288,18],[294,20,288,18,"arguments"],[294,29,288,18],[294,30,288,18,"length"],[294,36,288,18],[294,38,288,22,"paths"],[294,43,288,27],[294,50,288,27,"Array"],[294,55,288,27],[294,56,288,27,"_len"],[294,60,288,27],[294,63,288,27,"_key"],[294,67,288,27],[294,73,288,27,"_key"],[294,77,288,27],[294,80,288,27,"_len"],[294,84,288,27],[294,86,288,27,"_key"],[294,90,288,27],[295,6,288,22,"paths"],[295,11,288,27],[295,12,288,27,"_key"],[295,16,288,27],[295,20,288,27,"arguments"],[295,29,288,27],[295,30,288,27,"_key"],[295,34,288,27],[296,4,288,27],[297,4,288,27],[297,11,288,32],[297,13,288,34],[297,14,289,5,"concat"],[297,20,289,11],[297,21,289,12],[297,24,289,15,"paths"],[297,29,289,20],[297,30,289,21,"map"],[297,33,289,24],[297,34,289,26,"p"],[297,35,289,27],[297,39,289,32,"p"],[297,40,289,33],[297,41,289,34,"split"],[297,46,289,39],[297,47,289,40],[297,50,289,43],[297,51,289,44],[297,52,289,45],[297,53,289,46],[297,54,290,5,"filter"],[297,60,290,11],[297,61,290,12,"Boolean"],[297,68,290,19],[297,69,290,20],[297,70,291,5,"join"],[297,74,291,9],[297,75,291,10],[297,78,291,13],[297,79,291,14],[298,2,291,14],[299,2,292,0],[299,6,292,6,"createConfigItem"],[299,22,292,22],[299,25,292,25,"createConfigItem"],[299,26,292,26,"config"],[299,32,292,32],[299,34,292,34,"parentPattern"],[299,47,292,47],[299,52,292,52],[300,4,293,4],[300,8,293,8],[300,15,293,15,"config"],[300,21,293,21],[300,26,293,26],[300,34,293,34],[300,36,293,36],[301,6,294,8],[302,6,295,8],[302,10,295,14,"pattern"],[302,18,295,21],[302,21,295,24,"parentPattern"],[302,34,295,37],[302,37,295,40,"joinPaths"],[302,46,295,49],[302,47,295,50,"parentPattern"],[302,60,295,63],[302,62,295,65,"config"],[302,68,295,71],[302,69,295,72],[302,72,295,75,"config"],[302,78,295,81],[303,6,296,8],[303,13,296,15],[304,8,296,17,"pattern"],[304,15,296,24],[304,17,296,17,"pattern"],[305,6,296,25],[305,7,296,26],[306,4,297,4],[307,4,298,4],[307,8,298,8,"config"],[307,14,298,14],[307,15,298,15,"exact"],[307,20,298,20],[307,24,298,24,"config"],[307,30,298,30],[307,31,298,31,"path"],[307,35,298,35],[307,40,298,40,"undefined"],[307,49,298,49],[307,51,298,51],[308,6,299,8],[308,12,299,14],[308,16,299,18,"Error"],[308,21,299,23],[308,22,299,24],[308,172,299,174],[308,173,299,175],[309,4,300,4],[310,4,301,4],[311,4,302,4],[312,4,303,4],[312,8,303,10,"pattern"],[312,15,303,17],[312,18,303,20,"config"],[312,24,303,26],[312,25,303,27,"exact"],[312,30,303,32],[312,35,303,37],[312,39,303,41],[312,42,303,44,"joinPaths"],[312,51,303,53],[312,52,303,54,"parentPattern"],[312,65,303,67],[312,69,303,71],[312,71,303,73],[312,73,303,75,"config"],[312,79,303,81],[312,80,303,82,"path"],[312,84,303,86],[312,88,303,90],[312,90,303,92],[312,91,303,93],[312,94,303,96,"config"],[312,100,303,102],[312,101,303,103,"path"],[312,105,303,107],[312,109,303,111],[312,111,303,113],[313,4,304,4],[313,8,304,10,"screens"],[313,15,304,17],[313,18,304,20,"config"],[313,24,304,26],[313,25,304,27,"screens"],[313,32,304,34],[313,35,304,37,"createNormalizedConfigs"],[313,58,304,60],[313,59,304,61,"config"],[313,65,304,67],[313,66,304,68,"screens"],[313,73,304,75],[313,75,304,77,"pattern"],[313,82,304,84],[313,83,304,85],[313,86,304,88,"undefined"],[313,95,304,97],[314,4,305,4],[314,11,305,11],[315,6,306,8],[316,6,307,8,"pattern"],[316,13,307,15],[316,15,307,17,"pattern"],[316,22,307,24],[316,24,307,26,"split"],[316,29,307,31],[316,30,307,32],[316,33,307,35],[316,34,307,36],[316,35,307,37,"filter"],[316,41,307,43],[316,42,307,44,"Boolean"],[316,49,307,51],[316,50,307,52],[316,51,307,53,"join"],[316,55,307,57],[316,56,307,58],[316,59,307,61],[316,60,307,62],[317,6,308,8,"stringify"],[317,15,308,17],[317,17,308,19,"config"],[317,23,308,25],[317,24,308,26,"stringify"],[317,33,308,35],[318,6,309,8,"screens"],[319,4,310,4],[319,5,310,5],[320,2,311,0],[320,3,311,1],[321,2,312,0],[321,6,312,6,"createNormalizedConfigs"],[321,29,312,29],[321,32,312,32,"createNormalizedConfigs"],[321,33,312,33,"options"],[321,40,312,40],[321,42,312,42,"pattern"],[321,49,312,49],[321,54,312,54,"Object"],[321,60,312,60],[321,61,312,61,"fromEntries"],[321,72,312,72],[321,73,312,73,"Object"],[321,79,312,79],[321,80,312,80,"entries"],[321,87,312,87],[321,88,312,88,"options"],[321,95,312,95],[321,96,312,96],[321,97,312,97,"map"],[321,100,312,100],[321,101,312,101,"_ref"],[321,105,312,101],[321,109,312,116],[322,4,312,116],[322,8,312,116,"_ref2"],[322,13,312,116],[322,16,312,116,"_slicedToArray"],[322,30,312,116],[322,31,312,116,"_ref"],[322,35,312,116],[323,6,312,103,"name"],[323,10,312,107],[323,13,312,107,"_ref2"],[323,18,312,107],[324,6,312,109,"c"],[324,7,312,110],[324,10,312,110,"_ref2"],[324,15,312,110],[325,4,313,4],[325,8,313,10,"result"],[325,14,313,16],[325,17,313,19,"createConfigItem"],[325,33,313,35],[325,34,313,36,"c"],[325,35,313,37],[325,37,313,39,"pattern"],[325,44,313,46],[325,45,313,47],[326,4,314,4],[326,11,314,11],[326,12,314,12,"name"],[326,16,314,16],[326,18,314,18,"result"],[326,24,314,24],[326,25,314,25],[327,2,315,0],[327,3,315,1],[327,4,315,2],[327,5,315,3],[328,2,316,0],[328,11,316,9,"appendBaseUrl"],[328,24,316,22,"appendBaseUrl"],[328,25,316,23,"path"],[328,29,316,27],[328,31,316,66],[329,4,316,66],[329,8,316,29,"baseUrl"],[329,15,316,36],[329,18,316,36,"arguments"],[329,27,316,36],[329,28,316,36,"length"],[329,34,316,36],[329,42,316,36,"arguments"],[329,51,316,36],[329,59,316,36,"undefined"],[329,68,316,36],[329,71,316,36,"arguments"],[329,80,316,36],[330,4,317,4],[330,8,317,8,"process"],[330,15,317,15],[330,16,317,16,"env"],[330,19,317,19],[330,20,317,20,"NODE_ENV"],[330,28,317,28],[330,33,317,33],[330,46,317,46],[330,48,317,48],[331,6,318,8],[331,10,318,12,"baseUrl"],[331,17,318,19],[331,19,318,21],[332,8,319,12],[332,15,319,19],[332,19,319,23,"baseUrl"],[332,26,319,30],[332,27,319,31,"replace"],[332,34,319,38],[332,35,319,39],[332,41,319,45],[332,43,319,47],[332,45,319,49],[332,46,319,50],[332,47,319,51,"replace"],[332,54,319,58],[332,55,319,59],[332,60,319,64],[332,62,319,66],[332,64,319,68],[332,65,319,69],[332,68,319,72,"path"],[332,72,319,76],[332,74,319,78],[333,6,320,8],[334,4,321,4],[335,4,322,4],[335,11,322,11,"path"],[335,15,322,15],[336,2,323,0],[337,2,324,0,"exports"],[337,9,324,7],[337,10,324,8,"appendBaseUrl"],[337,23,324,21],[337,26,324,24,"appendBaseUrl"],[337,39,324,37],[338,0,324,38],[338,3]],"functionMap":{"names":["<global>","<anonymous>","desc.get","getActiveRoute","getPathFromState","getPathDataFromState","pattern.split.filter$argument_0","pattern.split.filter.forEach$argument_0","joinPaths","paths.map$argument_0","createConfigItem","createNormalizedConfigs","Object.entries.map$argument_0","appendBaseUrl"],"mappings":"AAA;0ECC;sCCI,2BD;CDG,KC;CDG;gFCC;CDE,IC;CDE;kDCC;CDM;uBGM;CHQ;AIkC;CJE;AKE;gCCuD,4BD;iCEE;qBFO;CLiJ;kBQG;yBCC,mBD;cRE;yBUC;CVmB;gCWC,qEC;CDG,EX;AaC;CbO"}},"type":"js/module"}]}