{"dependencies":[{"name":"./getRoutesCore","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":4,"column":24,"index":232},"end":{"line":4,"column":50,"index":258}},{"start":{"line":78,"column":22,"index":3240},"end":{"line":78,"column":48,"index":3266}}],"key":"ArHlHwwsIcnNtuI3RckEQf9gTRo="}},{"name":"./views/Navigator","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":25,"column":33,"index":1238},"end":{"line":25,"column":61,"index":1266}}],"key":"zn+tusU2VBSOaE8UXDldZChc/gU="}},{"name":"./views/Sitemap","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":39,"column":59,"index":1830},"end":{"line":39,"column":85,"index":1856}}],"key":"m2CCNGl1ZH/IFxRdqA611HyUs40="}},{"name":"./views/Unmatched","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":54,"column":42,"index":2436},"end":{"line":54,"column":70,"index":2464}}],"key":"u/3CRTc9U0wfjEYIXX6ecGOiXVE="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getIgnoreList = exports.extrapolateGroups = exports.generateDynamic = exports.getExactRoutes = exports.getRoutes = void 0;\n  const getRoutesCore_1 = require(_dependencyMap[0], \"./getRoutesCore\");\n  /**\n   * Given a Metro context module, return an array of nested routes.\n   *\n   * This is a two step process:\n   *  1. Convert the RequireContext keys (file paths) into a directory tree.\n   *      - This should extrapolate array syntax into multiple routes\n   *      - Routes are given a specificity score\n   *  2. Flatten the directory tree into routes\n   *      - Routes in directories without _layout files are hoisted to the nearest _layout\n   *      - The name of the route is relative to the nearest _layout\n   *      - If multiple routes have the same name, the most specific route is used\n   */\n  function getRoutes(contextModule, options = {}) {\n    return (0, getRoutesCore_1.getRoutes)(contextModule, Object.assign({\n      getSystemRoute({\n        route,\n        type\n      }) {\n        if (route === '' && type === 'layout') {\n          // Root layout when no layout is defined.\n          return {\n            type: 'layout',\n            loadRoute: () => ({\n              default: require(_dependencyMap[1], \"./views/Navigator\").DefaultNavigator\n            }),\n            // Generate a fake file name for the directory\n            contextKey: 'expo-router/build/views/Navigator.js',\n            route: '',\n            generated: true,\n            dynamic: null,\n            children: []\n          };\n        } else if (route === '_sitemap' && type === 'route') {\n          return {\n            loadRoute() {\n              const {\n                Sitemap,\n                getNavOptions\n              } = require(_dependencyMap[2], \"./views/Sitemap\");\n              return {\n                default: Sitemap,\n                getNavOptions\n              };\n            },\n            route: '_sitemap',\n            type: 'route',\n            contextKey: 'expo-router/build/views/Sitemap.js',\n            generated: true,\n            internal: true,\n            dynamic: null,\n            children: []\n          };\n        } else if (route === '+not-found' && type === 'route') {\n          return {\n            loadRoute() {\n              return {\n                default: require(_dependencyMap[3], \"./views/Unmatched\").Unmatched\n              };\n            },\n            type: 'route',\n            route: '+not-found',\n            contextKey: 'expo-router/build/views/Unmatched.js',\n            generated: true,\n            internal: true,\n            dynamic: [{\n              name: '+not-found',\n              deep: true,\n              notFound: true\n            }],\n            children: []\n          };\n        }\n        throw new Error(`Unknown system route: ${route} and type: ${type}`);\n      }\n    }, options));\n  }\n  exports.getRoutes = getRoutes;\n  function getExactRoutes(contextModule, options = {}) {\n    return getRoutes(contextModule, Object.assign({}, options, {\n      skipGenerated: true\n    }));\n  }\n  exports.getExactRoutes = getExactRoutes;\n  var getRoutesCore_2 = require(_dependencyMap[0], \"./getRoutesCore\");\n  Object.defineProperty(exports, \"generateDynamic\", {\n    enumerable: true,\n    get: function () {\n      return getRoutesCore_2.generateDynamic;\n    }\n  });\n  Object.defineProperty(exports, \"extrapolateGroups\", {\n    enumerable: true,\n    get: function () {\n      return getRoutesCore_2.extrapolateGroups;\n    }\n  });\n  Object.defineProperty(exports, \"getIgnoreList\", {\n    enumerable: true,\n    get: function () {\n      return getRoutesCore_2.getIgnoreList;\n    }\n  });\n});","lineCount":111,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"getIgnoreList"],[7,23,3,21],[7,26,3,24,"exports"],[7,33,3,31],[7,34,3,32,"extrapolateGroups"],[7,51,3,49],[7,54,3,52,"exports"],[7,61,3,59],[7,62,3,60,"generateDynamic"],[7,77,3,75],[7,80,3,78,"exports"],[7,87,3,85],[7,88,3,86,"getExactRoutes"],[7,102,3,100],[7,105,3,103,"exports"],[7,112,3,110],[7,113,3,111,"getRoutes"],[7,122,3,120],[7,125,3,123],[7,130,3,128],[7,131,3,129],[8,2,4,0],[8,8,4,6,"getRoutesCore_1"],[8,23,4,21],[8,26,4,24,"require"],[8,33,4,31],[8,34,4,31,"_dependencyMap"],[8,48,4,31],[8,70,4,49],[8,71,4,50],[9,2,5,0],[10,0,6,0],[11,0,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,0,16,0],[21,2,17,0],[21,11,17,9,"getRoutes"],[21,20,17,18,"getRoutes"],[21,21,17,19,"contextModule"],[21,34,17,32],[21,36,17,34,"options"],[21,43,17,41],[21,46,17,44],[21,47,17,45],[21,48,17,46],[21,50,17,48],[22,4,18,4],[22,11,18,11],[22,12,18,12],[22,13,18,13],[22,15,18,15,"getRoutesCore_1"],[22,30,18,30],[22,31,18,31,"getRoutes"],[22,40,18,40],[22,42,18,42,"contextModule"],[22,55,18,55],[22,57,18,55,"Object"],[22,63,18,55],[22,64,18,55,"assign"],[22,70,18,55],[23,6,19,8,"getSystemRoute"],[23,20,19,22,"getSystemRoute"],[23,21,19,23],[24,8,19,25,"route"],[24,13,19,30],[25,8,19,32,"type"],[26,6,19,37],[26,7,19,38],[26,9,19,40],[27,8,20,12],[27,12,20,16,"route"],[27,17,20,21],[27,22,20,26],[27,24,20,28],[27,28,20,32,"type"],[27,32,20,36],[27,37,20,41],[27,45,20,49],[27,47,20,51],[28,10,21,16],[29,10,22,16],[29,17,22,23],[30,12,23,20,"type"],[30,16,23,24],[30,18,23,26],[30,26,23,34],[31,12,24,20,"loadRoute"],[31,21,24,29],[31,23,24,31,"loadRoute"],[31,24,24,31],[31,30,24,38],[32,14,25,24,"default"],[32,21,25,31],[32,23,25,33,"require"],[32,30,25,40],[32,31,25,40,"_dependencyMap"],[32,45,25,40],[32,69,25,60],[32,70,25,61],[32,71,26,29,"DefaultNavigator"],[33,12,27,20],[33,13,27,21],[33,14,27,22],[34,12,28,20],[35,12,29,20,"contextKey"],[35,22,29,30],[35,24,29,32],[35,62,29,70],[36,12,30,20,"route"],[36,17,30,25],[36,19,30,27],[36,21,30,29],[37,12,31,20,"generated"],[37,21,31,29],[37,23,31,31],[37,27,31,35],[38,12,32,20,"dynamic"],[38,19,32,27],[38,21,32,29],[38,25,32,33],[39,12,33,20,"children"],[39,20,33,28],[39,22,33,30],[40,10,34,16],[40,11,34,17],[41,8,35,12],[41,9,35,13],[41,15,36,17],[41,19,36,21,"route"],[41,24,36,26],[41,29,36,31],[41,39,36,41],[41,43,36,45,"type"],[41,47,36,49],[41,52,36,54],[41,59,36,61],[41,61,36,63],[42,10,37,16],[42,17,37,23],[43,12,38,20,"loadRoute"],[43,21,38,29,"loadRoute"],[43,22,38,29],[43,24,38,32],[44,14,39,24],[44,20,39,30],[45,16,39,32,"Sitemap"],[45,23,39,39],[46,16,39,41,"getNavOptions"],[47,14,39,55],[47,15,39,56],[47,18,39,59,"require"],[47,25,39,66],[47,26,39,66,"_dependencyMap"],[47,40,39,66],[47,62,39,84],[47,63,39,85],[48,14,40,24],[48,21,40,31],[49,16,40,33,"default"],[49,23,40,40],[49,25,40,42,"Sitemap"],[49,32,40,49],[50,16,40,51,"getNavOptions"],[51,14,40,65],[51,15,40,66],[52,12,41,20],[52,13,41,21],[53,12,42,20,"route"],[53,17,42,25],[53,19,42,27],[53,29,42,37],[54,12,43,20,"type"],[54,16,43,24],[54,18,43,26],[54,25,43,33],[55,12,44,20,"contextKey"],[55,22,44,30],[55,24,44,32],[55,60,44,68],[56,12,45,20,"generated"],[56,21,45,29],[56,23,45,31],[56,27,45,35],[57,12,46,20,"internal"],[57,20,46,28],[57,22,46,30],[57,26,46,34],[58,12,47,20,"dynamic"],[58,19,47,27],[58,21,47,29],[58,25,47,33],[59,12,48,20,"children"],[59,20,48,28],[59,22,48,30],[60,10,49,16],[60,11,49,17],[61,8,50,12],[61,9,50,13],[61,15,51,17],[61,19,51,21,"route"],[61,24,51,26],[61,29,51,31],[61,41,51,43],[61,45,51,47,"type"],[61,49,51,51],[61,54,51,56],[61,61,51,63],[61,63,51,65],[62,10,52,16],[62,17,52,23],[63,12,53,20,"loadRoute"],[63,21,53,29,"loadRoute"],[63,22,53,29],[63,24,53,32],[64,14,54,24],[64,21,54,31],[65,16,54,33,"default"],[65,23,54,40],[65,25,54,42,"require"],[65,32,54,49],[65,33,54,49,"_dependencyMap"],[65,47,54,49],[65,71,54,69],[65,72,54,70],[65,73,54,71,"Unmatched"],[66,14,54,81],[66,15,54,82],[67,12,55,20],[67,13,55,21],[68,12,56,20,"type"],[68,16,56,24],[68,18,56,26],[68,25,56,33],[69,12,57,20,"route"],[69,17,57,25],[69,19,57,27],[69,31,57,39],[70,12,58,20,"contextKey"],[70,22,58,30],[70,24,58,32],[70,62,58,70],[71,12,59,20,"generated"],[71,21,59,29],[71,23,59,31],[71,27,59,35],[72,12,60,20,"internal"],[72,20,60,28],[72,22,60,30],[72,26,60,34],[73,12,61,20,"dynamic"],[73,19,61,27],[73,21,61,29],[73,22,61,30],[74,14,61,32,"name"],[74,18,61,36],[74,20,61,38],[74,32,61,50],[75,14,61,52,"deep"],[75,18,61,56],[75,20,61,58],[75,24,61,62],[76,14,61,64,"notFound"],[76,22,61,72],[76,24,61,74],[77,12,61,79],[77,13,61,80],[77,14,61,81],[78,12,62,20,"children"],[78,20,62,28],[78,22,62,30],[79,10,63,16],[79,11,63,17],[80,8,64,12],[81,8,65,12],[81,14,65,18],[81,18,65,22,"Error"],[81,23,65,27],[81,24,65,28],[81,49,65,53,"route"],[81,54,65,58],[81,68,65,72,"type"],[81,72,65,76],[81,74,65,78],[81,75,65,79],[82,6,66,8],[83,4,66,9],[83,7,67,11,"options"],[83,14,67,18],[83,15,68,5],[83,16,68,6],[84,2,69,0],[85,2,70,0,"exports"],[85,9,70,7],[85,10,70,8,"getRoutes"],[85,19,70,17],[85,22,70,20,"getRoutes"],[85,31,70,29],[86,2,71,0],[86,11,71,9,"getExactRoutes"],[86,25,71,23,"getExactRoutes"],[86,26,71,24,"contextModule"],[86,39,71,37],[86,41,71,39,"options"],[86,48,71,46],[86,51,71,49],[86,52,71,50],[86,53,71,51],[86,55,71,53],[87,4,72,4],[87,11,72,11,"getRoutes"],[87,20,72,20],[87,21,72,21,"contextModule"],[87,34,72,34],[87,36,72,34,"Object"],[87,42,72,34],[87,43,72,34,"assign"],[87,49,72,34],[87,54,73,11,"options"],[87,61,73,18],[88,6,74,8,"skipGenerated"],[88,19,74,21],[88,21,74,23],[89,4,74,27],[89,6,75,5],[89,7,75,6],[90,2,76,0],[91,2,77,0,"exports"],[91,9,77,7],[91,10,77,8,"getExactRoutes"],[91,24,77,22],[91,27,77,25,"getExactRoutes"],[91,41,77,39],[92,2,78,0],[92,6,78,4,"getRoutesCore_2"],[92,21,78,19],[92,24,78,22,"require"],[92,31,78,29],[92,32,78,29,"_dependencyMap"],[92,46,78,29],[92,68,78,47],[92,69,78,48],[93,2,79,0,"Object"],[93,8,79,6],[93,9,79,7,"defineProperty"],[93,23,79,21],[93,24,79,22,"exports"],[93,31,79,29],[93,33,79,31],[93,50,79,48],[93,52,79,50],[94,4,79,52,"enumerable"],[94,14,79,62],[94,16,79,64],[94,20,79,68],[95,4,79,70,"get"],[95,7,79,73],[95,9,79,75],[95,18,79,75,"get"],[95,19,79,75],[95,21,79,87],[96,6,79,89],[96,13,79,96,"getRoutesCore_2"],[96,28,79,111],[96,29,79,112,"generateDynamic"],[96,44,79,127],[97,4,79,129],[98,2,79,131],[98,3,79,132],[98,4,79,133],[99,2,80,0,"Object"],[99,8,80,6],[99,9,80,7,"defineProperty"],[99,23,80,21],[99,24,80,22,"exports"],[99,31,80,29],[99,33,80,31],[99,52,80,50],[99,54,80,52],[100,4,80,54,"enumerable"],[100,14,80,64],[100,16,80,66],[100,20,80,70],[101,4,80,72,"get"],[101,7,80,75],[101,9,80,77],[101,18,80,77,"get"],[101,19,80,77],[101,21,80,89],[102,6,80,91],[102,13,80,98,"getRoutesCore_2"],[102,28,80,113],[102,29,80,114,"extrapolateGroups"],[102,46,80,131],[103,4,80,133],[104,2,80,135],[104,3,80,136],[104,4,80,137],[105,2,81,0,"Object"],[105,8,81,6],[105,9,81,7,"defineProperty"],[105,23,81,21],[105,24,81,22,"exports"],[105,31,81,29],[105,33,81,31],[105,48,81,46],[105,50,81,48],[106,4,81,50,"enumerable"],[106,14,81,60],[106,16,81,62],[106,20,81,66],[107,4,81,68,"get"],[107,7,81,71],[107,9,81,73],[107,18,81,73,"get"],[107,19,81,73],[107,21,81,85],[108,6,81,87],[108,13,81,94,"getRoutesCore_2"],[108,28,81,109],[108,29,81,110,"getIgnoreList"],[108,42,81,123],[109,4,81,125],[110,2,81,127],[110,3,81,128],[110,4,81,129],[111,0,81,130],[111,3]],"functionMap":{"names":["<global>","getRoutes","getSystemRoute","loadRoute","getExactRoutes","Object.defineProperty$argument_2.get"],"mappings":"AAA;ACgB;QCE;+BCK;sBDG;oBCW;qBDG;oBCY;qBDE;SDW;CDG;AIE;CJK;2EKG,uDL;6EKC,yDL;yEKC,qDL"}},"type":"js/module"}]}