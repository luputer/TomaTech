{"dependencies":[{"name":"@babel/runtime/helpers/objectWithoutPropertiesLoose","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":526,"column":44,"index":21402}}],"key":"AkVSdHsy9g0oRbtVtdfz2QwrA14="}},{"name":"@react-navigation/native","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":30,"column":17,"index":1295},"end":{"line":30,"column":52,"index":1330}}],"key":"+CMsq8mGitISxINZGSTIjwwHCvE="}},{"name":"escape-string-regexp","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":31,"column":47,"index":1379},"end":{"line":31,"column":78,"index":1410}}],"key":"pv3xsw91DuEhfWNv1C6M3srszHc="}},{"name":"./findFocusedRoute","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":32,"column":27,"index":1440},"end":{"line":32,"column":56,"index":1469}}],"key":"9+VFhBOjQcTQeIvNi1xuiiMPBRA="}},{"name":"./getStateFromPath-forks","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":33,"column":26,"index":1497},"end":{"line":33,"column":61,"index":1532}}],"key":"4vrbraquME4BHp/ovy7bcL0vuto="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _objectWithoutPropertiesLoose = require(_dependencyMap[0], \"@babel/runtime/helpers/objectWithoutPropertiesLoose\");\n  const _excluded = [\"path\"];\n  var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = {\n        enumerable: true,\n        get: function () {\n          return m[k];\n        }\n      };\n    }\n    Object.defineProperty(o, k2, desc);\n  } : function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n  });\n  var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n    Object.defineProperty(o, \"default\", {\n      enumerable: true,\n      value: v\n    });\n  } : function (o, v) {\n    o[\"default\"] = v;\n  });\n  var __importStar = this && this.__importStar || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n  };\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getStateFromPath = void 0;\n  const native_1 = require(_dependencyMap[1], \"@react-navigation/native\");\n  const escape_string_regexp_1 = __importDefault(require(_dependencyMap[2], \"escape-string-regexp\"));\n  const findFocusedRoute_1 = require(_dependencyMap[3], \"./findFocusedRoute\");\n  const expo = __importStar(require(_dependencyMap[4], \"./getStateFromPath-forks\"));\n  /**\n   * Utility to parse a path string to initial state object accepted by the container.\n   * This is useful for deep linking when we need to handle the incoming URL.\n   *\n   * @example\n   * ```js\n   * getStateFromPath(\n   *   '/chat/jane/42',\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         parse: { id: Number }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n   * @param options Extra options to fine-tune how to parse the path.\n   */\n  function getStateFromPath(\n  // END FORK\n  path, options) {\n    const {\n      initialRoutes,\n      configs,\n      configWithRegexes\n    } = getConfigResources(options, this?.routeInfo?.segments);\n    const screens = options?.screens;\n    // START FORK\n    const expoPath = expo.getUrlWithReactNavigationConcessions(path);\n    // END FORK\n    // START FORK\n    let remaining = expoPath.nonstandardPathname\n    // let remaining = path\n    // END FORK\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n    // Make sure there is a trailing slash\n    remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n    const prefix = options?.path?.replace(/^\\//, ''); // Remove extra leading slash\n    if (prefix) {\n      // Make sure there is a trailing slash\n      const normalizedPrefix = prefix.endsWith('/') ? prefix : `${prefix}/`;\n      // If the path doesn't start with the prefix, it's not a match\n      if (!remaining.startsWith(normalizedPrefix)) {\n        return undefined;\n      }\n      // Remove the prefix from the path\n      remaining = remaining.replace(normalizedPrefix, '');\n    }\n    if (screens === undefined) {\n      // When no config is specified, use the path segments as route names\n      const routes = remaining.split('/').filter(Boolean).map(segment => {\n        const name = decodeURIComponent(segment);\n        return {\n          name\n        };\n      });\n      if (routes.length) {\n        return createNestedStateObject(expoPath, routes, initialRoutes, [], expoPath.url.hash);\n      }\n      return undefined;\n    }\n    if (remaining === '/') {\n      // We need to add special handling of empty path so navigation to empty path also works\n      // When handling empty path, we should only look at the root level config\n      // START FORK\n      const match = expo.matchForEmptyPath(configWithRegexes);\n      // const match = configs.find(\n      //   (config) =>\n      //     config.path === '' &&\n      //     config.routeNames.every(\n      //       // Make sure that none of the parent configs have a non-empty path defined\n      //       (name) => !configs.find((c) => c.screen === name)?.path\n      //     )\n      // );\n      // END FORK\n      if (match) {\n        return createNestedStateObject(expoPath, match.routeNames.map(name => ({\n          name\n        })), initialRoutes, configs, expoPath.url.hash);\n      }\n      return undefined;\n    }\n    let result;\n    let current;\n    // We match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    const {\n      routes,\n      remainingPath\n    } = matchAgainstConfigs(remaining, configWithRegexes);\n    if (routes !== undefined) {\n      // This will always be empty if full path matched\n      current = createNestedStateObject(expoPath, routes, initialRoutes, configs, expoPath.url.hash);\n      remaining = remainingPath;\n      result = current;\n    }\n    if (current == null || result == null) {\n      return undefined;\n    }\n    return result;\n  }\n  exports.getStateFromPath = getStateFromPath;\n  /**\n   * Reference to the last used config resources. This is used to avoid recomputing the config resources when the options are the same.\n   */\n  let cachedConfigResources = [undefined, prepareConfigResources()];\n  function getConfigResources(options,\n  // START FORK\n  previousSegments\n  // END FORK\n  ) {\n    // START FORK - We need to disable this caching as our configs can change based upon the current state\n    // if (cachedConfigResources[0] !== options) {\n    //   console.log(previousSegments);\n    cachedConfigResources = [options, prepareConfigResources(options, previousSegments)];\n    // }\n    // END FORK FORK\n    return cachedConfigResources[1];\n  }\n  function prepareConfigResources(options, previousSegments) {\n    if (options) {\n      (0, native_1.validatePathConfig)(options);\n    }\n    const initialRoutes = getInitialRoutes(options);\n    const configs = getNormalizedConfigs(initialRoutes, options?.screens, previousSegments);\n    checkForDuplicatedConfigs(configs);\n    const configWithRegexes = getConfigsWithRegexes(configs);\n    return {\n      initialRoutes,\n      configs,\n      configWithRegexes\n    };\n  }\n  function getInitialRoutes(options) {\n    const initialRoutes = [];\n    if (options?.initialRouteName) {\n      initialRoutes.push({\n        initialRouteName: options.initialRouteName,\n        parentScreens: []\n      });\n    }\n    return initialRoutes;\n  }\n  function getNormalizedConfigs(initialRoutes, screens = {},\n  // START FORK\n  previousSegments\n  // END FORK\n  ) {\n    // Create a normalized configs array which will be easier to use\n    return [].concat(...Object.keys(screens).map(key => createNormalizedConfigs(key, screens, [], initialRoutes, []))).map(expo.appendIsInitial(initialRoutes)).sort(expo.getRouteConfigSorter(previousSegments));\n    // .sort((a, b) => {\n    //   // Sort config so that:\n    //   // - the most exhaustive ones are always at the beginning\n    //   // - patterns with wildcard are always at the end\n    //   // If 2 patterns are same, move the one with less route names up\n    //   // This is an error state, so it's only useful for consistent error messages\n    //   if (a.pattern === b.pattern) {\n    //     return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    //   }\n    //   // If one of the patterns starts with the other, it's more exhaustive\n    //   // So move it up\n    //   if (a.pattern.startsWith(b.pattern)) {\n    //     return -1;\n    //   }\n    //   if (b.pattern.startsWith(a.pattern)) {\n    //     return 1;\n    //   }\n    //   const aParts = a.pattern.split('/');\n    //   const bParts = b.pattern.split('/');\n    //   for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n    //     // if b is longer, b get higher priority\n    //     if (aParts[i] == null) {\n    //       return 1;\n    //     }\n    //     // if a is longer, a get higher priority\n    //     if (bParts[i] == null) {\n    //       return -1;\n    //     }\n    //     const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n    //     const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n    //     // if both are wildcard we compare next component\n    //     if (aWildCard && bWildCard) {\n    //       continue;\n    //     }\n    //     // if only a is wild card, b get higher priority\n    //     if (aWildCard) {\n    //       return 1;\n    //     }\n    //     // if only b is wild card, a get higher priority\n    //     if (bWildCard) {\n    //       return -1;\n    //     }\n    //   }\n    //   return bParts.length - aParts.length;\n    // });\n  }\n  function checkForDuplicatedConfigs(configs) {\n    // Check for duplicate patterns in the config\n    configs.reduce((acc, config) => {\n      if (acc[config.pattern]) {\n        const a = acc[config.pattern].routeNames;\n        const b = config.routeNames;\n        // It's not a problem if the path string omitted from a inner most screen\n        // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n        const intersects = a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);\n        if (!intersects) {\n          throw new Error(`Found conflicting screens with the same pattern. The pattern '${config.pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n        }\n      }\n      return Object.assign(acc, {\n        [config.pattern]: config\n      });\n    }, {});\n  }\n  function getConfigsWithRegexes(configs) {\n    return configs.map(c => Object.assign({}, c, {\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      // START FORK\n      // regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n      regex: expo.configRegExp(c)\n      // END FORK\n    }));\n  }\n  const joinPaths = (...paths) => [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n  const matchAgainstConfigs = (remaining, configs) => {\n    let routes;\n    let remainingPath = remaining;\n    // START FORK\n    const allParams = Object.create(null);\n    // END FORK\n    // Go through all configs, and see if the next path segment matches our regex\n    for (const config of configs) {\n      if (!config.regex) {\n        continue;\n      }\n      const match = remainingPath.match(config.regex);\n      // If our regex matches, we need to extract params from the path\n      if (match) {\n        const matchResult = config.pattern?.split('/').reduce((acc, p, index) => {\n          if (!expo.isDynamicPart(p)) {\n            return acc;\n          }\n          acc.pos += 1;\n          // START FORK\n          const decodedParamSegment = expo.safelyDecodeURIComponent(\n          // const decodedParamSegment = decodeURIComponent(\n          // The param segments appear every second item starting from 2 in the regex match result\n          match[(acc.pos + 1) * 2]\n          // Remove trailing slash\n          .replace(/\\/$/, ''));\n          // END FORK\n          Object.assign(acc.matchedParams, {\n            [p]: Object.assign(acc.matchedParams[p] || {}, {\n              [index]: decodedParamSegment\n            })\n          });\n          return acc;\n        }, {\n          pos: -1,\n          matchedParams: {}\n        });\n        const matchedParams = matchResult.matchedParams || {};\n        routes = config.routeNames.map(name => {\n          const routeConfig = configs.find(c => {\n            // Check matching name AND pattern in case same screen is used at different levels in config\n            return c.screen === name && config.pattern.startsWith(c.pattern);\n          });\n          // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n          const normalizedPath = routeConfig?.path.split('/').filter(Boolean).join('/');\n          // Get the number of segments in the initial pattern\n          const numInitialSegments = routeConfig?.pattern\n          // Extract the prefix from the pattern by removing the ending path pattern (e.g pattern=`a/b/c/d` and normalizedPath=`c/d` becomes `a/b`)\n          .replace(new RegExp(`${(0, escape_string_regexp_1.default)(normalizedPath)}$`), '')?.split('/').length;\n          const params = normalizedPath?.split('/').reduce((acc, p, index) => {\n            if (!expo.isDynamicPart(p)) {\n              return acc;\n            }\n            // Get the real index of the path parameter in the matched path\n            // by offsetting by the number of segments in the initial pattern\n            const offset = numInitialSegments ? numInitialSegments - 1 : 0;\n            // START FORK\n            // const value = matchedParams[p]?.[index + offset];\n            const value = expo.getParamValue(p, matchedParams[p]?.[index + offset]);\n            // END FORK\n            if (value) {\n              // START FORK\n              // const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              const key = expo.replacePart(p);\n              // END FORK\n              acc[key] = routeConfig?.parse?.[key] ? routeConfig.parse[key](value) : value;\n            }\n            return acc;\n          }, {});\n          if (params && Object.keys(params).length) {\n            Object.assign(allParams, params);\n            return {\n              name,\n              params\n            };\n          }\n          return {\n            name\n          };\n        });\n        remainingPath = remainingPath.replace(match[1], '');\n        break;\n      }\n    }\n    // START FORK\n    expo.populateParams(routes, allParams);\n    // END FORK\n    return {\n      routes,\n      remainingPath\n    };\n  };\n  const createNormalizedConfigs = (screen, routeConfig, routeNames = [], initials, parentScreens, parentPattern) => {\n    const configs = [];\n    routeNames.push(screen);\n    parentScreens.push(screen);\n    const config = routeConfig[screen];\n    if (typeof config === 'string') {\n      // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n      const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n      configs.push(createConfigItem(screen, routeNames, pattern, config));\n    } else if (typeof config === 'object') {\n      let pattern;\n      // if an object is specified as the value (e.g. Foo: { ... }),\n      // it can have `path` property and\n      // it could have `screens` prop which has nested configs\n      if (typeof config.path === 'string') {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n        }\n        pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n        configs.push(createConfigItem(screen, routeNames, pattern, config.path, config.parse, config));\n      }\n      if (config.screens) {\n        // property `initialRouteName` without `screens` has no purpose\n        if (config.initialRouteName) {\n          initials.push({\n            initialRouteName: config.initialRouteName,\n            parentScreens\n          });\n        }\n        Object.keys(config.screens).forEach(nestedConfig => {\n          const result = createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, [...parentScreens], pattern ?? parentPattern);\n          configs.push(...result);\n        });\n      }\n    }\n    routeNames.pop();\n    return configs;\n  };\n  const createConfigItem = (screen, routeNames, pattern, path, parse = undefined, config = {}) => {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern = pattern.split('/').filter(Boolean).join('/');\n    const regex = pattern ? new RegExp(`^(${pattern.split('/').map(it => {\n      if (it.startsWith(':')) {\n        return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n      }\n      return `${it === '*' ? '.*' : (0, escape_string_regexp_1.default)(it)}\\\\/`;\n    }).join('')})`) : undefined;\n    return Object.assign({\n      screen,\n      regex,\n      pattern,\n      path,\n      // The routeNames array is mutated, so copy it to keep the current state\n      routeNames: [...routeNames],\n      parse\n    }, expo.createConfig(screen, pattern, routeNames, config));\n  };\n  const findParseConfigForRoute = (routeName, flatConfig) => {\n    for (const config of flatConfig) {\n      if (routeName === config.routeNames[config.routeNames.length - 1]) {\n        return config.parse;\n      }\n    }\n    return undefined;\n  };\n  // Try to find an initial route connected with the one passed\n  const findInitialRoute = (routeName, parentScreens, initialRoutes) => {\n    for (const config of initialRoutes) {\n      if (parentScreens.length === config.parentScreens.length) {\n        let sameParents = true;\n        for (let i = 0; i < parentScreens.length; i++) {\n          if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n            sameParents = false;\n            break;\n          }\n        }\n        if (sameParents) {\n          return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n        }\n      }\n    }\n    return undefined;\n  };\n  // returns state object with values depending on whether\n  // it is the end of state and if there is initialRoute for this level\n  const createStateObject = (initialRoute, route, isEmpty) => {\n    if (isEmpty) {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute,\n            params: route.params\n          }, route]\n        };\n      } else {\n        return {\n          routes: [route]\n        };\n      }\n    } else {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute,\n            params: route.params\n          }, Object.assign({}, route, {\n            state: {\n              routes: []\n            }\n          })]\n        };\n      } else {\n        return {\n          routes: [Object.assign({}, route, {\n            state: {\n              routes: []\n            }\n          })]\n        };\n      }\n    }\n  };\n  const createNestedStateObject = (_ref, routes, initialRoutes, flatConfig, hash) => {\n    let {\n        path\n      } = _ref,\n      expoURL = _objectWithoutPropertiesLoose(_ref, _excluded);\n    let route = routes.shift();\n    const parentScreens = [];\n    let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n    parentScreens.push(route.name);\n    const state = createStateObject(initialRoute, route, routes.length === 0);\n    if (routes.length > 0) {\n      let nestedState = state;\n      while (route = routes.shift()) {\n        initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n        const nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n        nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n        if (routes.length > 0) {\n          nestedState = nestedState.routes[nestedStateIndex].state;\n        }\n        parentScreens.push(route.name);\n      }\n    }\n    route = (0, findFocusedRoute_1.findFocusedRoute)(state);\n    // START FORK\n    route.path = expoURL.pathWithoutGroups;\n    // route.path = path;\n    // END FORK\n    // START FORK\n    // const params = parseQueryParams(\n    const params = expo.parseQueryParams(path, route, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined, hash);\n    // END FORK\n    // START FORK\n    // expo.handleUrlParams(route, params, hash);\n    if (params) {\n      route.params = Object.assign({}, route.params, params);\n    }\n    // END FORK\n    return state;\n  };\n  // START FORK\n  // const parseQueryParams = (path: string, parseConfig?: Record<string, (value: string) => any>) => {\n  //   const query = path.split('?')[1];\n  //   const params = queryString.parse(query);\n  //   if (parseConfig) {\n  //     Object.keys(params).forEach((name) => {\n  //       if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n  //         params[name] = parseConfig[name](params[name] as string);\n  //       }\n  //     });\n  //   }\n  //   return Object.keys(params).length ? params : undefined;\n  // };\n  // END FORK\n});","lineCount":548,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_objectWithoutPropertiesLoose"],[4,35,1,13],[4,38,1,13,"require"],[4,45,1,13],[4,46,1,13,"_dependencyMap"],[4,60,1,13],[5,2,1,13],[5,8,1,13,"_excluded"],[5,17,1,13],[6,2,2,0],[6,6,2,4,"__createBinding"],[6,21,2,19],[6,24,2,23],[6,28,2,27],[6,32,2,31],[6,36,2,35],[6,37,2,36,"__createBinding"],[6,52,2,51],[6,57,2,57,"Object"],[6,63,2,63],[6,64,2,64,"create"],[6,70,2,70],[6,73,2,74],[6,83,2,83,"o"],[6,84,2,84],[6,86,2,86,"m"],[6,87,2,87],[6,89,2,89,"k"],[6,90,2,90],[6,92,2,92,"k2"],[6,94,2,94],[6,96,2,96],[7,4,3,4],[7,8,3,8,"k2"],[7,10,3,10],[7,15,3,15,"undefined"],[7,24,3,24],[7,26,3,26,"k2"],[7,28,3,28],[7,31,3,31,"k"],[7,32,3,32],[8,4,4,4],[8,8,4,8,"desc"],[8,12,4,12],[8,15,4,15,"Object"],[8,21,4,21],[8,22,4,22,"getOwnPropertyDescriptor"],[8,46,4,46],[8,47,4,47,"m"],[8,48,4,48],[8,50,4,50,"k"],[8,51,4,51],[8,52,4,52],[9,4,5,4],[9,8,5,8],[9,9,5,9,"desc"],[9,13,5,13],[9,18,5,18],[9,23,5,23],[9,27,5,27,"desc"],[9,31,5,31],[9,34,5,34],[9,35,5,35,"m"],[9,36,5,36],[9,37,5,37,"__esModule"],[9,47,5,47],[9,50,5,50,"desc"],[9,54,5,54],[9,55,5,55,"writable"],[9,63,5,63],[9,67,5,67,"desc"],[9,71,5,71],[9,72,5,72,"configurable"],[9,84,5,84],[9,85,5,85],[9,87,5,87],[10,6,6,6,"desc"],[10,10,6,10],[10,13,6,13],[11,8,6,15,"enumerable"],[11,18,6,25],[11,20,6,27],[11,24,6,31],[12,8,6,33,"get"],[12,11,6,36],[12,13,6,38],[12,22,6,38,"get"],[12,23,6,38],[12,25,6,49],[13,10,6,51],[13,17,6,58,"m"],[13,18,6,59],[13,19,6,60,"k"],[13,20,6,61],[13,21,6,62],[14,8,6,64],[15,6,6,66],[15,7,6,67],[16,4,7,4],[17,4,8,4,"Object"],[17,10,8,10],[17,11,8,11,"defineProperty"],[17,25,8,25],[17,26,8,26,"o"],[17,27,8,27],[17,29,8,29,"k2"],[17,31,8,31],[17,33,8,33,"desc"],[17,37,8,37],[17,38,8,38],[18,2,9,0],[18,3,9,1],[18,6,9,6],[18,16,9,15,"o"],[18,17,9,16],[18,19,9,18,"m"],[18,20,9,19],[18,22,9,21,"k"],[18,23,9,22],[18,25,9,24,"k2"],[18,27,9,26],[18,29,9,28],[19,4,10,4],[19,8,10,8,"k2"],[19,10,10,10],[19,15,10,15,"undefined"],[19,24,10,24],[19,26,10,26,"k2"],[19,28,10,28],[19,31,10,31,"k"],[19,32,10,32],[20,4,11,4,"o"],[20,5,11,5],[20,6,11,6,"k2"],[20,8,11,8],[20,9,11,9],[20,12,11,12,"m"],[20,13,11,13],[20,14,11,14,"k"],[20,15,11,15],[20,16,11,16],[21,2,12,0],[21,3,12,2],[21,4,12,3],[22,2,13,0],[22,6,13,4,"__setModuleDefault"],[22,24,13,22],[22,27,13,26],[22,31,13,30],[22,35,13,34],[22,39,13,38],[22,40,13,39,"__setModuleDefault"],[22,58,13,57],[22,63,13,63,"Object"],[22,69,13,69],[22,70,13,70,"create"],[22,76,13,76],[22,79,13,80],[22,89,13,89,"o"],[22,90,13,90],[22,92,13,92,"v"],[22,93,13,93],[22,95,13,95],[23,4,14,4,"Object"],[23,10,14,10],[23,11,14,11,"defineProperty"],[23,25,14,25],[23,26,14,26,"o"],[23,27,14,27],[23,29,14,29],[23,38,14,38],[23,40,14,40],[24,6,14,42,"enumerable"],[24,16,14,52],[24,18,14,54],[24,22,14,58],[25,6,14,60,"value"],[25,11,14,65],[25,13,14,67,"v"],[26,4,14,69],[26,5,14,70],[26,6,14,71],[27,2,15,0],[27,3,15,1],[27,6,15,5],[27,16,15,14,"o"],[27,17,15,15],[27,19,15,17,"v"],[27,20,15,18],[27,22,15,20],[28,4,16,4,"o"],[28,5,16,5],[28,6,16,6],[28,15,16,15],[28,16,16,16],[28,19,16,19,"v"],[28,20,16,20],[29,2,17,0],[29,3,17,1],[29,4,17,2],[30,2,18,0],[30,6,18,4,"__importStar"],[30,18,18,16],[30,21,18,20],[30,25,18,24],[30,29,18,28],[30,33,18,32],[30,34,18,33,"__importStar"],[30,46,18,45],[30,50,18,50],[30,60,18,60,"mod"],[30,63,18,63],[30,65,18,65],[31,4,19,4],[31,8,19,8,"mod"],[31,11,19,11],[31,15,19,15,"mod"],[31,18,19,18],[31,19,19,19,"__esModule"],[31,29,19,29],[31,31,19,31],[31,38,19,38,"mod"],[31,41,19,41],[32,4,20,4],[32,8,20,8,"result"],[32,14,20,14],[32,17,20,17],[32,18,20,18],[32,19,20,19],[33,4,21,4],[33,8,21,8,"mod"],[33,11,21,11],[33,15,21,15],[33,19,21,19],[33,21,21,21],[33,26,21,26],[33,30,21,30,"k"],[33,31,21,31],[33,35,21,35,"mod"],[33,38,21,38],[33,40,21,40],[33,44,21,44,"k"],[33,45,21,45],[33,50,21,50],[33,59,21,59],[33,63,21,63,"Object"],[33,69,21,69],[33,70,21,70,"prototype"],[33,79,21,79],[33,80,21,80,"hasOwnProperty"],[33,94,21,94],[33,95,21,95,"call"],[33,99,21,99],[33,100,21,100,"mod"],[33,103,21,103],[33,105,21,105,"k"],[33,106,21,106],[33,107,21,107],[33,109,21,109,"__createBinding"],[33,124,21,124],[33,125,21,125,"result"],[33,131,21,131],[33,133,21,133,"mod"],[33,136,21,136],[33,138,21,138,"k"],[33,139,21,139],[33,140,21,140],[34,4,22,4,"__setModuleDefault"],[34,22,22,22],[34,23,22,23,"result"],[34,29,22,29],[34,31,22,31,"mod"],[34,34,22,34],[34,35,22,35],[35,4,23,4],[35,11,23,11,"result"],[35,17,23,17],[36,2,24,0],[36,3,24,1],[37,2,25,0],[37,6,25,4,"__importDefault"],[37,21,25,19],[37,24,25,23],[37,28,25,27],[37,32,25,31],[37,36,25,35],[37,37,25,36,"__importDefault"],[37,52,25,51],[37,56,25,56],[37,66,25,66,"mod"],[37,69,25,69],[37,71,25,71],[38,4,26,4],[38,11,26,12,"mod"],[38,14,26,15],[38,18,26,19,"mod"],[38,21,26,22],[38,22,26,23,"__esModule"],[38,32,26,33],[38,35,26,37,"mod"],[38,38,26,40],[38,41,26,43],[39,6,26,45],[39,15,26,54],[39,17,26,56,"mod"],[40,4,26,60],[40,5,26,61],[41,2,27,0],[41,3,27,1],[42,2,28,0,"Object"],[42,8,28,6],[42,9,28,7,"defineProperty"],[42,23,28,21],[42,24,28,22,"exports"],[42,31,28,29],[42,33,28,31],[42,45,28,43],[42,47,28,45],[43,4,28,47,"value"],[43,9,28,52],[43,11,28,54],[44,2,28,59],[44,3,28,60],[44,4,28,61],[45,2,29,0,"exports"],[45,9,29,7],[45,10,29,8,"getStateFromPath"],[45,26,29,24],[45,29,29,27],[45,34,29,32],[45,35,29,33],[46,2,30,0],[46,8,30,6,"native_1"],[46,16,30,14],[46,19,30,17,"require"],[46,26,30,24],[46,27,30,24,"_dependencyMap"],[46,41,30,24],[46,72,30,51],[46,73,30,52],[47,2,31,0],[47,8,31,6,"escape_string_regexp_1"],[47,30,31,28],[47,33,31,31,"__importDefault"],[47,48,31,46],[47,49,31,47,"require"],[47,56,31,54],[47,57,31,54,"_dependencyMap"],[47,71,31,54],[47,98,31,77],[47,99,31,78],[47,100,31,79],[48,2,32,0],[48,8,32,6,"findFocusedRoute_1"],[48,26,32,24],[48,29,32,27,"require"],[48,36,32,34],[48,37,32,34,"_dependencyMap"],[48,51,32,34],[48,76,32,55],[48,77,32,56],[49,2,33,0],[49,8,33,6,"expo"],[49,12,33,10],[49,15,33,13,"__importStar"],[49,27,33,25],[49,28,33,26,"require"],[49,35,33,33],[49,36,33,33,"_dependencyMap"],[49,50,33,33],[49,81,33,60],[49,82,33,61],[49,83,33,62],[50,2,34,0],[51,0,35,0],[52,0,36,0],[53,0,37,0],[54,0,38,0],[55,0,39,0],[56,0,40,0],[57,0,41,0],[58,0,42,0],[59,0,43,0],[60,0,44,0],[61,0,45,0],[62,0,46,0],[63,0,47,0],[64,0,48,0],[65,0,49,0],[66,0,50,0],[67,0,51,0],[68,0,52,0],[69,0,53,0],[70,0,54,0],[71,2,55,0],[71,11,55,9,"getStateFromPath"],[71,27,55,25,"getStateFromPath"],[72,2,56,0],[73,2,57,0,"path"],[73,6,57,4],[73,8,57,6,"options"],[73,15,57,13],[73,17,57,15],[74,4,58,4],[74,10,58,10],[75,6,58,12,"initialRoutes"],[75,19,58,25],[76,6,58,27,"configs"],[76,13,58,34],[77,6,58,36,"configWithRegexes"],[78,4,58,54],[78,5,58,55],[78,8,58,58,"getConfigResources"],[78,26,58,76],[78,27,58,77,"options"],[78,34,58,84],[78,36,58,86],[78,40,58,90],[78,42,58,92,"routeInfo"],[78,51,58,101],[78,53,58,103,"segments"],[78,61,58,111],[78,62,58,112],[79,4,59,4],[79,10,59,10,"screens"],[79,17,59,17],[79,20,59,20,"options"],[79,27,59,27],[79,29,59,29,"screens"],[79,36,59,36],[80,4,60,4],[81,4,61,4],[81,10,61,10,"expoPath"],[81,18,61,18],[81,21,61,21,"expo"],[81,25,61,25],[81,26,61,26,"getUrlWithReactNavigationConcessions"],[81,62,61,62],[81,63,61,63,"path"],[81,67,61,67],[81,68,61,68],[82,4,62,4],[83,4,63,4],[84,4,64,4],[84,8,64,8,"remaining"],[84,17,64,17],[84,20,64,20,"expoPath"],[84,28,64,28],[84,29,64,29,"nonstandardPathname"],[85,4,65,8],[86,4,66,8],[87,4,66,8],[87,5,67,9,"replace"],[87,12,67,16],[87,13,67,17],[87,19,67,23],[87,21,67,25],[87,24,67,28],[87,25,67,29],[87,26,67,30],[88,4,67,30],[88,5,68,9,"replace"],[88,12,68,16],[88,13,68,17],[88,18,68,22],[88,20,68,24],[88,22,68,26],[88,23,68,27],[88,24,68,28],[89,4,68,28],[89,5,69,9,"replace"],[89,12,69,16],[89,13,69,17],[89,20,69,24],[89,22,69,26],[89,24,69,28],[89,25,69,29],[89,26,69,30],[89,27,69,31],[90,4,70,4],[91,4,71,4,"remaining"],[91,13,71,13],[91,16,71,16,"remaining"],[91,25,71,25],[91,26,71,26,"endsWith"],[91,34,71,34],[91,35,71,35],[91,38,71,38],[91,39,71,39],[91,42,71,42,"remaining"],[91,51,71,51],[91,54,71,54],[91,57,71,57,"remaining"],[91,66,71,66],[91,69,71,69],[92,4,72,4],[92,10,72,10,"prefix"],[92,16,72,16],[92,19,72,19,"options"],[92,26,72,26],[92,28,72,28,"path"],[92,32,72,32],[92,34,72,34,"replace"],[92,41,72,41],[92,42,72,42],[92,47,72,47],[92,49,72,49],[92,51,72,51],[92,52,72,52],[92,53,72,53],[92,54,72,54],[93,4,73,4],[93,8,73,8,"prefix"],[93,14,73,14],[93,16,73,16],[94,6,74,8],[95,6,75,8],[95,12,75,14,"normalizedPrefix"],[95,28,75,30],[95,31,75,33,"prefix"],[95,37,75,39],[95,38,75,40,"endsWith"],[95,46,75,48],[95,47,75,49],[95,50,75,52],[95,51,75,53],[95,54,75,56,"prefix"],[95,60,75,62],[95,63,75,65],[95,66,75,68,"prefix"],[95,72,75,74],[95,75,75,77],[96,6,76,8],[97,6,77,8],[97,10,77,12],[97,11,77,13,"remaining"],[97,20,77,22],[97,21,77,23,"startsWith"],[97,31,77,33],[97,32,77,34,"normalizedPrefix"],[97,48,77,50],[97,49,77,51],[97,51,77,53],[98,8,78,12],[98,15,78,19,"undefined"],[98,24,78,28],[99,6,79,8],[100,6,80,8],[101,6,81,8,"remaining"],[101,15,81,17],[101,18,81,20,"remaining"],[101,27,81,29],[101,28,81,30,"replace"],[101,35,81,37],[101,36,81,38,"normalizedPrefix"],[101,52,81,54],[101,54,81,56],[101,56,81,58],[101,57,81,59],[102,4,82,4],[103,4,83,4],[103,8,83,8,"screens"],[103,15,83,15],[103,20,83,20,"undefined"],[103,29,83,29],[103,31,83,31],[104,6,84,8],[105,6,85,8],[105,12,85,14,"routes"],[105,18,85,20],[105,21,85,23,"remaining"],[105,30,85,32],[105,31,86,13,"split"],[105,36,86,18],[105,37,86,19],[105,40,86,22],[105,41,86,23],[105,42,87,13,"filter"],[105,48,87,19],[105,49,87,20,"Boolean"],[105,56,87,27],[105,57,87,28],[105,58,88,13,"map"],[105,61,88,16],[105,62,88,18,"segment"],[105,69,88,25],[105,73,88,30],[106,8,89,12],[106,14,89,18,"name"],[106,18,89,22],[106,21,89,25,"decodeURIComponent"],[106,39,89,43],[106,40,89,44,"segment"],[106,47,89,51],[106,48,89,52],[107,8,90,12],[107,15,90,19],[108,10,90,21,"name"],[109,8,90,26],[109,9,90,27],[110,6,91,8],[110,7,91,9],[110,8,91,10],[111,6,92,8],[111,10,92,12,"routes"],[111,16,92,18],[111,17,92,19,"length"],[111,23,92,25],[111,25,92,27],[112,8,93,12],[112,15,93,19,"createNestedStateObject"],[112,38,93,42],[112,39,93,43,"expoPath"],[112,47,93,51],[112,49,93,53,"routes"],[112,55,93,59],[112,57,93,61,"initialRoutes"],[112,70,93,74],[112,72,93,76],[112,74,93,78],[112,76,93,80,"expoPath"],[112,84,93,88],[112,85,93,89,"url"],[112,88,93,92],[112,89,93,93,"hash"],[112,93,93,97],[112,94,93,98],[113,6,94,8],[114,6,95,8],[114,13,95,15,"undefined"],[114,22,95,24],[115,4,96,4],[116,4,97,4],[116,8,97,8,"remaining"],[116,17,97,17],[116,22,97,22],[116,25,97,25],[116,27,97,27],[117,6,98,8],[118,6,99,8],[119,6,100,8],[120,6,101,8],[120,12,101,14,"match"],[120,17,101,19],[120,20,101,22,"expo"],[120,24,101,26],[120,25,101,27,"matchForEmptyPath"],[120,42,101,44],[120,43,101,45,"configWithRegexes"],[120,60,101,62],[120,61,101,63],[121,6,102,8],[122,6,103,8],[123,6,104,8],[124,6,105,8],[125,6,106,8],[126,6,107,8],[127,6,108,8],[128,6,109,8],[129,6,110,8],[130,6,111,8],[130,10,111,12,"match"],[130,15,111,17],[130,17,111,19],[131,8,112,12],[131,15,112,19,"createNestedStateObject"],[131,38,112,42],[131,39,112,43,"expoPath"],[131,47,112,51],[131,49,112,53,"match"],[131,54,112,58],[131,55,112,59,"routeNames"],[131,65,112,69],[131,66,112,70,"map"],[131,69,112,73],[131,70,112,75,"name"],[131,74,112,79],[131,79,112,85],[132,10,112,87,"name"],[133,8,112,92],[133,9,112,93],[133,10,112,94],[133,11,112,95],[133,13,112,97,"initialRoutes"],[133,26,112,110],[133,28,112,112,"configs"],[133,35,112,119],[133,37,112,121,"expoPath"],[133,45,112,129],[133,46,112,130,"url"],[133,49,112,133],[133,50,112,134,"hash"],[133,54,112,138],[133,55,112,139],[134,6,113,8],[135,6,114,8],[135,13,114,15,"undefined"],[135,22,114,24],[136,4,115,4],[137,4,116,4],[137,8,116,8,"result"],[137,14,116,14],[138,4,117,4],[138,8,117,8,"current"],[138,15,117,15],[139,4,118,4],[140,4,119,4],[141,4,120,4],[141,10,120,10],[142,6,120,12,"routes"],[142,12,120,18],[143,6,120,20,"remainingPath"],[144,4,120,34],[144,5,120,35],[144,8,120,38,"matchAgainstConfigs"],[144,27,120,57],[144,28,120,58,"remaining"],[144,37,120,67],[144,39,120,69,"configWithRegexes"],[144,56,120,86],[144,57,120,87],[145,4,121,4],[145,8,121,8,"routes"],[145,14,121,14],[145,19,121,19,"undefined"],[145,28,121,28],[145,30,121,30],[146,6,122,8],[147,6,123,8,"current"],[147,13,123,15],[147,16,123,18,"createNestedStateObject"],[147,39,123,41],[147,40,123,42,"expoPath"],[147,48,123,50],[147,50,123,52,"routes"],[147,56,123,58],[147,58,123,60,"initialRoutes"],[147,71,123,73],[147,73,123,75,"configs"],[147,80,123,82],[147,82,123,84,"expoPath"],[147,90,123,92],[147,91,123,93,"url"],[147,94,123,96],[147,95,123,97,"hash"],[147,99,123,101],[147,100,123,102],[148,6,124,8,"remaining"],[148,15,124,17],[148,18,124,20,"remainingPath"],[148,31,124,33],[149,6,125,8,"result"],[149,12,125,14],[149,15,125,17,"current"],[149,22,125,24],[150,4,126,4],[151,4,127,4],[151,8,127,8,"current"],[151,15,127,15],[151,19,127,19],[151,23,127,23],[151,27,127,27,"result"],[151,33,127,33],[151,37,127,37],[151,41,127,41],[151,43,127,43],[152,6,128,8],[152,13,128,15,"undefined"],[152,22,128,24],[153,4,129,4],[154,4,130,4],[154,11,130,11,"result"],[154,17,130,17],[155,2,131,0],[156,2,132,0,"exports"],[156,9,132,7],[156,10,132,8,"getStateFromPath"],[156,26,132,24],[156,29,132,27,"getStateFromPath"],[156,45,132,43],[157,2,133,0],[158,0,134,0],[159,0,135,0],[160,2,136,0],[160,6,136,4,"cachedConfigResources"],[160,27,136,25],[160,30,136,28],[160,31,137,4,"undefined"],[160,40,137,13],[160,42,138,4,"prepareConfigResources"],[160,64,138,26],[160,65,138,27],[160,66,138,28],[160,67,139,1],[161,2,140,0],[161,11,140,9,"getConfigResources"],[161,29,140,27,"getConfigResources"],[161,30,140,28,"options"],[161,37,140,35],[162,2,141,0],[163,2,142,0,"previousSegments"],[164,2,143,0],[165,2,143,0],[165,4,144,2],[166,4,145,4],[167,4,146,4],[168,4,147,4],[169,4,148,4,"cachedConfigResources"],[169,25,148,25],[169,28,148,28],[169,29,148,29,"options"],[169,36,148,36],[169,38,148,38,"prepareConfigResources"],[169,60,148,60],[169,61,148,61,"options"],[169,68,148,68],[169,70,148,70,"previousSegments"],[169,86,148,86],[169,87,148,87],[169,88,148,88],[170,4,149,4],[171,4,150,4],[172,4,151,4],[172,11,151,11,"cachedConfigResources"],[172,32,151,32],[172,33,151,33],[172,34,151,34],[172,35,151,35],[173,2,152,0],[174,2,153,0],[174,11,153,9,"prepareConfigResources"],[174,33,153,31,"prepareConfigResources"],[174,34,153,32,"options"],[174,41,153,39],[174,43,153,41,"previousSegments"],[174,59,153,57],[174,61,153,59],[175,4,154,4],[175,8,154,8,"options"],[175,15,154,15],[175,17,154,17],[176,6,155,8],[176,7,155,9],[176,8,155,10],[176,10,155,12,"native_1"],[176,18,155,20],[176,19,155,21,"validatePathConfig"],[176,37,155,39],[176,39,155,41,"options"],[176,46,155,48],[176,47,155,49],[177,4,156,4],[178,4,157,4],[178,10,157,10,"initialRoutes"],[178,23,157,23],[178,26,157,26,"getInitialRoutes"],[178,42,157,42],[178,43,157,43,"options"],[178,50,157,50],[178,51,157,51],[179,4,158,4],[179,10,158,10,"configs"],[179,17,158,17],[179,20,158,20,"getNormalizedConfigs"],[179,40,158,40],[179,41,158,41,"initialRoutes"],[179,54,158,54],[179,56,158,56,"options"],[179,63,158,63],[179,65,158,65,"screens"],[179,72,158,72],[179,74,158,74,"previousSegments"],[179,90,158,90],[179,91,158,91],[180,4,159,4,"checkForDuplicatedConfigs"],[180,29,159,29],[180,30,159,30,"configs"],[180,37,159,37],[180,38,159,38],[181,4,160,4],[181,10,160,10,"configWithRegexes"],[181,27,160,27],[181,30,160,30,"getConfigsWithRegexes"],[181,51,160,51],[181,52,160,52,"configs"],[181,59,160,59],[181,60,160,60],[182,4,161,4],[182,11,161,11],[183,6,162,8,"initialRoutes"],[183,19,162,21],[184,6,163,8,"configs"],[184,13,163,15],[185,6,164,8,"configWithRegexes"],[186,4,165,4],[186,5,165,5],[187,2,166,0],[188,2,167,0],[188,11,167,9,"getInitialRoutes"],[188,27,167,25,"getInitialRoutes"],[188,28,167,26,"options"],[188,35,167,33],[188,37,167,35],[189,4,168,4],[189,10,168,10,"initialRoutes"],[189,23,168,23],[189,26,168,26],[189,28,168,28],[190,4,169,4],[190,8,169,8,"options"],[190,15,169,15],[190,17,169,17,"initialRouteName"],[190,33,169,33],[190,35,169,35],[191,6,170,8,"initialRoutes"],[191,19,170,21],[191,20,170,22,"push"],[191,24,170,26],[191,25,170,27],[192,8,171,12,"initialRouteName"],[192,24,171,28],[192,26,171,30,"options"],[192,33,171,37],[192,34,171,38,"initialRouteName"],[192,50,171,54],[193,8,172,12,"parentScreens"],[193,21,172,25],[193,23,172,27],[194,6,173,8],[194,7,173,9],[194,8,173,10],[195,4,174,4],[196,4,175,4],[196,11,175,11,"initialRoutes"],[196,24,175,24],[197,2,176,0],[198,2,177,0],[198,11,177,9,"getNormalizedConfigs"],[198,31,177,29,"getNormalizedConfigs"],[198,32,177,30,"initialRoutes"],[198,45,177,43],[198,47,177,45,"screens"],[198,54,177,52],[198,57,177,55],[198,58,177,56],[198,59,177,57],[199,2,178,0],[200,2,179,0,"previousSegments"],[201,2,180,0],[202,2,180,0],[202,4,181,2],[203,4,182,4],[204,4,183,4],[204,11,183,11],[204,13,183,13],[204,14,184,9,"concat"],[204,20,184,15],[204,21,184,16],[204,24,184,19,"Object"],[204,30,184,25],[204,31,184,26,"keys"],[204,35,184,30],[204,36,184,31,"screens"],[204,43,184,38],[204,44,184,39],[204,45,184,40,"map"],[204,48,184,43],[204,49,184,45,"key"],[204,52,184,48],[204,56,184,53,"createNormalizedConfigs"],[204,79,184,76],[204,80,184,77,"key"],[204,83,184,80],[204,85,184,82,"screens"],[204,92,184,89],[204,94,184,91],[204,96,184,93],[204,98,184,95,"initialRoutes"],[204,111,184,108],[204,113,184,110],[204,115,184,112],[204,116,184,113],[204,117,184,114],[204,118,184,115],[204,119,185,9,"map"],[204,122,185,12],[204,123,185,13,"expo"],[204,127,185,17],[204,128,185,18,"appendIsInitial"],[204,143,185,33],[204,144,185,34,"initialRoutes"],[204,157,185,47],[204,158,185,48],[204,159,185,49],[204,160,186,9,"sort"],[204,164,186,13],[204,165,186,14,"expo"],[204,169,186,18],[204,170,186,19,"getRouteConfigSorter"],[204,190,186,39],[204,191,186,40,"previousSegments"],[204,207,186,56],[204,208,186,57],[204,209,186,58],[205,4,187,4],[206,4,188,4],[207,4,189,4],[208,4,190,4],[209,4,191,4],[210,4,192,4],[211,4,193,4],[212,4,194,4],[213,4,195,4],[214,4,196,4],[215,4,197,4],[216,4,198,4],[217,4,199,4],[218,4,200,4],[219,4,201,4],[220,4,202,4],[221,4,203,4],[222,4,204,4],[223,4,205,4],[224,4,206,4],[225,4,207,4],[226,4,208,4],[227,4,209,4],[228,4,210,4],[229,4,211,4],[230,4,212,4],[231,4,213,4],[232,4,214,4],[233,4,215,4],[234,4,216,4],[235,4,217,4],[236,4,218,4],[237,4,219,4],[238,4,220,4],[239,4,221,4],[240,4,222,4],[241,4,223,4],[242,4,224,4],[243,4,225,4],[244,4,226,4],[245,4,227,4],[246,4,228,4],[247,4,229,4],[248,4,230,4],[249,4,231,4],[250,2,232,0],[251,2,233,0],[251,11,233,9,"checkForDuplicatedConfigs"],[251,36,233,34,"checkForDuplicatedConfigs"],[251,37,233,35,"configs"],[251,44,233,42],[251,46,233,44],[252,4,234,4],[253,4,235,4,"configs"],[253,11,235,11],[253,12,235,12,"reduce"],[253,18,235,18],[253,19,235,19],[253,20,235,20,"acc"],[253,23,235,23],[253,25,235,25,"config"],[253,31,235,31],[253,36,235,36],[254,6,236,8],[254,10,236,12,"acc"],[254,13,236,15],[254,14,236,16,"config"],[254,20,236,22],[254,21,236,23,"pattern"],[254,28,236,30],[254,29,236,31],[254,31,236,33],[255,8,237,12],[255,14,237,18,"a"],[255,15,237,19],[255,18,237,22,"acc"],[255,21,237,25],[255,22,237,26,"config"],[255,28,237,32],[255,29,237,33,"pattern"],[255,36,237,40],[255,37,237,41],[255,38,237,42,"routeNames"],[255,48,237,52],[256,8,238,12],[256,14,238,18,"b"],[256,15,238,19],[256,18,238,22,"config"],[256,24,238,28],[256,25,238,29,"routeNames"],[256,35,238,39],[257,8,239,12],[258,8,240,12],[259,8,241,12],[259,14,241,18,"intersects"],[259,24,241,28],[259,27,241,31,"a"],[259,28,241,32],[259,29,241,33,"length"],[259,35,241,39],[259,38,241,42,"b"],[259,39,241,43],[259,40,241,44,"length"],[259,46,241,50],[259,49,241,53,"b"],[259,50,241,54],[259,51,241,55,"every"],[259,56,241,60],[259,57,241,61],[259,58,241,62,"it"],[259,60,241,64],[259,62,241,66,"i"],[259,63,241,67],[259,68,241,72,"a"],[259,69,241,73],[259,70,241,74,"i"],[259,71,241,75],[259,72,241,76],[259,77,241,81,"it"],[259,79,241,83],[259,80,241,84],[259,83,241,87,"a"],[259,84,241,88],[259,85,241,89,"every"],[259,90,241,94],[259,91,241,95],[259,92,241,96,"it"],[259,94,241,98],[259,96,241,100,"i"],[259,97,241,101],[259,102,241,106,"b"],[259,103,241,107],[259,104,241,108,"i"],[259,105,241,109],[259,106,241,110],[259,111,241,115,"it"],[259,113,241,117],[259,114,241,118],[260,8,242,12],[260,12,242,16],[260,13,242,17,"intersects"],[260,23,242,27],[260,25,242,29],[261,10,243,16],[261,16,243,22],[261,20,243,26,"Error"],[261,25,243,31],[261,26,243,32],[261,91,243,97,"config"],[261,97,243,103],[261,98,243,104,"pattern"],[261,105,243,111],[261,128,243,134,"a"],[261,129,243,135],[261,130,243,136,"join"],[261,134,243,140],[261,135,243,141],[261,140,243,146],[261,141,243,147],[261,151,243,157,"b"],[261,152,243,158],[261,153,243,159,"join"],[261,157,243,163],[261,158,243,164],[261,163,243,169],[261,164,243,170],[261,236,243,242],[261,237,243,243],[262,8,244,12],[263,6,245,8],[264,6,246,8],[264,13,246,15,"Object"],[264,19,246,21],[264,20,246,22,"assign"],[264,26,246,28],[264,27,246,29,"acc"],[264,30,246,32],[264,32,246,34],[265,8,247,12],[265,9,247,13,"config"],[265,15,247,19],[265,16,247,20,"pattern"],[265,23,247,27],[265,26,247,30,"config"],[266,6,248,8],[266,7,248,9],[266,8,248,10],[267,4,249,4],[267,5,249,5],[267,7,249,7],[267,8,249,8],[267,9,249,9],[267,10,249,10],[268,2,250,0],[269,2,251,0],[269,11,251,9,"getConfigsWithRegexes"],[269,32,251,30,"getConfigsWithRegexes"],[269,33,251,31,"configs"],[269,40,251,38],[269,42,251,40],[270,4,252,4],[270,11,252,11,"configs"],[270,18,252,18],[270,19,252,19,"map"],[270,22,252,22],[270,23,252,24,"c"],[270,24,252,25],[270,28,252,25,"Object"],[270,34,252,25],[270,35,252,25,"assign"],[270,41,252,25],[270,46,253,11,"c"],[270,47,253,12],[271,6,254,8],[272,6,255,8],[273,6,256,8],[274,6,257,8,"regex"],[274,11,257,13],[274,13,257,15,"expo"],[274,17,257,19],[274,18,257,20,"configRegExp"],[274,30,257,32],[274,31,257,33,"c"],[274,32,257,34],[275,6,258,8],[276,4,258,8],[276,6,259,6],[276,7,259,7],[277,2,260,0],[278,2,261,0],[278,8,261,6,"joinPaths"],[278,17,261,15],[278,20,261,18,"joinPaths"],[278,21,261,19],[278,24,261,22,"paths"],[278,29,261,27],[278,34,261,32],[278,36,261,34],[278,37,262,5,"concat"],[278,43,262,11],[278,44,262,12],[278,47,262,15,"paths"],[278,52,262,20],[278,53,262,21,"map"],[278,56,262,24],[278,57,262,26,"p"],[278,58,262,27],[278,62,262,32,"p"],[278,63,262,33],[278,64,262,34,"split"],[278,69,262,39],[278,70,262,40],[278,73,262,43],[278,74,262,44],[278,75,262,45],[278,76,262,46],[278,77,263,5,"filter"],[278,83,263,11],[278,84,263,12,"Boolean"],[278,91,263,19],[278,92,263,20],[278,93,264,5,"join"],[278,97,264,9],[278,98,264,10],[278,101,264,13],[278,102,264,14],[279,2,265,0],[279,8,265,6,"matchAgainstConfigs"],[279,27,265,25],[279,30,265,28,"matchAgainstConfigs"],[279,31,265,29,"remaining"],[279,40,265,38],[279,42,265,40,"configs"],[279,49,265,47],[279,54,265,52],[280,4,266,4],[280,8,266,8,"routes"],[280,14,266,14],[281,4,267,4],[281,8,267,8,"remainingPath"],[281,21,267,21],[281,24,267,24,"remaining"],[281,33,267,33],[282,4,268,4],[283,4,269,4],[283,10,269,10,"allParams"],[283,19,269,19],[283,22,269,22,"Object"],[283,28,269,28],[283,29,269,29,"create"],[283,35,269,35],[283,36,269,36],[283,40,269,40],[283,41,269,41],[284,4,270,4],[285,4,271,4],[286,4,272,4],[286,9,272,9],[286,15,272,15,"config"],[286,21,272,21],[286,25,272,25,"configs"],[286,32,272,32],[286,34,272,34],[287,6,273,8],[287,10,273,12],[287,11,273,13,"config"],[287,17,273,19],[287,18,273,20,"regex"],[287,23,273,25],[287,25,273,27],[288,8,274,12],[289,6,275,8],[290,6,276,8],[290,12,276,14,"match"],[290,17,276,19],[290,20,276,22,"remainingPath"],[290,33,276,35],[290,34,276,36,"match"],[290,39,276,41],[290,40,276,42,"config"],[290,46,276,48],[290,47,276,49,"regex"],[290,52,276,54],[290,53,276,55],[291,6,277,8],[292,6,278,8],[292,10,278,12,"match"],[292,15,278,17],[292,17,278,19],[293,8,279,12],[293,14,279,18,"matchResult"],[293,25,279,29],[293,28,279,32,"config"],[293,34,279,38],[293,35,279,39,"pattern"],[293,42,279,46],[293,44,279,48,"split"],[293,49,279,53],[293,50,279,54],[293,53,279,57],[293,54,279,58],[293,55,279,59,"reduce"],[293,61,279,65],[293,62,279,66],[293,63,279,67,"acc"],[293,66,279,70],[293,68,279,72,"p"],[293,69,279,73],[293,71,279,75,"index"],[293,76,279,80],[293,81,279,85],[294,10,280,16],[294,14,280,20],[294,15,280,21,"expo"],[294,19,280,25],[294,20,280,26,"isDynamicPart"],[294,33,280,39],[294,34,280,40,"p"],[294,35,280,41],[294,36,280,42],[294,38,280,44],[295,12,281,20],[295,19,281,27,"acc"],[295,22,281,30],[296,10,282,16],[297,10,283,16,"acc"],[297,13,283,19],[297,14,283,20,"pos"],[297,17,283,23],[297,21,283,27],[297,22,283,28],[298,10,284,16],[299,10,285,16],[299,16,285,22,"decodedParamSegment"],[299,35,285,41],[299,38,285,44,"expo"],[299,42,285,48],[299,43,285,49,"safelyDecodeURIComponent"],[299,67,285,73],[300,10,286,16],[301,10,287,16],[302,10,288,16,"match"],[302,15,288,21],[302,16,288,22],[302,17,288,23,"acc"],[302,20,288,26],[302,21,288,27,"pos"],[302,24,288,30],[302,27,288,33],[302,28,288,34],[302,32,288,38],[302,33,288,39],[303,10,289,20],[304,10,289,20],[304,11,290,21,"replace"],[304,18,290,28],[304,19,290,29],[304,24,290,34],[304,26,290,36],[304,28,290,38],[304,29,290,39],[304,30,290,40],[305,10,291,16],[306,10,292,16,"Object"],[306,16,292,22],[306,17,292,23,"assign"],[306,23,292,29],[306,24,292,30,"acc"],[306,27,292,33],[306,28,292,34,"matchedParams"],[306,41,292,47],[306,43,292,49],[307,12,293,20],[307,13,293,21,"p"],[307,14,293,22],[307,17,293,25,"Object"],[307,23,293,31],[307,24,293,32,"assign"],[307,30,293,38],[307,31,293,39,"acc"],[307,34,293,42],[307,35,293,43,"matchedParams"],[307,48,293,56],[307,49,293,57,"p"],[307,50,293,58],[307,51,293,59],[307,55,293,63],[307,56,293,64],[307,57,293,65],[307,59,293,67],[308,14,294,24],[308,15,294,25,"index"],[308,20,294,30],[308,23,294,33,"decodedParamSegment"],[309,12,295,20],[309,13,295,21],[310,10,296,16],[310,11,296,17],[310,12,296,18],[311,10,297,16],[311,17,297,23,"acc"],[311,20,297,26],[312,8,298,12],[312,9,298,13],[312,11,298,15],[313,10,298,17,"pos"],[313,13,298,20],[313,15,298,22],[313,16,298,23],[313,17,298,24],[314,10,298,26,"matchedParams"],[314,23,298,39],[314,25,298,41],[314,26,298,42],[315,8,298,44],[315,9,298,45],[315,10,298,46],[316,8,299,12],[316,14,299,18,"matchedParams"],[316,27,299,31],[316,30,299,34,"matchResult"],[316,41,299,45],[316,42,299,46,"matchedParams"],[316,55,299,59],[316,59,299,63],[316,60,299,64],[316,61,299,65],[317,8,300,12,"routes"],[317,14,300,18],[317,17,300,21,"config"],[317,23,300,27],[317,24,300,28,"routeNames"],[317,34,300,38],[317,35,300,39,"map"],[317,38,300,42],[317,39,300,44,"name"],[317,43,300,48],[317,47,300,53],[318,10,301,16],[318,16,301,22,"routeConfig"],[318,27,301,33],[318,30,301,36,"configs"],[318,37,301,43],[318,38,301,44,"find"],[318,42,301,48],[318,43,301,50,"c"],[318,44,301,51],[318,48,301,56],[319,12,302,20],[320,12,303,20],[320,19,303,27,"c"],[320,20,303,28],[320,21,303,29,"screen"],[320,27,303,35],[320,32,303,40,"name"],[320,36,303,44],[320,40,303,48,"config"],[320,46,303,54],[320,47,303,55,"pattern"],[320,54,303,62],[320,55,303,63,"startsWith"],[320,65,303,73],[320,66,303,74,"c"],[320,67,303,75],[320,68,303,76,"pattern"],[320,75,303,83],[320,76,303,84],[321,10,304,16],[321,11,304,17],[321,12,304,18],[322,10,305,16],[323,10,306,16],[323,16,306,22,"normalizedPath"],[323,30,306,36],[323,33,306,39,"routeConfig"],[323,44,306,50],[323,46,306,52,"path"],[323,50,306,56],[323,51,306,57,"split"],[323,56,306,62],[323,57,306,63],[323,60,306,66],[323,61,306,67],[323,62,306,68,"filter"],[323,68,306,74],[323,69,306,75,"Boolean"],[323,76,306,82],[323,77,306,83],[323,78,306,84,"join"],[323,82,306,88],[323,83,306,89],[323,86,306,92],[323,87,306,93],[324,10,307,16],[325,10,308,16],[325,16,308,22,"numInitialSegments"],[325,34,308,40],[325,37,308,43,"routeConfig"],[325,48,308,54],[325,50,308,56,"pattern"],[326,10,309,20],[327,10,309,20],[327,11,310,21,"replace"],[327,18,310,28],[327,19,310,29],[327,23,310,33,"RegExp"],[327,29,310,39],[327,30,310,40],[327,33,310,43],[327,34,310,44],[327,35,310,45],[327,37,310,47,"escape_string_regexp_1"],[327,59,310,69],[327,60,310,70,"default"],[327,67,310,77],[327,69,310,79,"normalizedPath"],[327,83,310,93],[327,84,310,94],[327,87,310,97],[327,88,310,98],[327,90,310,100],[327,92,310,102],[327,93,310,103],[327,95,311,22,"split"],[327,100,311,27],[327,101,311,28],[327,104,311,31],[327,105,311,32],[327,106,311,33,"length"],[327,112,311,39],[328,10,312,16],[328,16,312,22,"params"],[328,22,312,28],[328,25,312,31,"normalizedPath"],[328,39,312,45],[328,41,313,22,"split"],[328,46,313,27],[328,47,313,28],[328,50,313,31],[328,51,313,32],[328,52,314,21,"reduce"],[328,58,314,27],[328,59,314,28],[328,60,314,29,"acc"],[328,63,314,32],[328,65,314,34,"p"],[328,66,314,35],[328,68,314,37,"index"],[328,73,314,42],[328,78,314,47],[329,12,315,20],[329,16,315,24],[329,17,315,25,"expo"],[329,21,315,29],[329,22,315,30,"isDynamicPart"],[329,35,315,43],[329,36,315,44,"p"],[329,37,315,45],[329,38,315,46],[329,40,315,48],[330,14,316,24],[330,21,316,31,"acc"],[330,24,316,34],[331,12,317,20],[332,12,318,20],[333,12,319,20],[334,12,320,20],[334,18,320,26,"offset"],[334,24,320,32],[334,27,320,35,"numInitialSegments"],[334,45,320,53],[334,48,320,56,"numInitialSegments"],[334,66,320,74],[334,69,320,77],[334,70,320,78],[334,73,320,81],[334,74,320,82],[335,12,321,20],[336,12,322,20],[337,12,323,20],[337,18,323,26,"value"],[337,23,323,31],[337,26,323,34,"expo"],[337,30,323,38],[337,31,323,39,"getParamValue"],[337,44,323,52],[337,45,323,53,"p"],[337,46,323,54],[337,48,323,56,"matchedParams"],[337,61,323,69],[337,62,323,70,"p"],[337,63,323,71],[337,64,323,72],[337,67,323,75,"index"],[337,72,323,80],[337,75,323,83,"offset"],[337,81,323,89],[337,82,323,90],[337,83,323,91],[338,12,324,20],[339,12,325,20],[339,16,325,24,"value"],[339,21,325,29],[339,23,325,31],[340,14,326,24],[341,14,327,24],[342,14,328,24],[342,20,328,30,"key"],[342,23,328,33],[342,26,328,36,"expo"],[342,30,328,40],[342,31,328,41,"replacePart"],[342,42,328,52],[342,43,328,53,"p"],[342,44,328,54],[342,45,328,55],[343,14,329,24],[344,14,330,24,"acc"],[344,17,330,27],[344,18,330,28,"key"],[344,21,330,31],[344,22,330,32],[344,25,330,35,"routeConfig"],[344,36,330,46],[344,38,330,48,"parse"],[344,43,330,53],[344,46,330,56,"key"],[344,49,330,59],[344,50,330,60],[344,53,330,63,"routeConfig"],[344,64,330,74],[344,65,330,75,"parse"],[344,70,330,80],[344,71,330,81,"key"],[344,74,330,84],[344,75,330,85],[344,76,330,86,"value"],[344,81,330,91],[344,82,330,92],[344,85,330,95,"value"],[344,90,330,100],[345,12,331,20],[346,12,332,20],[346,19,332,27,"acc"],[346,22,332,30],[347,10,333,16],[347,11,333,17],[347,13,333,19],[347,14,333,20],[347,15,333,21],[347,16,333,22],[348,10,334,16],[348,14,334,20,"params"],[348,20,334,26],[348,24,334,30,"Object"],[348,30,334,36],[348,31,334,37,"keys"],[348,35,334,41],[348,36,334,42,"params"],[348,42,334,48],[348,43,334,49],[348,44,334,50,"length"],[348,50,334,56],[348,52,334,58],[349,12,335,20,"Object"],[349,18,335,26],[349,19,335,27,"assign"],[349,25,335,33],[349,26,335,34,"allParams"],[349,35,335,43],[349,37,335,45,"params"],[349,43,335,51],[349,44,335,52],[350,12,336,20],[350,19,336,27],[351,14,336,29,"name"],[351,18,336,33],[352,14,336,35,"params"],[353,12,336,42],[353,13,336,43],[354,10,337,16],[355,10,338,16],[355,17,338,23],[356,12,338,25,"name"],[357,10,338,30],[357,11,338,31],[358,8,339,12],[358,9,339,13],[358,10,339,14],[359,8,340,12,"remainingPath"],[359,21,340,25],[359,24,340,28,"remainingPath"],[359,37,340,41],[359,38,340,42,"replace"],[359,45,340,49],[359,46,340,50,"match"],[359,51,340,55],[359,52,340,56],[359,53,340,57],[359,54,340,58],[359,56,340,60],[359,58,340,62],[359,59,340,63],[360,8,341,12],[361,6,342,8],[362,4,343,4],[363,4,344,4],[364,4,345,4,"expo"],[364,8,345,8],[364,9,345,9,"populateParams"],[364,23,345,23],[364,24,345,24,"routes"],[364,30,345,30],[364,32,345,32,"allParams"],[364,41,345,41],[364,42,345,42],[365,4,346,4],[366,4,347,4],[366,11,347,11],[367,6,347,13,"routes"],[367,12,347,19],[368,6,347,21,"remainingPath"],[369,4,347,35],[369,5,347,36],[370,2,348,0],[370,3,348,1],[371,2,349,0],[371,8,349,6,"createNormalizedConfigs"],[371,31,349,29],[371,34,349,32,"createNormalizedConfigs"],[371,35,349,33,"screen"],[371,41,349,39],[371,43,349,41,"routeConfig"],[371,54,349,52],[371,56,349,54,"routeNames"],[371,66,349,64],[371,69,349,67],[371,71,349,69],[371,73,349,71,"initials"],[371,81,349,79],[371,83,349,81,"parentScreens"],[371,96,349,94],[371,98,349,96,"parentPattern"],[371,111,349,109],[371,116,349,114],[372,4,350,4],[372,10,350,10,"configs"],[372,17,350,17],[372,20,350,20],[372,22,350,22],[373,4,351,4,"routeNames"],[373,14,351,14],[373,15,351,15,"push"],[373,19,351,19],[373,20,351,20,"screen"],[373,26,351,26],[373,27,351,27],[374,4,352,4,"parentScreens"],[374,17,352,17],[374,18,352,18,"push"],[374,22,352,22],[374,23,352,23,"screen"],[374,29,352,29],[374,30,352,30],[375,4,353,4],[375,10,353,10,"config"],[375,16,353,16],[375,19,353,19,"routeConfig"],[375,30,353,30],[375,31,353,31,"screen"],[375,37,353,37],[375,38,353,38],[376,4,354,4],[376,8,354,8],[376,15,354,15,"config"],[376,21,354,21],[376,26,354,26],[376,34,354,34],[376,36,354,36],[377,6,355,8],[378,6,356,8],[378,12,356,14,"pattern"],[378,19,356,21],[378,22,356,24,"parentPattern"],[378,35,356,37],[378,38,356,40,"joinPaths"],[378,47,356,49],[378,48,356,50,"parentPattern"],[378,61,356,63],[378,63,356,65,"config"],[378,69,356,71],[378,70,356,72],[378,73,356,75,"config"],[378,79,356,81],[379,6,357,8,"configs"],[379,13,357,15],[379,14,357,16,"push"],[379,18,357,20],[379,19,357,21,"createConfigItem"],[379,35,357,37],[379,36,357,38,"screen"],[379,42,357,44],[379,44,357,46,"routeNames"],[379,54,357,56],[379,56,357,58,"pattern"],[379,63,357,65],[379,65,357,67,"config"],[379,71,357,73],[379,72,357,74],[379,73,357,75],[380,4,358,4],[380,5,358,5],[380,11,359,9],[380,15,359,13],[380,22,359,20,"config"],[380,28,359,26],[380,33,359,31],[380,41,359,39],[380,43,359,41],[381,6,360,8],[381,10,360,12,"pattern"],[381,17,360,19],[382,6,361,8],[383,6,362,8],[384,6,363,8],[385,6,364,8],[385,10,364,12],[385,17,364,19,"config"],[385,23,364,25],[385,24,364,26,"path"],[385,28,364,30],[385,33,364,35],[385,41,364,43],[385,43,364,45],[386,8,365,12],[386,12,365,16,"config"],[386,18,365,22],[386,19,365,23,"exact"],[386,24,365,28],[386,28,365,32,"config"],[386,34,365,38],[386,35,365,39,"path"],[386,39,365,43],[386,44,365,48,"undefined"],[386,53,365,57],[386,55,365,59],[387,10,366,16],[387,16,366,22],[387,20,366,26,"Error"],[387,25,366,31],[387,26,366,32],[387,176,366,182],[387,177,366,183],[388,8,367,12],[389,8,368,12,"pattern"],[389,15,368,19],[389,18,369,16,"config"],[389,24,369,22],[389,25,369,23,"exact"],[389,30,369,28],[389,35,369,33],[389,39,369,37],[389,42,370,22,"joinPaths"],[389,51,370,31],[389,52,370,32,"parentPattern"],[389,65,370,45],[389,69,370,49],[389,71,370,51],[389,73,370,53,"config"],[389,79,370,59],[389,80,370,60,"path"],[389,84,370,64],[389,88,370,68],[389,90,370,70],[389,91,370,71],[389,94,371,22,"config"],[389,100,371,28],[389,101,371,29,"path"],[389,105,371,33],[389,109,371,37],[389,111,371,39],[390,8,372,12,"configs"],[390,15,372,19],[390,16,372,20,"push"],[390,20,372,24],[390,21,372,25,"createConfigItem"],[390,37,372,41],[390,38,372,42,"screen"],[390,44,372,48],[390,46,372,50,"routeNames"],[390,56,372,60],[390,58,372,62,"pattern"],[390,65,372,69],[390,67,372,71,"config"],[390,73,372,77],[390,74,372,78,"path"],[390,78,372,82],[390,80,372,84,"config"],[390,86,372,90],[390,87,372,91,"parse"],[390,92,372,96],[390,94,372,98,"config"],[390,100,372,104],[390,101,372,105],[390,102,372,106],[391,6,373,8],[392,6,374,8],[392,10,374,12,"config"],[392,16,374,18],[392,17,374,19,"screens"],[392,24,374,26],[392,26,374,28],[393,8,375,12],[394,8,376,12],[394,12,376,16,"config"],[394,18,376,22],[394,19,376,23,"initialRouteName"],[394,35,376,39],[394,37,376,41],[395,10,377,16,"initials"],[395,18,377,24],[395,19,377,25,"push"],[395,23,377,29],[395,24,377,30],[396,12,378,20,"initialRouteName"],[396,28,378,36],[396,30,378,38,"config"],[396,36,378,44],[396,37,378,45,"initialRouteName"],[396,53,378,61],[397,12,379,20,"parentScreens"],[398,10,380,16],[398,11,380,17],[398,12,380,18],[399,8,381,12],[400,8,382,12,"Object"],[400,14,382,18],[400,15,382,19,"keys"],[400,19,382,23],[400,20,382,24,"config"],[400,26,382,30],[400,27,382,31,"screens"],[400,34,382,38],[400,35,382,39],[400,36,382,40,"forEach"],[400,43,382,47],[400,44,382,49,"nestedConfig"],[400,56,382,61],[400,60,382,66],[401,10,383,16],[401,16,383,22,"result"],[401,22,383,28],[401,25,383,31,"createNormalizedConfigs"],[401,48,383,54],[401,49,383,55,"nestedConfig"],[401,61,383,67],[401,63,383,69,"config"],[401,69,383,75],[401,70,383,76,"screens"],[401,77,383,83],[401,79,383,85,"routeNames"],[401,89,383,95],[401,91,383,97,"initials"],[401,99,383,105],[401,101,383,107],[401,102,383,108],[401,105,383,111,"parentScreens"],[401,118,383,124],[401,119,383,125],[401,121,383,127,"pattern"],[401,128,383,134],[401,132,383,138,"parentPattern"],[401,145,383,151],[401,146,383,152],[402,10,384,16,"configs"],[402,17,384,23],[402,18,384,24,"push"],[402,22,384,28],[402,23,384,29],[402,26,384,32,"result"],[402,32,384,38],[402,33,384,39],[403,8,385,12],[403,9,385,13],[403,10,385,14],[404,6,386,8],[405,4,387,4],[406,4,388,4,"routeNames"],[406,14,388,14],[406,15,388,15,"pop"],[406,18,388,18],[406,19,388,19],[406,20,388,20],[407,4,389,4],[407,11,389,11,"configs"],[407,18,389,18],[408,2,390,0],[408,3,390,1],[409,2,391,0],[409,8,391,6,"createConfigItem"],[409,24,391,22],[409,27,391,25,"createConfigItem"],[409,28,391,26,"screen"],[409,34,391,32],[409,36,391,34,"routeNames"],[409,46,391,44],[409,48,391,46,"pattern"],[409,55,391,53],[409,57,391,55,"path"],[409,61,391,59],[409,63,391,61,"parse"],[409,68,391,66],[409,71,391,69,"undefined"],[409,80,391,78],[409,82,391,80,"config"],[409,88,391,86],[409,91,391,89],[409,92,391,90],[409,93,391,91],[409,98,391,96],[410,4,392,4],[411,4,393,4,"pattern"],[411,11,393,11],[411,14,393,14,"pattern"],[411,21,393,21],[411,22,393,22,"split"],[411,27,393,27],[411,28,393,28],[411,31,393,31],[411,32,393,32],[411,33,393,33,"filter"],[411,39,393,39],[411,40,393,40,"Boolean"],[411,47,393,47],[411,48,393,48],[411,49,393,49,"join"],[411,53,393,53],[411,54,393,54],[411,57,393,57],[411,58,393,58],[412,4,394,4],[412,10,394,10,"regex"],[412,15,394,15],[412,18,394,18,"pattern"],[412,25,394,25],[412,28,395,10],[412,32,395,14,"RegExp"],[412,38,395,20],[412,39,395,21],[412,44,395,26,"pattern"],[412,51,395,33],[412,52,396,13,"split"],[412,57,396,18],[412,58,396,19],[412,61,396,22],[412,62,396,23],[412,63,397,13,"map"],[412,66,397,16],[412,67,397,18,"it"],[412,69,397,20],[412,73,397,25],[413,6,398,12],[413,10,398,16,"it"],[413,12,398,18],[413,13,398,19,"startsWith"],[413,23,398,29],[413,24,398,30],[413,27,398,33],[413,28,398,34],[413,30,398,36],[414,8,399,16],[414,15,399,23],[414,29,399,37,"it"],[414,31,399,39],[414,32,399,40,"endsWith"],[414,40,399,48],[414,41,399,49],[414,44,399,52],[414,45,399,53],[414,48,399,56],[414,51,399,59],[414,54,399,62],[414,56,399,64],[414,59,399,67],[415,6,400,12],[416,6,401,12],[416,13,401,19],[416,16,401,22,"it"],[416,18,401,24],[416,23,401,29],[416,26,401,32],[416,29,401,35],[416,33,401,39],[416,36,401,42],[416,37,401,43],[416,38,401,44],[416,40,401,46,"escape_string_regexp_1"],[416,62,401,68],[416,63,401,69,"default"],[416,70,401,76],[416,72,401,78,"it"],[416,74,401,80],[416,75,401,81],[416,80,401,86],[417,4,402,8],[417,5,402,9],[417,6,402,10],[417,7,403,13,"join"],[417,11,403,17],[417,12,403,18],[417,14,403,20],[417,15,403,21],[417,18,403,24],[417,19,403,25],[417,22,404,10,"undefined"],[417,31,404,19],[418,4,405,4],[418,11,405,4,"Object"],[418,17,405,4],[418,18,405,4,"assign"],[418,24,405,4],[419,6,406,8,"screen"],[419,12,406,14],[420,6,407,8,"regex"],[420,11,407,13],[421,6,408,8,"pattern"],[421,13,408,15],[422,6,409,8,"path"],[422,10,409,12],[423,6,410,8],[424,6,411,8,"routeNames"],[424,16,411,18],[424,18,411,20],[424,19,411,21],[424,22,411,24,"routeNames"],[424,32,411,34],[424,33,411,35],[425,6,412,8,"parse"],[426,4,412,13],[426,7,414,11,"expo"],[426,11,414,15],[426,12,414,16,"createConfig"],[426,24,414,28],[426,25,414,29,"screen"],[426,31,414,35],[426,33,414,37,"pattern"],[426,40,414,44],[426,42,414,46,"routeNames"],[426,52,414,56],[426,54,414,58,"config"],[426,60,414,64],[426,61,414,65],[427,2,417,0],[427,3,417,1],[428,2,418,0],[428,8,418,6,"findParseConfigForRoute"],[428,31,418,29],[428,34,418,32,"findParseConfigForRoute"],[428,35,418,33,"routeName"],[428,44,418,42],[428,46,418,44,"flatConfig"],[428,56,418,54],[428,61,418,59],[429,4,419,4],[429,9,419,9],[429,15,419,15,"config"],[429,21,419,21],[429,25,419,25,"flatConfig"],[429,35,419,35],[429,37,419,37],[430,6,420,8],[430,10,420,12,"routeName"],[430,19,420,21],[430,24,420,26,"config"],[430,30,420,32],[430,31,420,33,"routeNames"],[430,41,420,43],[430,42,420,44,"config"],[430,48,420,50],[430,49,420,51,"routeNames"],[430,59,420,61],[430,60,420,62,"length"],[430,66,420,68],[430,69,420,71],[430,70,420,72],[430,71,420,73],[430,73,420,75],[431,8,421,12],[431,15,421,19,"config"],[431,21,421,25],[431,22,421,26,"parse"],[431,27,421,31],[432,6,422,8],[433,4,423,4],[434,4,424,4],[434,11,424,11,"undefined"],[434,20,424,20],[435,2,425,0],[435,3,425,1],[436,2,426,0],[437,2,427,0],[437,8,427,6,"findInitialRoute"],[437,24,427,22],[437,27,427,25,"findInitialRoute"],[437,28,427,26,"routeName"],[437,37,427,35],[437,39,427,37,"parentScreens"],[437,52,427,50],[437,54,427,52,"initialRoutes"],[437,67,427,65],[437,72,427,70],[438,4,428,4],[438,9,428,9],[438,15,428,15,"config"],[438,21,428,21],[438,25,428,25,"initialRoutes"],[438,38,428,38],[438,40,428,40],[439,6,429,8],[439,10,429,12,"parentScreens"],[439,23,429,25],[439,24,429,26,"length"],[439,30,429,32],[439,35,429,37,"config"],[439,41,429,43],[439,42,429,44,"parentScreens"],[439,55,429,57],[439,56,429,58,"length"],[439,62,429,64],[439,64,429,66],[440,8,430,12],[440,12,430,16,"sameParents"],[440,23,430,27],[440,26,430,30],[440,30,430,34],[441,8,431,12],[441,13,431,17],[441,17,431,21,"i"],[441,18,431,22],[441,21,431,25],[441,22,431,26],[441,24,431,28,"i"],[441,25,431,29],[441,28,431,32,"parentScreens"],[441,41,431,45],[441,42,431,46,"length"],[441,48,431,52],[441,50,431,54,"i"],[441,51,431,55],[441,53,431,57],[441,55,431,59],[442,10,432,16],[442,14,432,20,"parentScreens"],[442,27,432,33],[442,28,432,34,"i"],[442,29,432,35],[442,30,432,36],[442,31,432,37,"localeCompare"],[442,44,432,50],[442,45,432,51,"config"],[442,51,432,57],[442,52,432,58,"parentScreens"],[442,65,432,71],[442,66,432,72,"i"],[442,67,432,73],[442,68,432,74],[442,69,432,75],[442,74,432,80],[442,75,432,81],[442,77,432,83],[443,12,433,20,"sameParents"],[443,23,433,31],[443,26,433,34],[443,31,433,39],[444,12,434,20],[445,10,435,16],[446,8,436,12],[447,8,437,12],[447,12,437,16,"sameParents"],[447,23,437,27],[447,25,437,29],[448,10,438,16],[448,17,438,23,"routeName"],[448,26,438,32],[448,31,438,37,"config"],[448,37,438,43],[448,38,438,44,"initialRouteName"],[448,54,438,60],[448,57,438,63,"config"],[448,63,438,69],[448,64,438,70,"initialRouteName"],[448,80,438,86],[448,83,438,89,"undefined"],[448,92,438,98],[449,8,439,12],[450,6,440,8],[451,4,441,4],[452,4,442,4],[452,11,442,11,"undefined"],[452,20,442,20],[453,2,443,0],[453,3,443,1],[454,2,444,0],[455,2,445,0],[456,2,446,0],[456,8,446,6,"createStateObject"],[456,25,446,23],[456,28,446,26,"createStateObject"],[456,29,446,27,"initialRoute"],[456,41,446,39],[456,43,446,41,"route"],[456,48,446,46],[456,50,446,48,"isEmpty"],[456,57,446,55],[456,62,446,60],[457,4,447,4],[457,8,447,8,"isEmpty"],[457,15,447,15],[457,17,447,17],[458,6,448,8],[458,10,448,12,"initialRoute"],[458,22,448,24],[458,24,448,26],[459,8,449,12],[459,15,449,19],[460,10,450,16,"index"],[460,15,450,21],[460,17,450,23],[460,18,450,24],[461,10,451,16,"routes"],[461,16,451,22],[461,18,451,24],[461,19,451,25],[462,12,451,27,"name"],[462,16,451,31],[462,18,451,33,"initialRoute"],[462,30,451,45],[463,12,451,47,"params"],[463,18,451,53],[463,20,451,55,"route"],[463,25,451,60],[463,26,451,61,"params"],[464,10,451,68],[464,11,451,69],[464,13,451,71,"route"],[464,18,451,76],[465,8,452,12],[465,9,452,13],[466,6,453,8],[466,7,453,9],[466,13,454,13],[467,8,455,12],[467,15,455,19],[468,10,456,16,"routes"],[468,16,456,22],[468,18,456,24],[468,19,456,25,"route"],[468,24,456,30],[469,8,457,12],[469,9,457,13],[470,6,458,8],[471,4,459,4],[471,5,459,5],[471,11,460,9],[472,6,461,8],[472,10,461,12,"initialRoute"],[472,22,461,24],[472,24,461,26],[473,8,462,12],[473,15,462,19],[474,10,463,16,"index"],[474,15,463,21],[474,17,463,23],[474,18,463,24],[475,10,464,16,"routes"],[475,16,464,22],[475,18,464,24],[475,19,465,20],[476,12,465,22,"name"],[476,16,465,26],[476,18,465,28,"initialRoute"],[476,30,465,40],[477,12,465,42,"params"],[477,18,465,48],[477,20,465,50,"route"],[477,25,465,55],[477,26,465,56,"params"],[478,10,465,63],[478,11,465,64],[478,13,465,64,"Object"],[478,19,465,64],[478,20,465,64,"assign"],[478,26,465,64],[478,31,466,25,"route"],[478,36,466,30],[479,12,466,32,"state"],[479,17,466,37],[479,19,466,39],[480,14,466,41,"routes"],[480,20,466,47],[480,22,466,49],[481,12,466,52],[482,10,466,53],[483,8,468,12],[483,9,468,13],[484,6,469,8],[484,7,469,9],[484,13,470,13],[485,8,471,12],[485,15,471,19],[486,10,472,16,"routes"],[486,16,472,22],[486,18,472,24],[486,19,472,24,"Object"],[486,25,472,24],[486,26,472,24,"assign"],[486,32,472,24],[486,37,472,30,"route"],[486,42,472,35],[487,12,472,37,"state"],[487,17,472,42],[487,19,472,44],[488,14,472,46,"routes"],[488,20,472,52],[488,22,472,54],[489,12,472,57],[490,10,472,58],[491,8,473,12],[491,9,473,13],[492,6,474,8],[493,4,475,4],[494,2,476,0],[494,3,476,1],[495,2,477,0],[495,8,477,6,"createNestedStateObject"],[495,31,477,29],[495,34,477,32,"createNestedStateObject"],[495,35,477,32,"_ref"],[495,39,477,32],[495,41,477,55,"routes"],[495,47,477,61],[495,49,477,63,"initialRoutes"],[495,62,477,76],[495,64,477,78,"flatConfig"],[495,74,477,88],[495,76,477,90,"hash"],[495,80,477,94],[495,85,477,99],[496,4,477,99],[496,8,477,33],[497,8,477,35,"path"],[498,6,477,52],[498,7,477,53],[498,10,477,53,"_ref"],[498,14,477,53],[499,6,477,44,"expoURL"],[499,13,477,51],[499,16,477,51,"_objectWithoutPropertiesLoose"],[499,45,477,51],[499,46,477,51,"_ref"],[499,50,477,51],[499,52,477,51,"_excluded"],[499,61,477,51],[500,4,478,4],[500,8,478,8,"route"],[500,13,478,13],[500,16,478,16,"routes"],[500,22,478,22],[500,23,478,23,"shift"],[500,28,478,28],[500,29,478,29],[500,30,478,30],[501,4,479,4],[501,10,479,10,"parentScreens"],[501,23,479,23],[501,26,479,26],[501,28,479,28],[502,4,480,4],[502,8,480,8,"initialRoute"],[502,20,480,20],[502,23,480,23,"findInitialRoute"],[502,39,480,39],[502,40,480,40,"route"],[502,45,480,45],[502,46,480,46,"name"],[502,50,480,50],[502,52,480,52,"parentScreens"],[502,65,480,65],[502,67,480,67,"initialRoutes"],[502,80,480,80],[502,81,480,81],[503,4,481,4,"parentScreens"],[503,17,481,17],[503,18,481,18,"push"],[503,22,481,22],[503,23,481,23,"route"],[503,28,481,28],[503,29,481,29,"name"],[503,33,481,33],[503,34,481,34],[504,4,482,4],[504,10,482,10,"state"],[504,15,482,15],[504,18,482,18,"createStateObject"],[504,35,482,35],[504,36,482,36,"initialRoute"],[504,48,482,48],[504,50,482,50,"route"],[504,55,482,55],[504,57,482,57,"routes"],[504,63,482,63],[504,64,482,64,"length"],[504,70,482,70],[504,75,482,75],[504,76,482,76],[504,77,482,77],[505,4,483,4],[505,8,483,8,"routes"],[505,14,483,14],[505,15,483,15,"length"],[505,21,483,21],[505,24,483,24],[505,25,483,25],[505,27,483,27],[506,6,484,8],[506,10,484,12,"nestedState"],[506,21,484,23],[506,24,484,26,"state"],[506,29,484,31],[507,6,485,8],[507,13,485,16,"route"],[507,18,485,21],[507,21,485,24,"routes"],[507,27,485,30],[507,28,485,31,"shift"],[507,33,485,36],[507,34,485,37],[507,35,485,38],[507,37,485,41],[508,8,486,12,"initialRoute"],[508,20,486,24],[508,23,486,27,"findInitialRoute"],[508,39,486,43],[508,40,486,44,"route"],[508,45,486,49],[508,46,486,50,"name"],[508,50,486,54],[508,52,486,56,"parentScreens"],[508,65,486,69],[508,67,486,71,"initialRoutes"],[508,80,486,84],[508,81,486,85],[509,8,487,12],[509,14,487,18,"nestedStateIndex"],[509,30,487,34],[509,33,487,37,"nestedState"],[509,44,487,48],[509,45,487,49,"index"],[509,50,487,54],[509,54,487,58,"nestedState"],[509,65,487,69],[509,66,487,70,"routes"],[509,72,487,76],[509,73,487,77,"length"],[509,79,487,83],[509,82,487,86],[509,83,487,87],[510,8,488,12,"nestedState"],[510,19,488,23],[510,20,488,24,"routes"],[510,26,488,30],[510,27,488,31,"nestedStateIndex"],[510,43,488,47],[510,44,488,48],[510,45,488,49,"state"],[510,50,488,54],[510,53,488,57,"createStateObject"],[510,70,488,74],[510,71,488,75,"initialRoute"],[510,83,488,87],[510,85,488,89,"route"],[510,90,488,94],[510,92,488,96,"routes"],[510,98,488,102],[510,99,488,103,"length"],[510,105,488,109],[510,110,488,114],[510,111,488,115],[510,112,488,116],[511,8,489,12],[511,12,489,16,"routes"],[511,18,489,22],[511,19,489,23,"length"],[511,25,489,29],[511,28,489,32],[511,29,489,33],[511,31,489,35],[512,10,490,16,"nestedState"],[512,21,490,27],[512,24,490,30,"nestedState"],[512,35,490,41],[512,36,490,42,"routes"],[512,42,490,48],[512,43,490,49,"nestedStateIndex"],[512,59,490,65],[512,60,490,66],[512,61,490,67,"state"],[512,66,490,72],[513,8,491,12],[514,8,492,12,"parentScreens"],[514,21,492,25],[514,22,492,26,"push"],[514,26,492,30],[514,27,492,31,"route"],[514,32,492,36],[514,33,492,37,"name"],[514,37,492,41],[514,38,492,42],[515,6,493,8],[516,4,494,4],[517,4,495,4,"route"],[517,9,495,9],[517,12,495,12],[517,13,495,13],[517,14,495,14],[517,16,495,16,"findFocusedRoute_1"],[517,34,495,34],[517,35,495,35,"findFocusedRoute"],[517,51,495,51],[517,53,495,53,"state"],[517,58,495,58],[517,59,495,59],[518,4,496,4],[519,4,497,4,"route"],[519,9,497,9],[519,10,497,10,"path"],[519,14,497,14],[519,17,497,17,"expoURL"],[519,24,497,24],[519,25,497,25,"pathWithoutGroups"],[519,42,497,42],[520,4,498,4],[521,4,499,4],[522,4,500,4],[523,4,501,4],[524,4,502,4],[524,10,502,10,"params"],[524,16,502,16],[524,19,502,19,"expo"],[524,23,502,23],[524,24,502,24,"parseQueryParams"],[524,40,502,40],[524,41,502,41,"path"],[524,45,502,45],[524,47,502,47,"route"],[524,52,502,52],[524,54,502,54,"flatConfig"],[524,64,502,64],[524,67,502,67,"findParseConfigForRoute"],[524,90,502,90],[524,91,502,91,"route"],[524,96,502,96],[524,97,502,97,"name"],[524,101,502,101],[524,103,502,103,"flatConfig"],[524,113,502,113],[524,114,502,114],[524,117,502,117,"undefined"],[524,126,502,126],[524,128,502,128,"hash"],[524,132,502,132],[524,133,502,133],[525,4,503,4],[526,4,504,4],[527,4,505,4],[528,4,506,4],[528,8,506,8,"params"],[528,14,506,14],[528,16,506,16],[529,6,507,8,"route"],[529,11,507,13],[529,12,507,14,"params"],[529,18,507,20],[529,21,507,20,"Object"],[529,27,507,20],[529,28,507,20,"assign"],[529,34,507,20],[529,39,507,28,"route"],[529,44,507,33],[529,45,507,34,"params"],[529,51,507,40],[529,53,507,45,"params"],[529,59,507,51],[529,60,507,53],[530,4,508,4],[531,4,509,4],[532,4,510,4],[532,11,510,11,"state"],[532,16,510,16],[533,2,511,0],[533,3,511,1],[534,2,512,0],[535,2,513,0],[536,2,514,0],[537,2,515,0],[538,2,516,0],[539,2,517,0],[540,2,518,0],[541,2,519,0],[542,2,520,0],[543,2,521,0],[544,2,522,0],[545,2,523,0],[546,2,524,0],[547,2,525,0],[548,0,525,0],[548,3]],"functionMap":{"names":["<global>","<anonymous>","desc.get","getStateFromPath","remaining.split.filter.map$argument_0","match.routeNames.map$argument_0","getConfigResources","prepareConfigResources","getInitialRoutes","getNormalizedConfigs","Object.keys.map$argument_0","checkForDuplicatedConfigs","configs.reduce$argument_0","b.every$argument_0","a.every$argument_0","getConfigsWithRegexes","configs.map$argument_0","joinPaths","paths.map$argument_0","matchAgainstConfigs","config.pattern.split.reduce$argument_0","config.routeNames.map$argument_0","configs.find$argument_0","normalizedPath.split.reduce$argument_0","createNormalizedConfigs","Object.keys.forEach$argument_0","createConfigItem","pattern.split.map$argument_0","findParseConfigForRoute","findInitialRoute","createStateObject","createNestedStateObject"],"mappings":"AAA;0ECC;sCCI,2BD;CDG,KC;CDG;gFCC;CDE,IC;CDE;kDCC;CDM;wDCC;CDE;AG4B;iBCiC;SDG;0EEqB,oBF;CHmB;AMS;CNY;AOC;CPa;AQC;CRS;ASC;4CCO,qED;CTgD;AWC;mBCE;6DCM,sBD,YE,sBF;KDQ;CXC;AeC;uBCC;MDO;CfC;kBiBC;yBCC,mBD;cjBE;4BmBC;kECc;aDmB;2CEE;iDCC;iBDG;4BEU;iBFmB;aFM;CnBS;gCwBC;gDCiC;aDG;CxBK;yB0BC;iBCM;SDK;C1Be;gC4BC;C5BO;yB6BE;C7BgB;0B8BG;C9B8B;gC+BC;C/BkC"}},"type":"js/module"}]}