{"dependencies":[{"name":"./PlatformChecker","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":2,"column":0,"index":14},"end":{"line":2,"column":61,"index":75}}],"key":"tkmI0BF0tb+eF9KPjOiRa9ClHxA="}},{"name":"./core","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":3,"column":0,"index":76},"end":{"line":6,"column":16,"index":165}}],"key":"RjYcaDElboxfMRSohSLhnV9EO/E="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.updateLayoutAnimations = void 0;\n  var _PlatformChecker = require(_dependencyMap[0], \"./PlatformChecker\");\n  var _core = require(_dependencyMap[1], \"./core\");\n  function createUpdateManager() {\n    var animations = [];\n    // When a stack is rerendered we reconfigure all the shared elements.\n    // To do that we want them to appear in our batch in the correct order,\n    // so we defer some of the updates to appear at the end of the batch.\n    var deferredAnimations = [];\n    return {\n      update(batchItem, isUnmounting) {\n        if (isUnmounting) {\n          deferredAnimations.push(batchItem);\n        } else {\n          animations.push(batchItem);\n        }\n        if (animations.length + deferredAnimations.length === 1) {\n          (0, _PlatformChecker.isFabric)() ? this.flush() : setImmediate(this.flush);\n        }\n      },\n      flush() {\n        (0, _core.configureLayoutAnimationBatch)(animations.concat(deferredAnimations));\n        animations.length = 0;\n        deferredAnimations.length = 0;\n      }\n    };\n  }\n\n  /**\n   * Lets you update the current configuration of the layout animation or shared\n   * element transition for a given component. Configurations are batched and\n   * applied at the end of the current execution block, right before sending the\n   * response back to native.\n   *\n   * @param viewTag - The tag of the component you'd like to configure.\n   * @param type - The type of the animation you'd like to configure -\n   *   {@link LayoutAnimationType}.\n   * @param config - The animation configuration - {@link LayoutAnimationFunction},\n   *   {@link SharedTransitionAnimationsFunction}, {@link ProgressAnimationCallback}\n   *   or {@link Keyframe}. Passing `undefined` will remove the animation.\n   * @param sharedTransitionTag - The tag of the shared element transition you'd\n   *   like to configure. Passing `undefined` will remove the transition.\n   * @param isUnmounting - Determines whether the configuration should be included\n   *   at the end of the batch, after all the non-deferred configurations (even\n   *   those that were updated later). This is used to retain the correct ordering\n   *   of shared elements. Defaults to `false`.\n   */\n  var updateLayoutAnimations;\n  if ((0, _PlatformChecker.shouldBeUseWeb)()) {\n    exports.updateLayoutAnimations = updateLayoutAnimations = () => {\n      // no-op\n    };\n  } else {\n    var updateLayoutAnimationsManager = createUpdateManager();\n    exports.updateLayoutAnimations = updateLayoutAnimations = (viewTag, type, config, sharedTransitionTag, isUnmounting) => updateLayoutAnimationsManager.update({\n      viewTag,\n      type,\n      config: config ? (0, _core.makeShareableCloneRecursive)(config) : undefined,\n      sharedTransitionTag\n    }, isUnmounting);\n  }\n});","lineCount":68,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,1,13,"exports"],[7,9,1,13],[7,10,1,13,"updateLayoutAnimations"],[7,32,1,13],[8,2,2,0],[8,6,2,0,"_PlatformChecker"],[8,22,2,0],[8,25,2,0,"require"],[8,32,2,0],[8,33,2,0,"_dependencyMap"],[8,47,2,0],[9,2,3,0],[9,6,3,0,"_core"],[9,11,3,0],[9,14,3,0,"require"],[9,21,3,0],[9,22,3,0,"_dependencyMap"],[9,36,3,0],[10,2,17,0],[10,11,17,9,"createUpdateManager"],[10,30,17,28,"createUpdateManager"],[10,31,17,28],[10,33,17,31],[11,4,18,2],[11,8,18,8,"animations"],[11,18,18,46],[11,21,18,49],[11,23,18,51],[12,4,19,2],[13,4,20,2],[14,4,21,2],[15,4,22,2],[15,8,22,8,"deferredAnimations"],[15,26,22,54],[15,29,22,57],[15,31,22,59],[16,4,24,2],[16,11,24,9],[17,6,25,4,"update"],[17,12,25,10,"update"],[17,13,25,11,"batchItem"],[17,22,25,46],[17,24,25,48,"isUnmounting"],[17,36,25,70],[17,38,25,72],[18,8,26,6],[18,12,26,10,"isUnmounting"],[18,24,26,22],[18,26,26,24],[19,10,27,8,"deferredAnimations"],[19,28,27,26],[19,29,27,27,"push"],[19,33,27,31],[19,34,27,32,"batchItem"],[19,43,27,41],[19,44,27,42],[20,8,28,6],[20,9,28,7],[20,15,28,13],[21,10,29,8,"animations"],[21,20,29,18],[21,21,29,19,"push"],[21,25,29,23],[21,26,29,24,"batchItem"],[21,35,29,33],[21,36,29,34],[22,8,30,6],[23,8,31,6],[23,12,31,10,"animations"],[23,22,31,20],[23,23,31,21,"length"],[23,29,31,27],[23,32,31,30,"deferredAnimations"],[23,50,31,48],[23,51,31,49,"length"],[23,57,31,55],[23,62,31,60],[23,63,31,61],[23,65,31,63],[24,10,32,8],[24,14,32,8,"isFabric"],[24,39,32,16],[24,41,32,17],[24,42,32,18],[24,45,32,21],[24,49,32,25],[24,50,32,26,"flush"],[24,55,32,31],[24,56,32,32],[24,57,32,33],[24,60,32,36,"setImmediate"],[24,72,32,48],[24,73,32,49],[24,77,32,53],[24,78,32,54,"flush"],[24,83,32,59],[24,84,32,60],[25,8,33,6],[26,6,34,4],[26,7,34,5],[27,6,35,4,"flush"],[27,11,35,9,"flush"],[27,12,35,9],[27,14,35,22],[28,8,36,6],[28,12,36,6,"configureLayoutAnimationBatch"],[28,47,36,35],[28,49,36,36,"animations"],[28,59,36,46],[28,60,36,47,"concat"],[28,66,36,53],[28,67,36,54,"deferredAnimations"],[28,85,36,72],[28,86,36,73],[28,87,36,74],[29,8,37,6,"animations"],[29,18,37,16],[29,19,37,17,"length"],[29,25,37,23],[29,28,37,26],[29,29,37,27],[30,8,38,6,"deferredAnimations"],[30,26,38,24],[30,27,38,25,"length"],[30,33,38,31],[30,36,38,34],[30,37,38,35],[31,6,39,4],[32,4,40,2],[32,5,40,3],[33,2,41,0],[35,2,43,0],[36,0,44,0],[37,0,45,0],[38,0,46,0],[39,0,47,0],[40,0,48,0],[41,0,49,0],[42,0,50,0],[43,0,51,0],[44,0,52,0],[45,0,53,0],[46,0,54,0],[47,0,55,0],[48,0,56,0],[49,0,57,0],[50,0,58,0],[51,0,59,0],[52,0,60,0],[53,0,61,0],[54,2,62,7],[54,6,62,11,"updateLayoutAnimations"],[54,28,72,9],[55,2,74,0],[55,6,74,4],[55,10,74,4,"shouldBeUseWeb"],[55,41,74,18],[55,43,74,19],[55,44,74,20],[55,46,74,22],[56,4,75,2,"exports"],[56,11,75,2],[56,12,75,2,"updateLayoutAnimations"],[56,34,75,2],[56,37,75,2,"updateLayoutAnimations"],[56,59,75,24],[56,62,75,27,"updateLayoutAnimations"],[56,63,75,27],[56,68,75,33],[57,6,76,4],[58,4,76,4],[58,5,77,3],[59,2,78,0],[59,3,78,1],[59,9,78,7],[60,4,79,2],[60,8,79,8,"updateLayoutAnimationsManager"],[60,37,79,37],[60,40,79,40,"createUpdateManager"],[60,59,79,59],[60,60,79,60],[60,61,79,61],[61,4,80,2,"exports"],[61,11,80,2],[61,12,80,2,"updateLayoutAnimations"],[61,34,80,2],[61,37,80,2,"updateLayoutAnimations"],[61,59,80,24],[61,62,80,27,"updateLayoutAnimations"],[61,63,81,4,"viewTag"],[61,70,81,11],[61,72,82,4,"type"],[61,76,82,8],[61,78,83,4,"config"],[61,84,83,10],[61,86,84,4,"sharedTransitionTag"],[61,105,84,23],[61,107,85,4,"isUnmounting"],[61,119,85,16],[61,124,87,4,"updateLayoutAnimationsManager"],[61,153,87,33],[61,154,87,34,"update"],[61,160,87,40],[61,161,88,6],[62,6,89,8,"viewTag"],[62,13,89,15],[63,6,90,8,"type"],[63,10,90,12],[64,6,91,8,"config"],[64,12,91,14],[64,14,91,16,"config"],[64,20,91,22],[64,23,91,25],[64,27,91,25,"makeShareableCloneRecursive"],[64,60,91,52],[64,62,91,53,"config"],[64,68,91,59],[64,69,91,60],[64,72,91,63,"undefined"],[64,81,91,72],[65,6,92,8,"sharedTransitionTag"],[66,4,93,6],[66,5,93,7],[66,7,94,6,"isUnmounting"],[66,19,95,4],[66,20,95,5],[67,2,96,0],[68,0,96,1],[68,3]],"functionMap":{"names":["<global>","createUpdateManager","update","flush","updateLayoutAnimations"],"mappings":"AAA;ACgB;ICQ;KDS;IEC;KFI;CDE;2BIkC;GJE;2BIG;KJe"}},"type":"js/module"}]}