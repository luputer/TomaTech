{"dependencies":[{"name":"nanoid/non-secure","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":43,"index":58}}],"key":"aLLVXWB8QP15fri3afEUab9H+Os="}},{"name":"./BaseRouter.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":4,"column":0,"index":59},"end":{"line":4,"column":45,"index":104}}],"key":"RcLPQi7rFyomhdqbuJexWvESpQE="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.TabActions = void 0;\n  exports.TabRouter = TabRouter;\n  var _nonSecure = require(_dependencyMap[0], \"nanoid/non-secure\");\n  var _BaseRouter = require(_dependencyMap[1], \"./BaseRouter.js\");\n  var TYPE_ROUTE = 'route';\n  var TabActions = exports.TabActions = {\n    jumpTo(name, params) {\n      return {\n        type: 'JUMP_TO',\n        payload: {\n          name,\n          params\n        }\n      };\n    }\n  };\n  var getRouteHistory = (routes, index, backBehavior, initialRouteName) => {\n    var history = [{\n      type: TYPE_ROUTE,\n      key: routes[index].key\n    }];\n    var initialRouteIndex;\n    switch (backBehavior) {\n      case 'order':\n        for (var i = index; i > 0; i--) {\n          history.unshift({\n            type: TYPE_ROUTE,\n            key: routes[i - 1].key\n          });\n        }\n        break;\n      case 'firstRoute':\n        if (index !== 0) {\n          history.unshift({\n            type: TYPE_ROUTE,\n            key: routes[0].key\n          });\n        }\n        break;\n      case 'initialRoute':\n        initialRouteIndex = routes.findIndex(route => route.name === initialRouteName);\n        initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n        if (index !== initialRouteIndex) {\n          history.unshift({\n            type: TYPE_ROUTE,\n            key: routes[initialRouteIndex].key\n          });\n        }\n        break;\n      case 'history':\n        // The history will fill up on navigation\n        break;\n    }\n    return history;\n  };\n  var changeIndex = (state, index, backBehavior, initialRouteName) => {\n    var history;\n    if (backBehavior === 'history') {\n      var currentKey = state.routes[index].key;\n      history = state.history.filter(it => it.type === 'route' ? it.key !== currentKey : false).concat({\n        type: TYPE_ROUTE,\n        key: currentKey\n      });\n    } else {\n      history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);\n    }\n    return {\n      ...state,\n      index,\n      history\n    };\n  };\n  function TabRouter(_ref) {\n    var initialRouteName = _ref.initialRouteName,\n      _ref$backBehavior = _ref.backBehavior,\n      backBehavior = _ref$backBehavior === void 0 ? 'firstRoute' : _ref$backBehavior;\n    var router = {\n      ..._BaseRouter.BaseRouter,\n      type: 'tab',\n      getInitialState(_ref2) {\n        var routeNames = _ref2.routeNames,\n          routeParamList = _ref2.routeParamList;\n        var index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;\n        var routes = routeNames.map(name => ({\n          name,\n          key: `${name}-${(0, _nonSecure.nanoid)()}`,\n          params: routeParamList[name]\n        }));\n        var history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n        return {\n          stale: false,\n          type: 'tab',\n          key: `tab-${(0, _nonSecure.nanoid)()}`,\n          index,\n          routeNames,\n          history,\n          routes,\n          preloadedRouteKeys: []\n        };\n      },\n      getRehydratedState(partialState, _ref3) {\n        var routeNames = _ref3.routeNames,\n          routeParamList = _ref3.routeParamList;\n        var state = partialState;\n        if (state.stale === false) {\n          return state;\n        }\n        var routes = routeNames.map(name => {\n          var route = state.routes.find(r => r.name === name);\n          return {\n            ...route,\n            name,\n            key: route && route.name === name && route.key ? route.key : `${name}-${(0, _nonSecure.nanoid)()}`,\n            params: routeParamList[name] !== undefined ? {\n              ...routeParamList[name],\n              ...(route ? route.params : undefined)\n            } : route ? route.params : undefined\n          };\n        });\n        var index = Math.min(Math.max(routeNames.indexOf(state.routes[state?.index ?? 0]?.name), 0), routes.length - 1);\n        var routeKeys = routes.map(route => route.key);\n        var history = state.history?.filter(it => routeKeys.includes(it.key)) ?? [];\n        return changeIndex({\n          stale: false,\n          type: 'tab',\n          key: `tab-${(0, _nonSecure.nanoid)()}`,\n          index,\n          routeNames,\n          history,\n          routes,\n          preloadedRouteKeys: state.preloadedRouteKeys?.filter(key => routeKeys.includes(key)) ?? []\n        }, index, backBehavior, initialRouteName);\n      },\n      getStateForRouteNamesChange(state, _ref4) {\n        var routeNames = _ref4.routeNames,\n          routeParamList = _ref4.routeParamList,\n          routeKeyChanges = _ref4.routeKeyChanges;\n        var routes = routeNames.map(name => state.routes.find(r => r.name === name && !routeKeyChanges.includes(r.name)) || {\n          name,\n          key: `${name}-${(0, _nonSecure.nanoid)()}`,\n          params: routeParamList[name]\n        });\n        var index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));\n        var history = state.history.filter(\n        // Type will always be 'route' for tabs, but could be different in a router extending this (e.g. drawer)\n        it => it.type !== 'route' || routes.find(r => r.key === it.key));\n        if (!history.length) {\n          history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n        }\n        return {\n          ...state,\n          history,\n          routeNames,\n          routes,\n          index\n        };\n      },\n      getStateForRouteFocus(state, key) {\n        var index = state.routes.findIndex(r => r.key === key);\n        if (index === -1 || index === state.index) {\n          return state;\n        }\n        return changeIndex(state, index, backBehavior, initialRouteName);\n      },\n      getStateForAction(state, action, _ref5) {\n        var routeParamList = _ref5.routeParamList,\n          routeGetIdList = _ref5.routeGetIdList;\n        switch (action.type) {\n          case 'JUMP_TO':\n          case 'NAVIGATE':\n          case 'NAVIGATE_DEPRECATED':\n            {\n              var index = state.routes.findIndex(route => route.name === action.payload.name);\n              if (index === -1) {\n                return null;\n              }\n              var updatedState = changeIndex({\n                ...state,\n                routes: state.routes.map(route => {\n                  if (route.name !== action.payload.name) {\n                    return route;\n                  }\n                  var getId = routeGetIdList[route.name];\n                  var currentId = getId?.({\n                    params: route.params\n                  });\n                  var nextId = getId?.({\n                    params: action.payload.params\n                  });\n                  var key = currentId === nextId ? route.key : `${route.name}-${(0, _nonSecure.nanoid)()}`;\n                  var params;\n                  if ((action.type === 'NAVIGATE' || action.type === 'NAVIGATE_DEPRECATED') && action.payload.merge && currentId === nextId) {\n                    params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? {\n                      ...routeParamList[route.name],\n                      ...route.params,\n                      ...action.payload.params\n                    } : route.params;\n                  } else {\n                    params = routeParamList[route.name] !== undefined ? {\n                      ...routeParamList[route.name],\n                      ...action.payload.params\n                    } : action.payload.params;\n                  }\n                  var path = action.type === 'NAVIGATE' && action.payload.path != null ? action.payload.path : route.path;\n                  return params !== route.params || path !== route.path ? {\n                    ...route,\n                    key,\n                    path,\n                    params\n                  } : route;\n                })\n              }, index, backBehavior, initialRouteName);\n              return {\n                ...updatedState,\n                preloadedRouteKeys: updatedState.preloadedRouteKeys.filter(key => key !== state.routes[updatedState.index].key)\n              };\n            }\n          case 'GO_BACK':\n            {\n              if (state.history.length === 1) {\n                return null;\n              }\n              var previousKey = state.history[state.history.length - 2]?.key;\n              var _index = state.routes.findIndex(route => route.key === previousKey);\n              if (_index === -1) {\n                return null;\n              }\n              return {\n                ...state,\n                preloadedRouteKeys: state.preloadedRouteKeys.filter(key => key !== state.routes[_index].key),\n                history: state.history.slice(0, -1),\n                index: _index\n              };\n            }\n          case 'PRELOAD':\n            {\n              var routeIndex = state.routes.findIndex(route => route.name === action.payload.name);\n              if (routeIndex === -1) {\n                return null;\n              }\n              var route = state.routes[routeIndex];\n              var getId = routeGetIdList[route.name];\n              var currentId = getId?.({\n                params: route.params\n              });\n              var nextId = getId?.({\n                params: action.payload.params\n              });\n              var key = currentId === nextId ? route.key : `${route.name}-${(0, _nonSecure.nanoid)()}`;\n              var params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? {\n                ...routeParamList[route.name],\n                ...action.payload.params\n              } : undefined;\n              var newRoute = params !== route.params ? {\n                ...route,\n                key,\n                params\n              } : route;\n              return {\n                ...state,\n                preloadedRouteKeys: state.preloadedRouteKeys.filter(key => key !== route.key).concat(newRoute.key),\n                routes: state.routes.map((route, index) => index === routeIndex ? newRoute : route),\n                history: key === route.key ? state.history : state.history.filter(record => record.key !== route.key)\n              };\n            }\n          default:\n            return _BaseRouter.BaseRouter.getStateForAction(state, action);\n        }\n      },\n      actionCreators: TabActions\n    };\n    return router;\n  }\n});","lineCount":280,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,1,13,"exports"],[7,9,1,13],[7,10,1,13,"TabActions"],[7,20,1,13],[8,2,1,13,"exports"],[8,9,1,13],[8,10,1,13,"TabRouter"],[8,19,1,13],[8,22,1,13,"TabRouter"],[8,31,1,13],[9,2,3,0],[9,6,3,0,"_nonSecure"],[9,16,3,0],[9,19,3,0,"require"],[9,26,3,0],[9,27,3,0,"_dependencyMap"],[9,41,3,0],[10,2,4,0],[10,6,4,0,"_BaseRouter"],[10,17,4,0],[10,20,4,0,"require"],[10,27,4,0],[10,28,4,0,"_dependencyMap"],[10,42,4,0],[11,2,5,0],[11,6,5,6,"TYPE_ROUTE"],[11,16,5,16],[11,19,5,19],[11,26,5,26],[12,2,6,7],[12,6,6,13,"TabActions"],[12,16,6,23],[12,19,6,23,"exports"],[12,26,6,23],[12,27,6,23,"TabActions"],[12,37,6,23],[12,40,6,26],[13,4,7,2,"jumpTo"],[13,10,7,8,"jumpTo"],[13,11,7,9,"name"],[13,15,7,13],[13,17,7,15,"params"],[13,23,7,21],[13,25,7,23],[14,6,8,4],[14,13,8,11],[15,8,9,6,"type"],[15,12,9,10],[15,14,9,12],[15,23,9,21],[16,8,10,6,"payload"],[16,15,10,13],[16,17,10,15],[17,10,11,8,"name"],[17,14,11,12],[18,10,12,8,"params"],[19,8,13,6],[20,6,14,4],[20,7,14,5],[21,4,15,2],[22,2,16,0],[22,3,16,1],[23,2,17,0],[23,6,17,6,"getRouteHistory"],[23,21,17,21],[23,24,17,24,"getRouteHistory"],[23,25,17,25,"routes"],[23,31,17,31],[23,33,17,33,"index"],[23,38,17,38],[23,40,17,40,"backBehavior"],[23,52,17,52],[23,54,17,54,"initialRouteName"],[23,70,17,70],[23,75,17,75],[24,4,18,2],[24,8,18,8,"history"],[24,15,18,15],[24,18,18,18],[24,19,18,19],[25,6,19,4,"type"],[25,10,19,8],[25,12,19,10,"TYPE_ROUTE"],[25,22,19,20],[26,6,20,4,"key"],[26,9,20,7],[26,11,20,9,"routes"],[26,17,20,15],[26,18,20,16,"index"],[26,23,20,21],[26,24,20,22],[26,25,20,23,"key"],[27,4,21,2],[27,5,21,3],[27,6,21,4],[28,4,22,2],[28,8,22,6,"initialRouteIndex"],[28,25,22,23],[29,4,23,2],[29,12,23,10,"backBehavior"],[29,24,23,22],[30,6,24,4],[30,11,24,9],[30,18,24,16],[31,8,25,6],[31,13,25,11],[31,17,25,15,"i"],[31,18,25,16],[31,21,25,19,"index"],[31,26,25,24],[31,28,25,26,"i"],[31,29,25,27],[31,32,25,30],[31,33,25,31],[31,35,25,33,"i"],[31,36,25,34],[31,38,25,36],[31,40,25,38],[32,10,26,8,"history"],[32,17,26,15],[32,18,26,16,"unshift"],[32,25,26,23],[32,26,26,24],[33,12,27,10,"type"],[33,16,27,14],[33,18,27,16,"TYPE_ROUTE"],[33,28,27,26],[34,12,28,10,"key"],[34,15,28,13],[34,17,28,15,"routes"],[34,23,28,21],[34,24,28,22,"i"],[34,25,28,23],[34,28,28,26],[34,29,28,27],[34,30,28,28],[34,31,28,29,"key"],[35,10,29,8],[35,11,29,9],[35,12,29,10],[36,8,30,6],[37,8,31,6],[38,6,32,4],[38,11,32,9],[38,23,32,21],[39,8,33,6],[39,12,33,10,"index"],[39,17,33,15],[39,22,33,20],[39,23,33,21],[39,25,33,23],[40,10,34,8,"history"],[40,17,34,15],[40,18,34,16,"unshift"],[40,25,34,23],[40,26,34,24],[41,12,35,10,"type"],[41,16,35,14],[41,18,35,16,"TYPE_ROUTE"],[41,28,35,26],[42,12,36,10,"key"],[42,15,36,13],[42,17,36,15,"routes"],[42,23,36,21],[42,24,36,22],[42,25,36,23],[42,26,36,24],[42,27,36,25,"key"],[43,10,37,8],[43,11,37,9],[43,12,37,10],[44,8,38,6],[45,8,39,6],[46,6,40,4],[46,11,40,9],[46,25,40,23],[47,8,41,6,"initialRouteIndex"],[47,25,41,23],[47,28,41,26,"routes"],[47,34,41,32],[47,35,41,33,"findIndex"],[47,44,41,42],[47,45,41,43,"route"],[47,50,41,48],[47,54,41,52,"route"],[47,59,41,57],[47,60,41,58,"name"],[47,64,41,62],[47,69,41,67,"initialRouteName"],[47,85,41,83],[47,86,41,84],[48,8,42,6,"initialRouteIndex"],[48,25,42,23],[48,28,42,26,"initialRouteIndex"],[48,45,42,43],[48,50,42,48],[48,51,42,49],[48,52,42,50],[48,55,42,53],[48,56,42,54],[48,59,42,57,"initialRouteIndex"],[48,76,42,74],[49,8,43,6],[49,12,43,10,"index"],[49,17,43,15],[49,22,43,20,"initialRouteIndex"],[49,39,43,37],[49,41,43,39],[50,10,44,8,"history"],[50,17,44,15],[50,18,44,16,"unshift"],[50,25,44,23],[50,26,44,24],[51,12,45,10,"type"],[51,16,45,14],[51,18,45,16,"TYPE_ROUTE"],[51,28,45,26],[52,12,46,10,"key"],[52,15,46,13],[52,17,46,15,"routes"],[52,23,46,21],[52,24,46,22,"initialRouteIndex"],[52,41,46,39],[52,42,46,40],[52,43,46,41,"key"],[53,10,47,8],[53,11,47,9],[53,12,47,10],[54,8,48,6],[55,8,49,6],[56,6,50,4],[56,11,50,9],[56,20,50,18],[57,8,51,6],[58,8,52,6],[59,4,53,2],[60,4,54,2],[60,11,54,9,"history"],[60,18,54,16],[61,2,55,0],[61,3,55,1],[62,2,56,0],[62,6,56,6,"changeIndex"],[62,17,56,17],[62,20,56,20,"changeIndex"],[62,21,56,21,"state"],[62,26,56,26],[62,28,56,28,"index"],[62,33,56,33],[62,35,56,35,"backBehavior"],[62,47,56,47],[62,49,56,49,"initialRouteName"],[62,65,56,65],[62,70,56,70],[63,4,57,2],[63,8,57,6,"history"],[63,15,57,13],[64,4,58,2],[64,8,58,6,"backBehavior"],[64,20,58,18],[64,25,58,23],[64,34,58,32],[64,36,58,34],[65,6,59,4],[65,10,59,10,"currentKey"],[65,20,59,20],[65,23,59,23,"state"],[65,28,59,28],[65,29,59,29,"routes"],[65,35,59,35],[65,36,59,36,"index"],[65,41,59,41],[65,42,59,42],[65,43,59,43,"key"],[65,46,59,46],[66,6,60,4,"history"],[66,13,60,11],[66,16,60,14,"state"],[66,21,60,19],[66,22,60,20,"history"],[66,29,60,27],[66,30,60,28,"filter"],[66,36,60,34],[66,37,60,35,"it"],[66,39,60,37],[66,43,60,41,"it"],[66,45,60,43],[66,46,60,44,"type"],[66,50,60,48],[66,55,60,53],[66,62,60,60],[66,65,60,63,"it"],[66,67,60,65],[66,68,60,66,"key"],[66,71,60,69],[66,76,60,74,"currentKey"],[66,86,60,84],[66,89,60,87],[66,94,60,92],[66,95,60,93],[66,96,60,94,"concat"],[66,102,60,100],[66,103,60,101],[67,8,61,6,"type"],[67,12,61,10],[67,14,61,12,"TYPE_ROUTE"],[67,24,61,22],[68,8,62,6,"key"],[68,11,62,9],[68,13,62,11,"currentKey"],[69,6,63,4],[69,7,63,5],[69,8,63,6],[70,4,64,2],[70,5,64,3],[70,11,64,9],[71,6,65,4,"history"],[71,13,65,11],[71,16,65,14,"getRouteHistory"],[71,31,65,29],[71,32,65,30,"state"],[71,37,65,35],[71,38,65,36,"routes"],[71,44,65,42],[71,46,65,44,"index"],[71,51,65,49],[71,53,65,51,"backBehavior"],[71,65,65,63],[71,67,65,65,"initialRouteName"],[71,83,65,81],[71,84,65,82],[72,4,66,2],[73,4,67,2],[73,11,67,9],[74,6,68,4],[74,9,68,7,"state"],[74,14,68,12],[75,6,69,4,"index"],[75,11,69,9],[76,6,70,4,"history"],[77,4,71,2],[77,5,71,3],[78,2,72,0],[78,3,72,1],[79,2,73,7],[79,11,73,16,"TabRouter"],[79,20,73,25,"TabRouter"],[79,21,73,25,"_ref"],[79,25,73,25],[79,27,76,3],[80,4,76,3],[80,8,74,2,"initialRouteName"],[80,24,74,18],[80,27,74,18,"_ref"],[80,31,74,18],[80,32,74,2,"initialRouteName"],[80,48,74,18],[81,6,74,18,"_ref$backBehavior"],[81,23,74,18],[81,26,74,18,"_ref"],[81,30,74,18],[81,31,75,2,"backBehavior"],[81,43,75,14],[82,6,75,2,"backBehavior"],[82,18,75,14],[82,21,75,14,"_ref$backBehavior"],[82,38,75,14],[82,52,75,17],[82,64,75,29],[82,67,75,29,"_ref$backBehavior"],[82,84,75,29],[83,4,77,2],[83,8,77,8,"router"],[83,14,77,14],[83,17,77,17],[84,6,78,4],[84,9,78,7,"BaseRouter"],[84,31,78,17],[85,6,79,4,"type"],[85,10,79,8],[85,12,79,10],[85,17,79,15],[86,6,80,4,"getInitialState"],[86,21,80,19,"getInitialState"],[86,22,80,19,"_ref2"],[86,27,80,19],[86,29,83,7],[87,8,83,7],[87,12,81,6,"routeNames"],[87,22,81,16],[87,25,81,16,"_ref2"],[87,30,81,16],[87,31,81,6,"routeNames"],[87,41,81,16],[88,10,82,6,"routeParamList"],[88,24,82,20],[88,27,82,20,"_ref2"],[88,32,82,20],[88,33,82,6,"routeParamList"],[88,47,82,20],[89,8,84,6],[89,12,84,12,"index"],[89,17,84,17],[89,20,84,20,"initialRouteName"],[89,36,84,36],[89,41,84,41,"undefined"],[89,50,84,50],[89,54,84,54,"routeNames"],[89,64,84,64],[89,65,84,65,"includes"],[89,73,84,73],[89,74,84,74,"initialRouteName"],[89,90,84,90],[89,91,84,91],[89,94,84,94,"routeNames"],[89,104,84,104],[89,105,84,105,"indexOf"],[89,112,84,112],[89,113,84,113,"initialRouteName"],[89,129,84,129],[89,130,84,130],[89,133,84,133],[89,134,84,134],[90,8,85,6],[90,12,85,12,"routes"],[90,18,85,18],[90,21,85,21,"routeNames"],[90,31,85,31],[90,32,85,32,"map"],[90,35,85,35],[90,36,85,36,"name"],[90,40,85,40],[90,45,85,45],[91,10,86,8,"name"],[91,14,86,12],[92,10,87,8,"key"],[92,13,87,11],[92,15,87,13],[92,18,87,16,"name"],[92,22,87,20],[92,26,87,24],[92,30,87,24,"nanoid"],[92,47,87,30],[92,49,87,31],[92,50,87,32],[92,52,87,34],[93,10,88,8,"params"],[93,16,88,14],[93,18,88,16,"routeParamList"],[93,32,88,30],[93,33,88,31,"name"],[93,37,88,35],[94,8,89,6],[94,9,89,7],[94,10,89,8],[94,11,89,9],[95,8,90,6],[95,12,90,12,"history"],[95,19,90,19],[95,22,90,22,"getRouteHistory"],[95,37,90,37],[95,38,90,38,"routes"],[95,44,90,44],[95,46,90,46,"index"],[95,51,90,51],[95,53,90,53,"backBehavior"],[95,65,90,65],[95,67,90,67,"initialRouteName"],[95,83,90,83],[95,84,90,84],[96,8,91,6],[96,15,91,13],[97,10,92,8,"stale"],[97,15,92,13],[97,17,92,15],[97,22,92,20],[98,10,93,8,"type"],[98,14,93,12],[98,16,93,14],[98,21,93,19],[99,10,94,8,"key"],[99,13,94,11],[99,15,94,13],[99,22,94,20],[99,26,94,20,"nanoid"],[99,43,94,26],[99,45,94,27],[99,46,94,28],[99,48,94,30],[100,10,95,8,"index"],[100,15,95,13],[101,10,96,8,"routeNames"],[101,20,96,18],[102,10,97,8,"history"],[102,17,97,15],[103,10,98,8,"routes"],[103,16,98,14],[104,10,99,8,"preloadedRouteKeys"],[104,28,99,26],[104,30,99,28],[105,8,100,6],[105,9,100,7],[106,6,101,4],[106,7,101,5],[107,6,102,4,"getRehydratedState"],[107,24,102,22,"getRehydratedState"],[107,25,102,23,"partialState"],[107,37,102,35],[107,39,102,35,"_ref3"],[107,44,102,35],[107,46,105,7],[108,8,105,7],[108,12,103,6,"routeNames"],[108,22,103,16],[108,25,103,16,"_ref3"],[108,30,103,16],[108,31,103,6,"routeNames"],[108,41,103,16],[109,10,104,6,"routeParamList"],[109,24,104,20],[109,27,104,20,"_ref3"],[109,32,104,20],[109,33,104,6,"routeParamList"],[109,47,104,20],[110,8,106,6],[110,12,106,12,"state"],[110,17,106,17],[110,20,106,20,"partialState"],[110,32,106,32],[111,8,107,6],[111,12,107,10,"state"],[111,17,107,15],[111,18,107,16,"stale"],[111,23,107,21],[111,28,107,26],[111,33,107,31],[111,35,107,33],[112,10,108,8],[112,17,108,15,"state"],[112,22,108,20],[113,8,109,6],[114,8,110,6],[114,12,110,12,"routes"],[114,18,110,18],[114,21,110,21,"routeNames"],[114,31,110,31],[114,32,110,32,"map"],[114,35,110,35],[114,36,110,36,"name"],[114,40,110,40],[114,44,110,44],[115,10,111,8],[115,14,111,14,"route"],[115,19,111,19],[115,22,111,22,"state"],[115,27,111,27],[115,28,111,28,"routes"],[115,34,111,34],[115,35,111,35,"find"],[115,39,111,39],[115,40,111,40,"r"],[115,41,111,41],[115,45,111,45,"r"],[115,46,111,46],[115,47,111,47,"name"],[115,51,111,51],[115,56,111,56,"name"],[115,60,111,60],[115,61,111,61],[116,10,112,8],[116,17,112,15],[117,12,113,10],[117,15,113,13,"route"],[117,20,113,18],[118,12,114,10,"name"],[118,16,114,14],[119,12,115,10,"key"],[119,15,115,13],[119,17,115,15,"route"],[119,22,115,20],[119,26,115,24,"route"],[119,31,115,29],[119,32,115,30,"name"],[119,36,115,34],[119,41,115,39,"name"],[119,45,115,43],[119,49,115,47,"route"],[119,54,115,52],[119,55,115,53,"key"],[119,58,115,56],[119,61,115,59,"route"],[119,66,115,64],[119,67,115,65,"key"],[119,70,115,68],[119,73,115,71],[119,76,115,74,"name"],[119,80,115,78],[119,84,115,82],[119,88,115,82,"nanoid"],[119,105,115,88],[119,107,115,89],[119,108,115,90],[119,110,115,92],[120,12,116,10,"params"],[120,18,116,16],[120,20,116,18,"routeParamList"],[120,34,116,32],[120,35,116,33,"name"],[120,39,116,37],[120,40,116,38],[120,45,116,43,"undefined"],[120,54,116,52],[120,57,116,55],[121,14,117,12],[121,17,117,15,"routeParamList"],[121,31,117,29],[121,32,117,30,"name"],[121,36,117,34],[121,37,117,35],[122,14,118,12],[122,18,118,16,"route"],[122,23,118,21],[122,26,118,24,"route"],[122,31,118,29],[122,32,118,30,"params"],[122,38,118,36],[122,41,118,39,"undefined"],[122,50,118,48],[123,12,119,10],[123,13,119,11],[123,16,119,14,"route"],[123,21,119,19],[123,24,119,22,"route"],[123,29,119,27],[123,30,119,28,"params"],[123,36,119,34],[123,39,119,37,"undefined"],[124,10,120,8],[124,11,120,9],[125,8,121,6],[125,9,121,7],[125,10,121,8],[126,8,122,6],[126,12,122,12,"index"],[126,17,122,17],[126,20,122,20,"Math"],[126,24,122,24],[126,25,122,25,"min"],[126,28,122,28],[126,29,122,29,"Math"],[126,33,122,33],[126,34,122,34,"max"],[126,37,122,37],[126,38,122,38,"routeNames"],[126,48,122,48],[126,49,122,49,"indexOf"],[126,56,122,56],[126,57,122,57,"state"],[126,62,122,62],[126,63,122,63,"routes"],[126,69,122,69],[126,70,122,70,"state"],[126,75,122,75],[126,77,122,77,"index"],[126,82,122,82],[126,86,122,86],[126,87,122,87],[126,88,122,88],[126,90,122,90,"name"],[126,94,122,94],[126,95,122,95],[126,97,122,97],[126,98,122,98],[126,99,122,99],[126,101,122,101,"routes"],[126,107,122,107],[126,108,122,108,"length"],[126,114,122,114],[126,117,122,117],[126,118,122,118],[126,119,122,119],[127,8,123,6],[127,12,123,12,"routeKeys"],[127,21,123,21],[127,24,123,24,"routes"],[127,30,123,30],[127,31,123,31,"map"],[127,34,123,34],[127,35,123,35,"route"],[127,40,123,40],[127,44,123,44,"route"],[127,49,123,49],[127,50,123,50,"key"],[127,53,123,53],[127,54,123,54],[128,8,124,6],[128,12,124,12,"history"],[128,19,124,19],[128,22,124,22,"state"],[128,27,124,27],[128,28,124,28,"history"],[128,35,124,35],[128,37,124,37,"filter"],[128,43,124,43],[128,44,124,44,"it"],[128,46,124,46],[128,50,124,50,"routeKeys"],[128,59,124,59],[128,60,124,60,"includes"],[128,68,124,68],[128,69,124,69,"it"],[128,71,124,71],[128,72,124,72,"key"],[128,75,124,75],[128,76,124,76],[128,77,124,77],[128,81,124,81],[128,83,124,83],[129,8,125,6],[129,15,125,13,"changeIndex"],[129,26,125,24],[129,27,125,25],[130,10,126,8,"stale"],[130,15,126,13],[130,17,126,15],[130,22,126,20],[131,10,127,8,"type"],[131,14,127,12],[131,16,127,14],[131,21,127,19],[132,10,128,8,"key"],[132,13,128,11],[132,15,128,13],[132,22,128,20],[132,26,128,20,"nanoid"],[132,43,128,26],[132,45,128,27],[132,46,128,28],[132,48,128,30],[133,10,129,8,"index"],[133,15,129,13],[134,10,130,8,"routeNames"],[134,20,130,18],[135,10,131,8,"history"],[135,17,131,15],[136,10,132,8,"routes"],[136,16,132,14],[137,10,133,8,"preloadedRouteKeys"],[137,28,133,26],[137,30,133,28,"state"],[137,35,133,33],[137,36,133,34,"preloadedRouteKeys"],[137,54,133,52],[137,56,133,54,"filter"],[137,62,133,60],[137,63,133,61,"key"],[137,66,133,64],[137,70,133,68,"routeKeys"],[137,79,133,77],[137,80,133,78,"includes"],[137,88,133,86],[137,89,133,87,"key"],[137,92,133,90],[137,93,133,91],[137,94,133,92],[137,98,133,96],[138,8,134,6],[138,9,134,7],[138,11,134,9,"index"],[138,16,134,14],[138,18,134,16,"backBehavior"],[138,30,134,28],[138,32,134,30,"initialRouteName"],[138,48,134,46],[138,49,134,47],[139,6,135,4],[139,7,135,5],[140,6,136,4,"getStateForRouteNamesChange"],[140,33,136,31,"getStateForRouteNamesChange"],[140,34,136,32,"state"],[140,39,136,37],[140,41,136,37,"_ref4"],[140,46,136,37],[140,48,140,7],[141,8,140,7],[141,12,137,6,"routeNames"],[141,22,137,16],[141,25,137,16,"_ref4"],[141,30,137,16],[141,31,137,6,"routeNames"],[141,41,137,16],[142,10,138,6,"routeParamList"],[142,24,138,20],[142,27,138,20,"_ref4"],[142,32,138,20],[142,33,138,6,"routeParamList"],[142,47,138,20],[143,10,139,6,"routeKeyChanges"],[143,25,139,21],[143,28,139,21,"_ref4"],[143,33,139,21],[143,34,139,6,"routeKeyChanges"],[143,49,139,21],[144,8,141,6],[144,12,141,12,"routes"],[144,18,141,18],[144,21,141,21,"routeNames"],[144,31,141,31],[144,32,141,32,"map"],[144,35,141,35],[144,36,141,36,"name"],[144,40,141,40],[144,44,141,44,"state"],[144,49,141,49],[144,50,141,50,"routes"],[144,56,141,56],[144,57,141,57,"find"],[144,61,141,61],[144,62,141,62,"r"],[144,63,141,63],[144,67,141,67,"r"],[144,68,141,68],[144,69,141,69,"name"],[144,73,141,73],[144,78,141,78,"name"],[144,82,141,82],[144,86,141,86],[144,87,141,87,"routeKeyChanges"],[144,102,141,102],[144,103,141,103,"includes"],[144,111,141,111],[144,112,141,112,"r"],[144,113,141,113],[144,114,141,114,"name"],[144,118,141,118],[144,119,141,119],[144,120,141,120],[144,124,141,124],[145,10,142,8,"name"],[145,14,142,12],[146,10,143,8,"key"],[146,13,143,11],[146,15,143,13],[146,18,143,16,"name"],[146,22,143,20],[146,26,143,24],[146,30,143,24,"nanoid"],[146,47,143,30],[146,49,143,31],[146,50,143,32],[146,52,143,34],[147,10,144,8,"params"],[147,16,144,14],[147,18,144,16,"routeParamList"],[147,32,144,30],[147,33,144,31,"name"],[147,37,144,35],[148,8,145,6],[148,9,145,7],[148,10,145,8],[149,8,146,6],[149,12,146,12,"index"],[149,17,146,17],[149,20,146,20,"Math"],[149,24,146,24],[149,25,146,25,"max"],[149,28,146,28],[149,29,146,29],[149,30,146,30],[149,32,146,32,"routeNames"],[149,42,146,42],[149,43,146,43,"indexOf"],[149,50,146,50],[149,51,146,51,"state"],[149,56,146,56],[149,57,146,57,"routes"],[149,63,146,63],[149,64,146,64,"state"],[149,69,146,69],[149,70,146,70,"index"],[149,75,146,75],[149,76,146,76],[149,77,146,77,"name"],[149,81,146,81],[149,82,146,82],[149,83,146,83],[150,8,147,6],[150,12,147,10,"history"],[150,19,147,17],[150,22,147,20,"state"],[150,27,147,25],[150,28,147,26,"history"],[150,35,147,33],[150,36,147,34,"filter"],[150,42,147,40],[151,8,148,6],[152,8,149,6,"it"],[152,10,149,8],[152,14,149,12,"it"],[152,16,149,14],[152,17,149,15,"type"],[152,21,149,19],[152,26,149,24],[152,33,149,31],[152,37,149,35,"routes"],[152,43,149,41],[152,44,149,42,"find"],[152,48,149,46],[152,49,149,47,"r"],[152,50,149,48],[152,54,149,52,"r"],[152,55,149,53],[152,56,149,54,"key"],[152,59,149,57],[152,64,149,62,"it"],[152,66,149,64],[152,67,149,65,"key"],[152,70,149,68],[152,71,149,69],[152,72,149,70],[153,8,150,6],[153,12,150,10],[153,13,150,11,"history"],[153,20,150,18],[153,21,150,19,"length"],[153,27,150,25],[153,29,150,27],[154,10,151,8,"history"],[154,17,151,15],[154,20,151,18,"getRouteHistory"],[154,35,151,33],[154,36,151,34,"routes"],[154,42,151,40],[154,44,151,42,"index"],[154,49,151,47],[154,51,151,49,"backBehavior"],[154,63,151,61],[154,65,151,63,"initialRouteName"],[154,81,151,79],[154,82,151,80],[155,8,152,6],[156,8,153,6],[156,15,153,13],[157,10,154,8],[157,13,154,11,"state"],[157,18,154,16],[158,10,155,8,"history"],[158,17,155,15],[159,10,156,8,"routeNames"],[159,20,156,18],[160,10,157,8,"routes"],[160,16,157,14],[161,10,158,8,"index"],[162,8,159,6],[162,9,159,7],[163,6,160,4],[163,7,160,5],[164,6,161,4,"getStateForRouteFocus"],[164,27,161,25,"getStateForRouteFocus"],[164,28,161,26,"state"],[164,33,161,31],[164,35,161,33,"key"],[164,38,161,36],[164,40,161,38],[165,8,162,6],[165,12,162,12,"index"],[165,17,162,17],[165,20,162,20,"state"],[165,25,162,25],[165,26,162,26,"routes"],[165,32,162,32],[165,33,162,33,"findIndex"],[165,42,162,42],[165,43,162,43,"r"],[165,44,162,44],[165,48,162,48,"r"],[165,49,162,49],[165,50,162,50,"key"],[165,53,162,53],[165,58,162,58,"key"],[165,61,162,61],[165,62,162,62],[166,8,163,6],[166,12,163,10,"index"],[166,17,163,15],[166,22,163,20],[166,23,163,21],[166,24,163,22],[166,28,163,26,"index"],[166,33,163,31],[166,38,163,36,"state"],[166,43,163,41],[166,44,163,42,"index"],[166,49,163,47],[166,51,163,49],[167,10,164,8],[167,17,164,15,"state"],[167,22,164,20],[168,8,165,6],[169,8,166,6],[169,15,166,13,"changeIndex"],[169,26,166,24],[169,27,166,25,"state"],[169,32,166,30],[169,34,166,32,"index"],[169,39,166,37],[169,41,166,39,"backBehavior"],[169,53,166,51],[169,55,166,53,"initialRouteName"],[169,71,166,69],[169,72,166,70],[170,6,167,4],[170,7,167,5],[171,6,168,4,"getStateForAction"],[171,23,168,21,"getStateForAction"],[171,24,168,22,"state"],[171,29,168,27],[171,31,168,29,"action"],[171,37,168,35],[171,39,168,35,"_ref5"],[171,44,168,35],[171,46,171,7],[172,8,171,7],[172,12,169,6,"routeParamList"],[172,26,169,20],[172,29,169,20,"_ref5"],[172,34,169,20],[172,35,169,6,"routeParamList"],[172,49,169,20],[173,10,170,6,"routeGetIdList"],[173,24,170,20],[173,27,170,20,"_ref5"],[173,32,170,20],[173,33,170,6,"routeGetIdList"],[173,47,170,20],[174,8,172,6],[174,16,172,14,"action"],[174,22,172,20],[174,23,172,21,"type"],[174,27,172,25],[175,10,173,8],[175,15,173,13],[175,24,173,22],[176,10,174,8],[176,15,174,13],[176,25,174,23],[177,10,175,8],[177,15,175,13],[177,36,175,34],[178,12,176,10],[179,14,177,12],[179,18,177,18,"index"],[179,23,177,23],[179,26,177,26,"state"],[179,31,177,31],[179,32,177,32,"routes"],[179,38,177,38],[179,39,177,39,"findIndex"],[179,48,177,48],[179,49,177,49,"route"],[179,54,177,54],[179,58,177,58,"route"],[179,63,177,63],[179,64,177,64,"name"],[179,68,177,68],[179,73,177,73,"action"],[179,79,177,79],[179,80,177,80,"payload"],[179,87,177,87],[179,88,177,88,"name"],[179,92,177,92],[179,93,177,93],[180,14,178,12],[180,18,178,16,"index"],[180,23,178,21],[180,28,178,26],[180,29,178,27],[180,30,178,28],[180,32,178,30],[181,16,179,14],[181,23,179,21],[181,27,179,25],[182,14,180,12],[183,14,181,12],[183,18,181,18,"updatedState"],[183,30,181,30],[183,33,181,33,"changeIndex"],[183,44,181,44],[183,45,181,45],[184,16,182,14],[184,19,182,17,"state"],[184,24,182,22],[185,16,183,14,"routes"],[185,22,183,20],[185,24,183,22,"state"],[185,29,183,27],[185,30,183,28,"routes"],[185,36,183,34],[185,37,183,35,"map"],[185,40,183,38],[185,41,183,39,"route"],[185,46,183,44],[185,50,183,48],[186,18,184,16],[186,22,184,20,"route"],[186,27,184,25],[186,28,184,26,"name"],[186,32,184,30],[186,37,184,35,"action"],[186,43,184,41],[186,44,184,42,"payload"],[186,51,184,49],[186,52,184,50,"name"],[186,56,184,54],[186,58,184,56],[187,20,185,18],[187,27,185,25,"route"],[187,32,185,30],[188,18,186,16],[189,18,187,16],[189,22,187,22,"getId"],[189,27,187,27],[189,30,187,30,"routeGetIdList"],[189,44,187,44],[189,45,187,45,"route"],[189,50,187,50],[189,51,187,51,"name"],[189,55,187,55],[189,56,187,56],[190,18,188,16],[190,22,188,22,"currentId"],[190,31,188,31],[190,34,188,34,"getId"],[190,39,188,39],[190,42,188,42],[191,20,189,18,"params"],[191,26,189,24],[191,28,189,26,"route"],[191,33,189,31],[191,34,189,32,"params"],[192,18,190,16],[192,19,190,17],[192,20,190,18],[193,18,191,16],[193,22,191,22,"nextId"],[193,28,191,28],[193,31,191,31,"getId"],[193,36,191,36],[193,39,191,39],[194,20,192,18,"params"],[194,26,192,24],[194,28,192,26,"action"],[194,34,192,32],[194,35,192,33,"payload"],[194,42,192,40],[194,43,192,41,"params"],[195,18,193,16],[195,19,193,17],[195,20,193,18],[196,18,194,16],[196,22,194,22,"key"],[196,25,194,25],[196,28,194,28,"currentId"],[196,37,194,37],[196,42,194,42,"nextId"],[196,48,194,48],[196,51,194,51,"route"],[196,56,194,56],[196,57,194,57,"key"],[196,60,194,60],[196,63,194,63],[196,66,194,66,"route"],[196,71,194,71],[196,72,194,72,"name"],[196,76,194,76],[196,80,194,80],[196,84,194,80,"nanoid"],[196,101,194,86],[196,103,194,87],[196,104,194,88],[196,106,194,90],[197,18,195,16],[197,22,195,20,"params"],[197,28,195,26],[198,18,196,16],[198,22,196,20],[198,23,196,21,"action"],[198,29,196,27],[198,30,196,28,"type"],[198,34,196,32],[198,39,196,37],[198,49,196,47],[198,53,196,51,"action"],[198,59,196,57],[198,60,196,58,"type"],[198,64,196,62],[198,69,196,67],[198,90,196,88],[198,95,196,93,"action"],[198,101,196,99],[198,102,196,100,"payload"],[198,109,196,107],[198,110,196,108,"merge"],[198,115,196,113],[198,119,196,117,"currentId"],[198,128,196,126],[198,133,196,131,"nextId"],[198,139,196,137],[198,141,196,139],[199,20,197,18,"params"],[199,26,197,24],[199,29,197,27,"action"],[199,35,197,33],[199,36,197,34,"payload"],[199,43,197,41],[199,44,197,42,"params"],[199,50,197,48],[199,55,197,53,"undefined"],[199,64,197,62],[199,68,197,66,"routeParamList"],[199,82,197,80],[199,83,197,81,"route"],[199,88,197,86],[199,89,197,87,"name"],[199,93,197,91],[199,94,197,92],[199,99,197,97,"undefined"],[199,108,197,106],[199,111,197,109],[200,22,198,20],[200,25,198,23,"routeParamList"],[200,39,198,37],[200,40,198,38,"route"],[200,45,198,43],[200,46,198,44,"name"],[200,50,198,48],[200,51,198,49],[201,22,199,20],[201,25,199,23,"route"],[201,30,199,28],[201,31,199,29,"params"],[201,37,199,35],[202,22,200,20],[202,25,200,23,"action"],[202,31,200,29],[202,32,200,30,"payload"],[202,39,200,37],[202,40,200,38,"params"],[203,20,201,18],[203,21,201,19],[203,24,201,22,"route"],[203,29,201,27],[203,30,201,28,"params"],[203,36,201,34],[204,18,202,16],[204,19,202,17],[204,25,202,23],[205,20,203,18,"params"],[205,26,203,24],[205,29,203,27,"routeParamList"],[205,43,203,41],[205,44,203,42,"route"],[205,49,203,47],[205,50,203,48,"name"],[205,54,203,52],[205,55,203,53],[205,60,203,58,"undefined"],[205,69,203,67],[205,72,203,70],[206,22,204,20],[206,25,204,23,"routeParamList"],[206,39,204,37],[206,40,204,38,"route"],[206,45,204,43],[206,46,204,44,"name"],[206,50,204,48],[206,51,204,49],[207,22,205,20],[207,25,205,23,"action"],[207,31,205,29],[207,32,205,30,"payload"],[207,39,205,37],[207,40,205,38,"params"],[208,20,206,18],[208,21,206,19],[208,24,206,22,"action"],[208,30,206,28],[208,31,206,29,"payload"],[208,38,206,36],[208,39,206,37,"params"],[208,45,206,43],[209,18,207,16],[210,18,208,16],[210,22,208,22,"path"],[210,26,208,26],[210,29,208,29,"action"],[210,35,208,35],[210,36,208,36,"type"],[210,40,208,40],[210,45,208,45],[210,55,208,55],[210,59,208,59,"action"],[210,65,208,65],[210,66,208,66,"payload"],[210,73,208,73],[210,74,208,74,"path"],[210,78,208,78],[210,82,208,82],[210,86,208,86],[210,89,208,89,"action"],[210,95,208,95],[210,96,208,96,"payload"],[210,103,208,103],[210,104,208,104,"path"],[210,108,208,108],[210,111,208,111,"route"],[210,116,208,116],[210,117,208,117,"path"],[210,121,208,121],[211,18,209,16],[211,25,209,23,"params"],[211,31,209,29],[211,36,209,34,"route"],[211,41,209,39],[211,42,209,40,"params"],[211,48,209,46],[211,52,209,50,"path"],[211,56,209,54],[211,61,209,59,"route"],[211,66,209,64],[211,67,209,65,"path"],[211,71,209,69],[211,74,209,72],[212,20,210,18],[212,23,210,21,"route"],[212,28,210,26],[213,20,211,18,"key"],[213,23,211,21],[214,20,212,18,"path"],[214,24,212,22],[215,20,213,18,"params"],[216,18,214,16],[216,19,214,17],[216,22,214,20,"route"],[216,27,214,25],[217,16,215,14],[217,17,215,15],[218,14,216,12],[218,15,216,13],[218,17,216,15,"index"],[218,22,216,20],[218,24,216,22,"backBehavior"],[218,36,216,34],[218,38,216,36,"initialRouteName"],[218,54,216,52],[218,55,216,53],[219,14,217,12],[219,21,217,19],[220,16,218,14],[220,19,218,17,"updatedState"],[220,31,218,29],[221,16,219,14,"preloadedRouteKeys"],[221,34,219,32],[221,36,219,34,"updatedState"],[221,48,219,46],[221,49,219,47,"preloadedRouteKeys"],[221,67,219,65],[221,68,219,66,"filter"],[221,74,219,72],[221,75,219,73,"key"],[221,78,219,76],[221,82,219,80,"key"],[221,85,219,83],[221,90,219,88,"state"],[221,95,219,93],[221,96,219,94,"routes"],[221,102,219,100],[221,103,219,101,"updatedState"],[221,115,219,113],[221,116,219,114,"index"],[221,121,219,119],[221,122,219,120],[221,123,219,121,"key"],[221,126,219,124],[222,14,220,12],[222,15,220,13],[223,12,221,10],[224,10,222,8],[224,15,222,13],[224,24,222,22],[225,12,223,10],[226,14,224,12],[226,18,224,16,"state"],[226,23,224,21],[226,24,224,22,"history"],[226,31,224,29],[226,32,224,30,"length"],[226,38,224,36],[226,43,224,41],[226,44,224,42],[226,46,224,44],[227,16,225,14],[227,23,225,21],[227,27,225,25],[228,14,226,12],[229,14,227,12],[229,18,227,18,"previousKey"],[229,29,227,29],[229,32,227,32,"state"],[229,37,227,37],[229,38,227,38,"history"],[229,45,227,45],[229,46,227,46,"state"],[229,51,227,51],[229,52,227,52,"history"],[229,59,227,59],[229,60,227,60,"length"],[229,66,227,66],[229,69,227,69],[229,70,227,70],[229,71,227,71],[229,73,227,73,"key"],[229,76,227,76],[230,14,228,12],[230,18,228,18,"index"],[230,24,228,23],[230,27,228,26,"state"],[230,32,228,31],[230,33,228,32,"routes"],[230,39,228,38],[230,40,228,39,"findIndex"],[230,49,228,48],[230,50,228,49,"route"],[230,55,228,54],[230,59,228,58,"route"],[230,64,228,63],[230,65,228,64,"key"],[230,68,228,67],[230,73,228,72,"previousKey"],[230,84,228,83],[230,85,228,84],[231,14,229,12],[231,18,229,16,"index"],[231,24,229,21],[231,29,229,26],[231,30,229,27],[231,31,229,28],[231,33,229,30],[232,16,230,14],[232,23,230,21],[232,27,230,25],[233,14,231,12],[234,14,232,12],[234,21,232,19],[235,16,233,14],[235,19,233,17,"state"],[235,24,233,22],[236,16,234,14,"preloadedRouteKeys"],[236,34,234,32],[236,36,234,34,"state"],[236,41,234,39],[236,42,234,40,"preloadedRouteKeys"],[236,60,234,58],[236,61,234,59,"filter"],[236,67,234,65],[236,68,234,66,"key"],[236,71,234,69],[236,75,234,73,"key"],[236,78,234,76],[236,83,234,81,"state"],[236,88,234,86],[236,89,234,87,"routes"],[236,95,234,93],[236,96,234,94,"index"],[236,102,234,99],[236,103,234,100],[236,104,234,101,"key"],[236,107,234,104],[236,108,234,105],[237,16,235,14,"history"],[237,23,235,21],[237,25,235,23,"state"],[237,30,235,28],[237,31,235,29,"history"],[237,38,235,36],[237,39,235,37,"slice"],[237,44,235,42],[237,45,235,43],[237,46,235,44],[237,48,235,46],[237,49,235,47],[237,50,235,48],[237,51,235,49],[238,16,236,14,"index"],[238,21,236,19],[238,23,236,14,"index"],[239,14,237,12],[239,15,237,13],[240,12,238,10],[241,10,239,8],[241,15,239,13],[241,24,239,22],[242,12,240,10],[243,14,241,12],[243,18,241,18,"routeIndex"],[243,28,241,28],[243,31,241,31,"state"],[243,36,241,36],[243,37,241,37,"routes"],[243,43,241,43],[243,44,241,44,"findIndex"],[243,53,241,53],[243,54,241,54,"route"],[243,59,241,59],[243,63,241,63,"route"],[243,68,241,68],[243,69,241,69,"name"],[243,73,241,73],[243,78,241,78,"action"],[243,84,241,84],[243,85,241,85,"payload"],[243,92,241,92],[243,93,241,93,"name"],[243,97,241,97],[243,98,241,98],[244,14,242,12],[244,18,242,16,"routeIndex"],[244,28,242,26],[244,33,242,31],[244,34,242,32],[244,35,242,33],[244,37,242,35],[245,16,243,14],[245,23,243,21],[245,27,243,25],[246,14,244,12],[247,14,245,12],[247,18,245,18,"route"],[247,23,245,23],[247,26,245,26,"state"],[247,31,245,31],[247,32,245,32,"routes"],[247,38,245,38],[247,39,245,39,"routeIndex"],[247,49,245,49],[247,50,245,50],[248,14,246,12],[248,18,246,18,"getId"],[248,23,246,23],[248,26,246,26,"routeGetIdList"],[248,40,246,40],[248,41,246,41,"route"],[248,46,246,46],[248,47,246,47,"name"],[248,51,246,51],[248,52,246,52],[249,14,247,12],[249,18,247,18,"currentId"],[249,27,247,27],[249,30,247,30,"getId"],[249,35,247,35],[249,38,247,38],[250,16,248,14,"params"],[250,22,248,20],[250,24,248,22,"route"],[250,29,248,27],[250,30,248,28,"params"],[251,14,249,12],[251,15,249,13],[251,16,249,14],[252,14,250,12],[252,18,250,18,"nextId"],[252,24,250,24],[252,27,250,27,"getId"],[252,32,250,32],[252,35,250,35],[253,16,251,14,"params"],[253,22,251,20],[253,24,251,22,"action"],[253,30,251,28],[253,31,251,29,"payload"],[253,38,251,36],[253,39,251,37,"params"],[254,14,252,12],[254,15,252,13],[254,16,252,14],[255,14,253,12],[255,18,253,18,"key"],[255,21,253,21],[255,24,253,24,"currentId"],[255,33,253,33],[255,38,253,38,"nextId"],[255,44,253,44],[255,47,253,47,"route"],[255,52,253,52],[255,53,253,53,"key"],[255,56,253,56],[255,59,253,59],[255,62,253,62,"route"],[255,67,253,67],[255,68,253,68,"name"],[255,72,253,72],[255,76,253,76],[255,80,253,76,"nanoid"],[255,97,253,82],[255,99,253,83],[255,100,253,84],[255,102,253,86],[256,14,254,12],[256,18,254,18,"params"],[256,24,254,24],[256,27,254,27,"action"],[256,33,254,33],[256,34,254,34,"payload"],[256,41,254,41],[256,42,254,42,"params"],[256,48,254,48],[256,53,254,53,"undefined"],[256,62,254,62],[256,66,254,66,"routeParamList"],[256,80,254,80],[256,81,254,81,"route"],[256,86,254,86],[256,87,254,87,"name"],[256,91,254,91],[256,92,254,92],[256,97,254,97,"undefined"],[256,106,254,106],[256,109,254,109],[257,16,255,14],[257,19,255,17,"routeParamList"],[257,33,255,31],[257,34,255,32,"route"],[257,39,255,37],[257,40,255,38,"name"],[257,44,255,42],[257,45,255,43],[258,16,256,14],[258,19,256,17,"action"],[258,25,256,23],[258,26,256,24,"payload"],[258,33,256,31],[258,34,256,32,"params"],[259,14,257,12],[259,15,257,13],[259,18,257,16,"undefined"],[259,27,257,25],[260,14,258,12],[260,18,258,18,"newRoute"],[260,26,258,26],[260,29,258,29,"params"],[260,35,258,35],[260,40,258,40,"route"],[260,45,258,45],[260,46,258,46,"params"],[260,52,258,52],[260,55,258,55],[261,16,259,14],[261,19,259,17,"route"],[261,24,259,22],[262,16,260,14,"key"],[262,19,260,17],[263,16,261,14,"params"],[264,14,262,12],[264,15,262,13],[264,18,262,16,"route"],[264,23,262,21],[265,14,263,12],[265,21,263,19],[266,16,264,14],[266,19,264,17,"state"],[266,24,264,22],[267,16,265,14,"preloadedRouteKeys"],[267,34,265,32],[267,36,265,34,"state"],[267,41,265,39],[267,42,265,40,"preloadedRouteKeys"],[267,60,265,58],[267,61,265,59,"filter"],[267,67,265,65],[267,68,265,66,"key"],[267,71,265,69],[267,75,265,73,"key"],[267,78,265,76],[267,83,265,81,"route"],[267,88,265,86],[267,89,265,87,"key"],[267,92,265,90],[267,93,265,91],[267,94,265,92,"concat"],[267,100,265,98],[267,101,265,99,"newRoute"],[267,109,265,107],[267,110,265,108,"key"],[267,113,265,111],[267,114,265,112],[268,16,266,14,"routes"],[268,22,266,20],[268,24,266,22,"state"],[268,29,266,27],[268,30,266,28,"routes"],[268,36,266,34],[268,37,266,35,"map"],[268,40,266,38],[268,41,266,39],[268,42,266,40,"route"],[268,47,266,45],[268,49,266,47,"index"],[268,54,266,52],[268,59,266,57,"index"],[268,64,266,62],[268,69,266,67,"routeIndex"],[268,79,266,77],[268,82,266,80,"newRoute"],[268,90,266,88],[268,93,266,91,"route"],[268,98,266,96],[268,99,266,97],[269,16,267,14,"history"],[269,23,267,21],[269,25,267,23,"key"],[269,28,267,26],[269,33,267,31,"route"],[269,38,267,36],[269,39,267,37,"key"],[269,42,267,40],[269,45,267,43,"state"],[269,50,267,48],[269,51,267,49,"history"],[269,58,267,56],[269,61,267,59,"state"],[269,66,267,64],[269,67,267,65,"history"],[269,74,267,72],[269,75,267,73,"filter"],[269,81,267,79],[269,82,267,80,"record"],[269,88,267,86],[269,92,267,90,"record"],[269,98,267,96],[269,99,267,97,"key"],[269,102,267,100],[269,107,267,105,"route"],[269,112,267,110],[269,113,267,111,"key"],[269,116,267,114],[270,14,268,12],[270,15,268,13],[271,12,269,10],[272,10,270,8],[273,12,271,10],[273,19,271,17,"BaseRouter"],[273,41,271,27],[273,42,271,28,"getStateForAction"],[273,59,271,45],[273,60,271,46,"state"],[273,65,271,51],[273,67,271,53,"action"],[273,73,271,59],[273,74,271,60],[274,8,272,6],[275,6,273,4],[275,7,273,5],[276,6,274,4,"actionCreators"],[276,20,274,18],[276,22,274,20,"TabActions"],[277,4,275,2],[277,5,275,3],[278,4,276,2],[278,11,276,9,"router"],[278,17,276,15],[279,2,277,0],[280,0,277,1],[280,3]],"functionMap":{"names":["<global>","TabActions.jumpTo","getRouteHistory","routes.findIndex$argument_0","changeIndex","state.history.filter$argument_0","TabRouter","router.getInitialState","routeNames.map$argument_0","router.getRehydratedState","state.routes.find$argument_0","routes.map$argument_0","state.preloadedRouteKeys.filter$argument_0","router.getStateForRouteNamesChange","routes.find$argument_0","router.getStateForRouteFocus","state.routes.findIndex$argument_0","router.getStateForAction","state.routes.map$argument_0","updatedState.preloadedRouteKeys.filter$argument_0"],"mappings":"AAA;ECM;GDQ;wBEE;2CCwB,wCD;CFc;oBIC;mCCI,yDD;CJY;OMC;ICO;oCCK;QDI;KDY;IGC;oCDQ;wCEC,oBF;OCU;mCEE,kBF;4CJC,gCI;6DGS,8BH;KHE;IOC;oCLK,0BE,yDF;OKI;MRI,yCS,qBT,CQ;KPW;ISC;2CCC,kBD;KTK;IWC;iDDS,2CC;uCCM;eDgC;yEEI,mDF;iDDS,kCC;kELM,sCK;sDDO,2CC;kELwB,wBK;uCCC,yDD;gFZC,kCY;KXM;CNI"}},"type":"js/module"}]}