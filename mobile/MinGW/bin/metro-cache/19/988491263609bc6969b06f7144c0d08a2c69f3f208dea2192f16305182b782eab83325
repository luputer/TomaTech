{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":514,"column":44,"index":16815}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":514,"column":44,"index":16815}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"escape-string-regexp","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":42,"index":57}}],"key":"pv3xsw91DuEhfWNv1C6M3srszHc="}},{"name":"query-string","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":4,"column":0,"index":58},"end":{"line":4,"column":44,"index":102}}],"key":"GFSDDT7dIJnvWSebFhtcKgwXBCQ="}},{"name":"./arrayStartsWith.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":5,"column":0,"index":103},"end":{"line":5,"column":55,"index":158}}],"key":"NsX6PlUeFYWbdEP4TkdHPhoJrio="}},{"name":"./findFocusedRoute.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":6,"column":0,"index":159},"end":{"line":6,"column":57,"index":216}}],"key":"LWWRvMxZGN5gJT3WCfTl1X4UAPQ="}},{"name":"./getPatternParts.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":7,"column":0,"index":217},"end":{"line":7,"column":55,"index":272}}],"key":"z4Ap0VIyJOTYCzFllv6s+WEku7M="}},{"name":"./isArrayEqual.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":8,"column":0,"index":273},"end":{"line":8,"column":49,"index":322}}],"key":"Vb50P4WVkAnizz+ENIDrg6CJX4g="}},{"name":"./validatePathConfig.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":9,"column":0,"index":323},"end":{"line":9,"column":61,"index":384}}],"key":"VmpJdDW9SG25WCfHhqlvsXwd7IE="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getStateFromPath = getStateFromPath;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var _escapeStringRegexp = _interopRequireDefault(require(_dependencyMap[2], \"escape-string-regexp\"));\n  var queryString = _interopRequireWildcard(require(_dependencyMap[3], \"query-string\"));\n  var _arrayStartsWith = require(_dependencyMap[4], \"./arrayStartsWith.js\");\n  var _findFocusedRoute = require(_dependencyMap[5], \"./findFocusedRoute.js\");\n  var _getPatternParts = require(_dependencyMap[6], \"./getPatternParts.js\");\n  var _isArrayEqual = require(_dependencyMap[7], \"./isArrayEqual.js\");\n  var _validatePathConfig = require(_dependencyMap[8], \"./validatePathConfig.js\");\n  function _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }\n  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\n  /**\n   * Utility to parse a path string to initial state object accepted by the container.\n   * This is useful for deep linking when we need to handle the incoming URL.\n   *\n   * @example\n   * ```js\n   * getStateFromPath(\n   *   '/chat/jane/42',\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         parse: { id: Number }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n   * @param options Extra options to fine-tune how to parse the path.\n   */\n  function getStateFromPath(path, options) {\n    var _getConfigResources = getConfigResources(options),\n      initialRoutes = _getConfigResources.initialRoutes,\n      configs = _getConfigResources.configs;\n    var screens = options?.screens;\n    var remaining = path.replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n    // Make sure there is a trailing slash\n    remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n    var prefix = options?.path?.replace(/^\\//, ''); // Remove extra leading slash\n\n    if (prefix) {\n      // Make sure there is a trailing slash\n      var normalizedPrefix = prefix.endsWith('/') ? prefix : `${prefix}/`;\n\n      // If the path doesn't start with the prefix, it's not a match\n      if (!remaining.startsWith(normalizedPrefix)) {\n        return undefined;\n      }\n\n      // Remove the prefix from the path\n      remaining = remaining.replace(normalizedPrefix, '');\n    }\n    if (screens === undefined) {\n      // When no config is specified, use the path segments as route names\n      var _routes = remaining.split('/').filter(Boolean).map(segment => {\n        var name = decodeURIComponent(segment);\n        return {\n          name\n        };\n      });\n      if (_routes.length) {\n        return createNestedStateObject(path, _routes, initialRoutes);\n      }\n      return undefined;\n    }\n    if (remaining === '/') {\n      // We need to add special handling of empty path so navigation to empty path also works\n      // When handling empty path, we should only look at the root level config\n      var match = configs.find(config => config.segments.join('/') === '');\n      if (match) {\n        return createNestedStateObject(path, match.routeNames.map(name => ({\n          name\n        })), initialRoutes, configs);\n      }\n      return undefined;\n    }\n    var result;\n    var current;\n\n    // We match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    var _matchAgainstConfigs = matchAgainstConfigs(remaining, configs),\n      routes = _matchAgainstConfigs.routes,\n      remainingPath = _matchAgainstConfigs.remainingPath;\n    if (routes !== undefined) {\n      // This will always be empty if full path matched\n      current = createNestedStateObject(path, routes, initialRoutes, configs);\n      remaining = remainingPath;\n      result = current;\n    }\n    if (current == null || result == null) {\n      return undefined;\n    }\n    return result;\n  }\n\n  /**\n   * Reference to the last used config resources. This is used to avoid recomputing the config resources when the options are the same.\n   */\n  var cachedConfigResources = new WeakMap();\n  function getConfigResources(options) {\n    if (!options) return prepareConfigResources();\n    var cached = cachedConfigResources.get(options);\n    if (cached) return cached;\n    var resources = prepareConfigResources(options);\n    cachedConfigResources.set(options, resources);\n    return resources;\n  }\n  function prepareConfigResources(options) {\n    if (options) {\n      (0, _validatePathConfig.validatePathConfig)(options);\n    }\n    var initialRoutes = getInitialRoutes(options);\n    var configs = getSortedNormalizedConfigs(initialRoutes, options?.screens);\n    checkForDuplicatedConfigs(configs);\n    var configWithRegexes = getConfigsWithRegexes(configs);\n    return {\n      initialRoutes,\n      configs,\n      configWithRegexes\n    };\n  }\n  function getInitialRoutes(options) {\n    var initialRoutes = [];\n    if (options?.initialRouteName) {\n      initialRoutes.push({\n        initialRouteName: options.initialRouteName,\n        parentScreens: []\n      });\n    }\n    return initialRoutes;\n  }\n  function getSortedNormalizedConfigs(initialRoutes) {\n    var screens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // Create a normalized configs array which will be easier to use\n    return [].concat(...Object.keys(screens).map(key => createNormalizedConfigs(key, screens, initialRoutes, [], [], []))).sort((a, b) => {\n      // Sort config from most specific to least specific:\n      // - more segments\n      // - static segments\n      // - params with regex\n      // - regular params\n      // - wildcard\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if ((0, _isArrayEqual.isArrayEqual)(a.segments, b.segments)) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if ((0, _arrayStartsWith.arrayStartsWith)(a.segments, b.segments)) {\n        return -1;\n      }\n      if ((0, _arrayStartsWith.arrayStartsWith)(b.segments, a.segments)) {\n        return 1;\n      }\n      for (var i = 0; i < Math.max(a.segments.length, b.segments.length); i++) {\n        // if b is longer, b gets higher priority\n        if (a.segments[i] == null) {\n          return 1;\n        }\n\n        // if a is longer, a gets higher priority\n        if (b.segments[i] == null) {\n          return -1;\n        }\n        var aWildCard = a.segments[i] === '*';\n        var bWildCard = b.segments[i] === '*';\n        var aParam = a.segments[i].startsWith(':');\n        var bParam = b.segments[i].startsWith(':');\n        var aRegex = aParam && a.segments[i].includes('(');\n        var bRegex = bParam && b.segments[i].includes('(');\n\n        // if both are wildcard or regex, we compare next component\n        if (aWildCard && bWildCard || aRegex && bRegex) {\n          continue;\n        }\n\n        // if only a is wildcard, b gets higher priority\n        if (aWildCard && !bWildCard) {\n          return 1;\n        }\n\n        // if only b is wildcard, a gets higher priority\n        if (bWildCard && !aWildCard) {\n          return -1;\n        }\n\n        // If only a has a param, b gets higher priority\n        if (aParam && !bParam) {\n          return 1;\n        }\n\n        // If only b has a param, a gets higher priority\n        if (bParam && !aParam) {\n          return -1;\n        }\n\n        // if only a has regex, a gets higher priority\n        if (aRegex && !bRegex) {\n          return -1;\n        }\n\n        // if only b has regex, b gets higher priority\n        if (bRegex && !aRegex) {\n          return 1;\n        }\n      }\n      return a.segments.length - b.segments.length;\n    });\n  }\n  function checkForDuplicatedConfigs(configs) {\n    // Check for duplicate patterns in the config\n    configs.reduce((acc, config) => {\n      var pattern = config.segments.join('/');\n      if (acc[pattern]) {\n        var a = acc[pattern].routeNames;\n        var b = config.routeNames;\n\n        // It's not a problem if the path string omitted from a inner most screen\n        // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n        var intersects = a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);\n        if (!intersects) {\n          throw new Error(`Found conflicting screens with the same pattern. The pattern '${pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n        }\n      }\n      return Object.assign(acc, {\n        [pattern]: config\n      });\n    }, {});\n  }\n  function getConfigsWithRegexes(configs) {\n    return configs.map(c => ({\n      ...c,\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n    }));\n  }\n  var matchAgainstConfigs = (remaining, configs) => {\n    var routes;\n    var remainingPath = remaining;\n\n    // Go through all configs, and see if the next path segment matches our regex\n    var _loop = function (config) {\n        if (!config.regex) {\n          return 0; // continue\n        }\n        var match = remainingPath.match(config.regex);\n\n        // If our regex matches, we need to extract params from the path\n        if (match) {\n          routes = config.routeNames.map(routeName => {\n            var routeConfig = configs.find(c => {\n              // Check matching name AND pattern in case same screen is used at different levels in config\n              return c.screen === routeName && (0, _arrayStartsWith.arrayStartsWith)(config.segments, c.segments);\n            });\n            var params = routeConfig && match.groups ? Object.fromEntries(Object.entries(match.groups).map(_ref => {\n              var _ref2 = (0, _slicedToArray2.default)(_ref, 2),\n                key = _ref2[0],\n                value = _ref2[1];\n              var index = Number(key.replace('param_', ''));\n              var param = routeConfig.params.find(it => it.index === index);\n              if (param?.screen === routeName && param?.name) {\n                return [param.name, value];\n              }\n              return null;\n            }).filter(it => it != null).map(_ref3 => {\n              var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),\n                key = _ref4[0],\n                value = _ref4[1];\n              if (value == null) {\n                return [key, undefined];\n              }\n              var decoded = decodeURIComponent(value);\n              var parsed = routeConfig.parse?.[key] ? routeConfig.parse[key](decoded) : decoded;\n              return [key, parsed];\n            })) : undefined;\n            if (params && Object.keys(params).length) {\n              return {\n                name: routeName,\n                params\n              };\n            }\n            return {\n              name: routeName\n            };\n          });\n          remainingPath = remainingPath.replace(match[0], '');\n          return 1; // break\n        }\n      },\n      _ret;\n    for (var config of configs) {\n      _ret = _loop(config);\n      if (_ret === 0) continue;\n      if (_ret === 1) break;\n    }\n    return {\n      routes,\n      remainingPath\n    };\n  };\n  var createNormalizedConfigs = (screen, routeConfig, initials, paths, parentScreens, routeNames) => {\n    var configs = [];\n    routeNames.push(screen);\n    parentScreens.push(screen);\n    var config = routeConfig[screen];\n    if (typeof config === 'string') {\n      paths.push({\n        screen,\n        path: config\n      });\n      configs.push(createConfigItem(screen, [...routeNames], [...paths]));\n    } else if (typeof config === 'object') {\n      // if an object is specified as the value (e.g. Foo: { ... }),\n      // it can have `path` property and\n      // it could have `screens` prop which has nested configs\n      if (typeof config.path === 'string') {\n        if (config.exact && config.path == null) {\n          throw new Error(`Screen '${screen}' doesn't specify a 'path'. A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. \\`path: ''\\`.`);\n        }\n\n        // We should add alias configs after the main config\n        // So unless they are more specific, main config will be matched first\n        var aliasConfigs = [];\n        if (config.alias) {\n          for (var alias of config.alias) {\n            if (typeof alias === 'string') {\n              aliasConfigs.push(createConfigItem(screen, [...routeNames], [...paths, {\n                screen,\n                path: alias\n              }], config.parse));\n            } else if (typeof alias === 'object') {\n              aliasConfigs.push(createConfigItem(screen, [...routeNames], alias.exact ? [{\n                screen,\n                path: alias.path\n              }] : [...paths, {\n                screen,\n                path: alias.path\n              }], alias.parse));\n            }\n          }\n        }\n        if (config.exact) {\n          // If it's an exact path, we don't need to keep track of the parent screens\n          // So we can clear it\n          paths.length = 0;\n        }\n        paths.push({\n          screen,\n          path: config.path\n        });\n        configs.push(createConfigItem(screen, [...routeNames], [...paths], config.parse));\n        configs.push(...aliasConfigs);\n      }\n      if (typeof config !== 'string' && typeof config.path !== 'string' && config.alias?.length) {\n        throw new Error(`Screen '${screen}' doesn't specify a 'path'. A 'path' needs to be specified in order to use 'alias'.`);\n      }\n      if (config.screens) {\n        // property `initialRouteName` without `screens` has no purpose\n        if (config.initialRouteName) {\n          initials.push({\n            initialRouteName: config.initialRouteName,\n            parentScreens\n          });\n        }\n        Object.keys(config.screens).forEach(nestedConfig => {\n          var result = createNormalizedConfigs(nestedConfig, config.screens, initials, [...paths], [...parentScreens], routeNames);\n          configs.push(...result);\n        });\n      }\n    }\n    routeNames.pop();\n    return configs;\n  };\n  var createConfigItem = (screen, routeNames, paths, parse) => {\n    var parts = [];\n\n    // Parse the path string into parts for easier matching\n    var _loop2 = function (_screen) {\n      parts.push(...(0, _getPatternParts.getPatternParts)(path).map(part => ({\n        ...part,\n        screen: _screen\n      })));\n    };\n    for (var _ref5 of paths) {\n      var _screen = _ref5.screen;\n      var path = _ref5.path;\n      _loop2(_screen);\n    }\n    var regex = parts.length ? new RegExp(`^(${parts.map((it, i) => {\n      if (it.param) {\n        var reg = it.regex || '[^/]+';\n        return `(((?<param_${i}>${reg})\\\\/)${it.optional ? '?' : ''})`;\n      }\n      return `${it.segment === '*' ? '.*' : (0, _escapeStringRegexp.default)(it.segment)}\\\\/`;\n    }).join('')})$`) : undefined;\n    var segments = parts.map(it => it.segment);\n    var params = parts.map((it, i) => it.param ? {\n      index: i,\n      screen: it.screen,\n      name: it.param\n    } : null).filter(it => it != null);\n    return {\n      screen,\n      regex,\n      segments,\n      params,\n      routeNames,\n      parse\n    };\n  };\n  var findParseConfigForRoute = (routeName, flatConfig) => {\n    for (var config of flatConfig) {\n      if (routeName === config.routeNames[config.routeNames.length - 1]) {\n        return config.parse;\n      }\n    }\n    return undefined;\n  };\n\n  // Try to find an initial route connected with the one passed\n  var findInitialRoute = (routeName, parentScreens, initialRoutes) => {\n    for (var config of initialRoutes) {\n      if (parentScreens.length === config.parentScreens.length) {\n        var sameParents = true;\n        for (var i = 0; i < parentScreens.length; i++) {\n          if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n            sameParents = false;\n            break;\n          }\n        }\n        if (sameParents) {\n          return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n        }\n      }\n    }\n    return undefined;\n  };\n\n  // returns state object with values depending on whether\n  // it is the end of state and if there is initialRoute for this level\n  var createStateObject = (initialRoute, route, isEmpty) => {\n    if (isEmpty) {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, route]\n        };\n      } else {\n        return {\n          routes: [route]\n        };\n      }\n    } else {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, {\n            ...route,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      } else {\n        return {\n          routes: [{\n            ...route,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      }\n    }\n  };\n  var createNestedStateObject = (path, routes, initialRoutes, flatConfig) => {\n    var route = routes.shift();\n    var parentScreens = [];\n    var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n    parentScreens.push(route.name);\n    var state = createStateObject(initialRoute, route, routes.length === 0);\n    if (routes.length > 0) {\n      var nestedState = state;\n      while (route = routes.shift()) {\n        initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n        var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n        nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n        if (routes.length > 0) {\n          nestedState = nestedState.routes[nestedStateIndex].state;\n        }\n        parentScreens.push(route.name);\n      }\n    }\n    route = (0, _findFocusedRoute.findFocusedRoute)(state);\n    route.path = path.replace(/\\/$/, '');\n    var params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);\n    if (params) {\n      route.params = {\n        ...route.params,\n        ...params\n      };\n    }\n    return state;\n  };\n  var parseQueryParams = (path, parseConfig) => {\n    var query = path.split('?')[1];\n    var params = queryString.parse(query);\n    if (parseConfig) {\n      Object.keys(params).forEach(name => {\n        if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n          params[name] = parseConfig[name](params[name]);\n        }\n      });\n    }\n    return Object.keys(params).length ? params : undefined;\n  };\n});","lineCount":536,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_interopRequireDefault"],[4,28,1,13],[4,31,1,13,"require"],[4,38,1,13],[4,39,1,13,"_dependencyMap"],[4,53,1,13],[5,2,1,13,"Object"],[5,8,1,13],[5,9,1,13,"defineProperty"],[5,23,1,13],[5,24,1,13,"exports"],[5,31,1,13],[6,4,1,13,"value"],[6,9,1,13],[7,2,1,13],[8,2,1,13,"exports"],[8,9,1,13],[8,10,1,13,"getStateFromPath"],[8,26,1,13],[8,29,1,13,"getStateFromPath"],[8,45,1,13],[9,2,1,13],[9,6,1,13,"_slicedToArray2"],[9,21,1,13],[9,24,1,13,"_interopRequireDefault"],[9,46,1,13],[9,47,1,13,"require"],[9,54,1,13],[9,55,1,13,"_dependencyMap"],[9,69,1,13],[10,2,3,0],[10,6,3,0,"_escapeStringRegexp"],[10,25,3,0],[10,28,3,0,"_interopRequireDefault"],[10,50,3,0],[10,51,3,0,"require"],[10,58,3,0],[10,59,3,0,"_dependencyMap"],[10,73,3,0],[11,2,4,0],[11,6,4,0,"queryString"],[11,17,4,0],[11,20,4,0,"_interopRequireWildcard"],[11,43,4,0],[11,44,4,0,"require"],[11,51,4,0],[11,52,4,0,"_dependencyMap"],[11,66,4,0],[12,2,5,0],[12,6,5,0,"_arrayStartsWith"],[12,22,5,0],[12,25,5,0,"require"],[12,32,5,0],[12,33,5,0,"_dependencyMap"],[12,47,5,0],[13,2,6,0],[13,6,6,0,"_findFocusedRoute"],[13,23,6,0],[13,26,6,0,"require"],[13,33,6,0],[13,34,6,0,"_dependencyMap"],[13,48,6,0],[14,2,7,0],[14,6,7,0,"_getPatternParts"],[14,22,7,0],[14,25,7,0,"require"],[14,32,7,0],[14,33,7,0,"_dependencyMap"],[14,47,7,0],[15,2,8,0],[15,6,8,0,"_isArrayEqual"],[15,19,8,0],[15,22,8,0,"require"],[15,29,8,0],[15,30,8,0,"_dependencyMap"],[15,44,8,0],[16,2,9,0],[16,6,9,0,"_validatePathConfig"],[16,25,9,0],[16,28,9,0,"require"],[16,35,9,0],[16,36,9,0,"_dependencyMap"],[16,50,9,0],[17,2,9,61],[17,11,9,61,"_getRequireWildcardCache"],[17,36,9,61,"e"],[17,37,9,61],[17,66,9,61,"WeakMap"],[17,73,9,61],[17,92,9,61,"r"],[17,93,9,61],[17,100,9,61,"WeakMap"],[17,107,9,61],[17,111,9,61,"t"],[17,112,9,61],[17,119,9,61,"WeakMap"],[17,126,9,61],[17,138,9,61,"_getRequireWildcardCache"],[17,162,9,61],[17,174,9,61,"_getRequireWildcardCache"],[17,175,9,61,"e"],[17,176,9,61],[17,187,9,61,"e"],[17,188,9,61],[17,191,9,61,"t"],[17,192,9,61],[17,195,9,61,"r"],[17,196,9,61],[17,201,9,61,"e"],[17,202,9,61],[18,2,9,61],[18,11,9,61,"_interopRequireWildcard"],[18,35,9,61,"e"],[18,36,9,61],[18,38,9,61,"r"],[18,39,9,61],[18,48,9,61,"r"],[18,49,9,61],[18,53,9,61,"e"],[18,54,9,61],[18,58,9,61,"e"],[18,59,9,61],[18,60,9,61,"__esModule"],[18,70,9,61],[18,79,9,61,"e"],[18,80,9,61],[18,95,9,61,"e"],[18,96,9,61],[18,119,9,61,"e"],[18,120,9,61],[18,145,9,61,"e"],[18,146,9,61],[18,157,9,61,"default"],[18,164,9,61],[18,166,9,61,"e"],[18,167,9,61],[18,175,9,61,"t"],[18,176,9,61],[18,179,9,61,"_getRequireWildcardCache"],[18,203,9,61],[18,204,9,61,"r"],[18,205,9,61],[18,212,9,61,"t"],[18,213,9,61],[18,217,9,61,"t"],[18,218,9,61],[18,219,9,61,"has"],[18,222,9,61],[18,223,9,61,"e"],[18,224,9,61],[18,234,9,61,"t"],[18,235,9,61],[18,236,9,61,"get"],[18,239,9,61],[18,240,9,61,"e"],[18,241,9,61],[18,248,9,61,"n"],[18,249,9,61],[18,254,9,61,"__proto__"],[18,263,9,61],[18,273,9,61,"a"],[18,274,9,61],[18,277,9,61,"Object"],[18,283,9,61],[18,284,9,61,"defineProperty"],[18,298,9,61],[18,302,9,61,"Object"],[18,308,9,61],[18,309,9,61,"getOwnPropertyDescriptor"],[18,333,9,61],[18,344,9,61,"u"],[18,345,9,61],[18,349,9,61,"e"],[18,350,9,61],[18,370,9,61,"u"],[18,371,9,61],[18,378,9,61,"hasOwnProperty"],[18,392,9,61],[18,393,9,61,"call"],[18,397,9,61],[18,398,9,61,"e"],[18,399,9,61],[18,401,9,61,"u"],[18,402,9,61],[18,411,9,61,"i"],[18,412,9,61],[18,415,9,61,"a"],[18,416,9,61],[18,419,9,61,"Object"],[18,425,9,61],[18,426,9,61,"getOwnPropertyDescriptor"],[18,450,9,61],[18,451,9,61,"e"],[18,452,9,61],[18,454,9,61,"u"],[18,455,9,61],[18,465,9,61,"i"],[18,466,9,61],[18,471,9,61,"i"],[18,472,9,61],[18,473,9,61,"get"],[18,476,9,61],[18,480,9,61,"i"],[18,481,9,61],[18,482,9,61,"set"],[18,485,9,61],[18,489,9,61,"Object"],[18,495,9,61],[18,496,9,61,"defineProperty"],[18,510,9,61],[18,511,9,61,"n"],[18,512,9,61],[18,514,9,61,"u"],[18,515,9,61],[18,517,9,61,"i"],[18,518,9,61],[18,522,9,61,"n"],[18,523,9,61],[18,524,9,61,"u"],[18,525,9,61],[18,529,9,61,"e"],[18,530,9,61],[18,531,9,61,"u"],[18,532,9,61],[18,544,9,61,"n"],[18,545,9,61],[18,546,9,61,"default"],[18,553,9,61],[18,556,9,61,"e"],[18,557,9,61],[18,559,9,61,"t"],[18,560,9,61],[18,564,9,61,"t"],[18,565,9,61],[18,566,9,61,"set"],[18,569,9,61],[18,570,9,61,"e"],[18,571,9,61],[18,573,9,61,"n"],[18,574,9,61],[18,577,9,61,"n"],[18,578,9,61],[19,2,10,0],[20,0,11,0],[21,0,12,0],[22,0,13,0],[23,0,14,0],[24,0,15,0],[25,0,16,0],[26,0,17,0],[27,0,18,0],[28,0,19,0],[29,0,20,0],[30,0,21,0],[31,0,22,0],[32,0,23,0],[33,0,24,0],[34,0,25,0],[35,0,26,0],[36,0,27,0],[37,0,28,0],[38,0,29,0],[39,0,30,0],[40,2,31,7],[40,11,31,16,"getStateFromPath"],[40,27,31,32,"getStateFromPath"],[40,28,31,33,"path"],[40,32,31,37],[40,34,31,39,"options"],[40,41,31,46],[40,43,31,48],[41,4,32,2],[41,8,32,2,"_getConfigResources"],[41,27,32,2],[41,30,35,6,"getConfigResources"],[41,48,35,24],[41,49,35,25,"options"],[41,56,35,32],[41,57,35,33],[42,6,33,4,"initialRoutes"],[42,19,33,17],[42,22,33,17,"_getConfigResources"],[42,41,33,17],[42,42,33,4,"initialRoutes"],[42,55,33,17],[43,6,34,4,"configs"],[43,13,34,11],[43,16,34,11,"_getConfigResources"],[43,35,34,11],[43,36,34,4,"configs"],[43,43,34,11],[44,4,36,2],[44,8,36,8,"screens"],[44,15,36,15],[44,18,36,18,"options"],[44,25,36,25],[44,27,36,27,"screens"],[44,34,36,34],[45,4,37,2],[45,8,37,6,"remaining"],[45,17,37,15],[45,20,37,18,"path"],[45,24,37,22],[45,25,37,23,"replace"],[45,32,37,30],[45,33,37,31],[45,39,37,37],[45,41,37,39],[45,44,37,42],[45,45,37,43],[45,46,37,44],[46,4,37,44],[46,5,38,3,"replace"],[46,12,38,10],[46,13,38,11],[46,18,38,16],[46,20,38,18],[46,22,38,20],[46,23,38,21],[46,24,38,22],[47,4,38,22],[47,5,39,3,"replace"],[47,12,39,10],[47,13,39,11],[47,20,39,18],[47,22,39,20],[47,24,39,22],[47,25,39,23],[47,26,39,24],[47,27,39,25],[49,4,41,2],[50,4,42,2,"remaining"],[50,13,42,11],[50,16,42,14,"remaining"],[50,25,42,23],[50,26,42,24,"endsWith"],[50,34,42,32],[50,35,42,33],[50,38,42,36],[50,39,42,37],[50,42,42,40,"remaining"],[50,51,42,49],[50,54,42,52],[50,57,42,55,"remaining"],[50,66,42,64],[50,69,42,67],[51,4,43,2],[51,8,43,8,"prefix"],[51,14,43,14],[51,17,43,17,"options"],[51,24,43,24],[51,26,43,26,"path"],[51,30,43,30],[51,32,43,32,"replace"],[51,39,43,39],[51,40,43,40],[51,45,43,45],[51,47,43,47],[51,49,43,49],[51,50,43,50],[51,51,43,51],[51,52,43,52],[53,4,45,2],[53,8,45,6,"prefix"],[53,14,45,12],[53,16,45,14],[54,6,46,4],[55,6,47,4],[55,10,47,10,"normalizedPrefix"],[55,26,47,26],[55,29,47,29,"prefix"],[55,35,47,35],[55,36,47,36,"endsWith"],[55,44,47,44],[55,45,47,45],[55,48,47,48],[55,49,47,49],[55,52,47,52,"prefix"],[55,58,47,58],[55,61,47,61],[55,64,47,64,"prefix"],[55,70,47,70],[55,73,47,73],[57,6,49,4],[58,6,50,4],[58,10,50,8],[58,11,50,9,"remaining"],[58,20,50,18],[58,21,50,19,"startsWith"],[58,31,50,29],[58,32,50,30,"normalizedPrefix"],[58,48,50,46],[58,49,50,47],[58,51,50,49],[59,8,51,6],[59,15,51,13,"undefined"],[59,24,51,22],[60,6,52,4],[62,6,54,4],[63,6,55,4,"remaining"],[63,15,55,13],[63,18,55,16,"remaining"],[63,27,55,25],[63,28,55,26,"replace"],[63,35,55,33],[63,36,55,34,"normalizedPrefix"],[63,52,55,50],[63,54,55,52],[63,56,55,54],[63,57,55,55],[64,4,56,2],[65,4,57,2],[65,8,57,6,"screens"],[65,15,57,13],[65,20,57,18,"undefined"],[65,29,57,27],[65,31,57,29],[66,6,58,4],[67,6,59,4],[67,10,59,10,"routes"],[67,17,59,16],[67,20,59,19,"remaining"],[67,29,59,28],[67,30,59,29,"split"],[67,35,59,34],[67,36,59,35],[67,39,59,38],[67,40,59,39],[67,41,59,40,"filter"],[67,47,59,46],[67,48,59,47,"Boolean"],[67,55,59,54],[67,56,59,55],[67,57,59,56,"map"],[67,60,59,59],[67,61,59,60,"segment"],[67,68,59,67],[67,72,59,71],[68,8,60,6],[68,12,60,12,"name"],[68,16,60,16],[68,19,60,19,"decodeURIComponent"],[68,37,60,37],[68,38,60,38,"segment"],[68,45,60,45],[68,46,60,46],[69,8,61,6],[69,15,61,13],[70,10,62,8,"name"],[71,8,63,6],[71,9,63,7],[72,6,64,4],[72,7,64,5],[72,8,64,6],[73,6,65,4],[73,10,65,8,"routes"],[73,17,65,14],[73,18,65,15,"length"],[73,24,65,21],[73,26,65,23],[74,8,66,6],[74,15,66,13,"createNestedStateObject"],[74,38,66,36],[74,39,66,37,"path"],[74,43,66,41],[74,45,66,43,"routes"],[74,52,66,49],[74,54,66,51,"initialRoutes"],[74,67,66,64],[74,68,66,65],[75,6,67,4],[76,6,68,4],[76,13,68,11,"undefined"],[76,22,68,20],[77,4,69,2],[78,4,70,2],[78,8,70,6,"remaining"],[78,17,70,15],[78,22,70,20],[78,25,70,23],[78,27,70,25],[79,6,71,4],[80,6,72,4],[81,6,73,4],[81,10,73,10,"match"],[81,15,73,15],[81,18,73,18,"configs"],[81,25,73,25],[81,26,73,26,"find"],[81,30,73,30],[81,31,73,31,"config"],[81,37,73,37],[81,41,73,41,"config"],[81,47,73,47],[81,48,73,48,"segments"],[81,56,73,56],[81,57,73,57,"join"],[81,61,73,61],[81,62,73,62],[81,65,73,65],[81,66,73,66],[81,71,73,71],[81,73,73,73],[81,74,73,74],[82,6,74,4],[82,10,74,8,"match"],[82,15,74,13],[82,17,74,15],[83,8,75,6],[83,15,75,13,"createNestedStateObject"],[83,38,75,36],[83,39,75,37,"path"],[83,43,75,41],[83,45,75,43,"match"],[83,50,75,48],[83,51,75,49,"routeNames"],[83,61,75,59],[83,62,75,60,"map"],[83,65,75,63],[83,66,75,64,"name"],[83,70,75,68],[83,75,75,73],[84,10,76,8,"name"],[85,8,77,6],[85,9,77,7],[85,10,77,8],[85,11,77,9],[85,13,77,11,"initialRoutes"],[85,26,77,24],[85,28,77,26,"configs"],[85,35,77,33],[85,36,77,34],[86,6,78,4],[87,6,79,4],[87,13,79,11,"undefined"],[87,22,79,20],[88,4,80,2],[89,4,81,2],[89,8,81,6,"result"],[89,14,81,12],[90,4,82,2],[90,8,82,6,"current"],[90,15,82,13],[92,4,84,2],[93,4,85,2],[94,4,86,2],[94,8,86,2,"_matchAgainstConfigs"],[94,28,86,2],[94,31,89,6,"matchAgainstConfigs"],[94,50,89,25],[94,51,89,26,"remaining"],[94,60,89,35],[94,62,89,37,"configs"],[94,69,89,44],[94,70,89,45],[95,6,87,4,"routes"],[95,12,87,10],[95,15,87,10,"_matchAgainstConfigs"],[95,35,87,10],[95,36,87,4,"routes"],[95,42,87,10],[96,6,88,4,"remainingPath"],[96,19,88,17],[96,22,88,17,"_matchAgainstConfigs"],[96,42,88,17],[96,43,88,4,"remainingPath"],[96,56,88,17],[97,4,90,2],[97,8,90,6,"routes"],[97,14,90,12],[97,19,90,17,"undefined"],[97,28,90,26],[97,30,90,28],[98,6,91,4],[99,6,92,4,"current"],[99,13,92,11],[99,16,92,14,"createNestedStateObject"],[99,39,92,37],[99,40,92,38,"path"],[99,44,92,42],[99,46,92,44,"routes"],[99,52,92,50],[99,54,92,52,"initialRoutes"],[99,67,92,65],[99,69,92,67,"configs"],[99,76,92,74],[99,77,92,75],[100,6,93,4,"remaining"],[100,15,93,13],[100,18,93,16,"remainingPath"],[100,31,93,29],[101,6,94,4,"result"],[101,12,94,10],[101,15,94,13,"current"],[101,22,94,20],[102,4,95,2],[103,4,96,2],[103,8,96,6,"current"],[103,15,96,13],[103,19,96,17],[103,23,96,21],[103,27,96,25,"result"],[103,33,96,31],[103,37,96,35],[103,41,96,39],[103,43,96,41],[104,6,97,4],[104,13,97,11,"undefined"],[104,22,97,20],[105,4,98,2],[106,4,99,2],[106,11,99,9,"result"],[106,17,99,15],[107,2,100,0],[109,2,102,0],[110,0,103,0],[111,0,104,0],[112,2,105,0],[112,6,105,6,"cachedConfigResources"],[112,27,105,27],[112,30,105,30],[112,34,105,34,"WeakMap"],[112,41,105,41],[112,42,105,42],[112,43,105,43],[113,2,106,0],[113,11,106,9,"getConfigResources"],[113,29,106,27,"getConfigResources"],[113,30,106,28,"options"],[113,37,106,35],[113,39,106,37],[114,4,107,2],[114,8,107,6],[114,9,107,7,"options"],[114,16,107,14],[114,18,107,16],[114,25,107,23,"prepareConfigResources"],[114,47,107,45],[114,48,107,46],[114,49,107,47],[115,4,108,2],[115,8,108,8,"cached"],[115,14,108,14],[115,17,108,17,"cachedConfigResources"],[115,38,108,38],[115,39,108,39,"get"],[115,42,108,42],[115,43,108,43,"options"],[115,50,108,50],[115,51,108,51],[116,4,109,2],[116,8,109,6,"cached"],[116,14,109,12],[116,16,109,14],[116,23,109,21,"cached"],[116,29,109,27],[117,4,110,2],[117,8,110,8,"resources"],[117,17,110,17],[117,20,110,20,"prepareConfigResources"],[117,42,110,42],[117,43,110,43,"options"],[117,50,110,50],[117,51,110,51],[118,4,111,2,"cachedConfigResources"],[118,25,111,23],[118,26,111,24,"set"],[118,29,111,27],[118,30,111,28,"options"],[118,37,111,35],[118,39,111,37,"resources"],[118,48,111,46],[118,49,111,47],[119,4,112,2],[119,11,112,9,"resources"],[119,20,112,18],[120,2,113,0],[121,2,114,0],[121,11,114,9,"prepareConfigResources"],[121,33,114,31,"prepareConfigResources"],[121,34,114,32,"options"],[121,41,114,39],[121,43,114,41],[122,4,115,2],[122,8,115,6,"options"],[122,15,115,13],[122,17,115,15],[123,6,116,4],[123,10,116,4,"validatePathConfig"],[123,48,116,22],[123,50,116,23,"options"],[123,57,116,30],[123,58,116,31],[124,4,117,2],[125,4,118,2],[125,8,118,8,"initialRoutes"],[125,21,118,21],[125,24,118,24,"getInitialRoutes"],[125,40,118,40],[125,41,118,41,"options"],[125,48,118,48],[125,49,118,49],[126,4,119,2],[126,8,119,8,"configs"],[126,15,119,15],[126,18,119,18,"getSortedNormalizedConfigs"],[126,44,119,44],[126,45,119,45,"initialRoutes"],[126,58,119,58],[126,60,119,60,"options"],[126,67,119,67],[126,69,119,69,"screens"],[126,76,119,76],[126,77,119,77],[127,4,120,2,"checkForDuplicatedConfigs"],[127,29,120,27],[127,30,120,28,"configs"],[127,37,120,35],[127,38,120,36],[128,4,121,2],[128,8,121,8,"configWithRegexes"],[128,25,121,25],[128,28,121,28,"getConfigsWithRegexes"],[128,49,121,49],[128,50,121,50,"configs"],[128,57,121,57],[128,58,121,58],[129,4,122,2],[129,11,122,9],[130,6,123,4,"initialRoutes"],[130,19,123,17],[131,6,124,4,"configs"],[131,13,124,11],[132,6,125,4,"configWithRegexes"],[133,4,126,2],[133,5,126,3],[134,2,127,0],[135,2,128,0],[135,11,128,9,"getInitialRoutes"],[135,27,128,25,"getInitialRoutes"],[135,28,128,26,"options"],[135,35,128,33],[135,37,128,35],[136,4,129,2],[136,8,129,8,"initialRoutes"],[136,21,129,21],[136,24,129,24],[136,26,129,26],[137,4,130,2],[137,8,130,6,"options"],[137,15,130,13],[137,17,130,15,"initialRouteName"],[137,33,130,31],[137,35,130,33],[138,6,131,4,"initialRoutes"],[138,19,131,17],[138,20,131,18,"push"],[138,24,131,22],[138,25,131,23],[139,8,132,6,"initialRouteName"],[139,24,132,22],[139,26,132,24,"options"],[139,33,132,31],[139,34,132,32,"initialRouteName"],[139,50,132,48],[140,8,133,6,"parentScreens"],[140,21,133,19],[140,23,133,21],[141,6,134,4],[141,7,134,5],[141,8,134,6],[142,4,135,2],[143,4,136,2],[143,11,136,9,"initialRoutes"],[143,24,136,22],[144,2,137,0],[145,2,138,0],[145,11,138,9,"getSortedNormalizedConfigs"],[145,37,138,35,"getSortedNormalizedConfigs"],[145,38,138,36,"initialRoutes"],[145,51,138,49],[145,53,138,65],[146,4,138,65],[146,8,138,51,"screens"],[146,15,138,58],[146,18,138,58,"arguments"],[146,27,138,58],[146,28,138,58,"length"],[146,34,138,58],[146,42,138,58,"arguments"],[146,51,138,58],[146,59,138,58,"undefined"],[146,68,138,58],[146,71,138,58,"arguments"],[146,80,138,58],[146,86,138,61],[146,87,138,62],[146,88,138,63],[147,4,139,2],[148,4,140,2],[148,11,140,9],[148,13,140,11],[148,14,140,12,"concat"],[148,20,140,18],[148,21,140,19],[148,24,140,22,"Object"],[148,30,140,28],[148,31,140,29,"keys"],[148,35,140,33],[148,36,140,34,"screens"],[148,43,140,41],[148,44,140,42],[148,45,140,43,"map"],[148,48,140,46],[148,49,140,47,"key"],[148,52,140,50],[148,56,140,54,"createNormalizedConfigs"],[148,79,140,77],[148,80,140,78,"key"],[148,83,140,81],[148,85,140,83,"screens"],[148,92,140,90],[148,94,140,92,"initialRoutes"],[148,107,140,105],[148,109,140,107],[148,111,140,109],[148,113,140,111],[148,115,140,113],[148,117,140,115],[148,119,140,117],[148,120,140,118],[148,121,140,119],[148,122,140,120],[148,123,140,121,"sort"],[148,127,140,125],[148,128,140,126],[148,129,140,127,"a"],[148,130,140,128],[148,132,140,130,"b"],[148,133,140,131],[148,138,140,136],[149,6,141,4],[150,6,142,4],[151,6,143,4],[152,6,144,4],[153,6,145,4],[154,6,146,4],[156,6,148,4],[157,6,149,4],[158,6,150,4],[158,10,150,8],[158,14,150,8,"isArrayEqual"],[158,40,150,20],[158,42,150,21,"a"],[158,43,150,22],[158,44,150,23,"segments"],[158,52,150,31],[158,54,150,33,"b"],[158,55,150,34],[158,56,150,35,"segments"],[158,64,150,43],[158,65,150,44],[158,67,150,46],[159,8,151,6],[159,15,151,13,"b"],[159,16,151,14],[159,17,151,15,"routeNames"],[159,27,151,25],[159,28,151,26,"join"],[159,32,151,30],[159,33,151,31],[159,36,151,34],[159,37,151,35],[159,38,151,36,"localeCompare"],[159,51,151,49],[159,52,151,50,"a"],[159,53,151,51],[159,54,151,52,"routeNames"],[159,64,151,62],[159,65,151,63,"join"],[159,69,151,67],[159,70,151,68],[159,73,151,71],[159,74,151,72],[159,75,151,73],[160,6,152,4],[162,6,154,4],[163,6,155,4],[164,6,156,4],[164,10,156,8],[164,14,156,8,"arrayStartsWith"],[164,46,156,23],[164,48,156,24,"a"],[164,49,156,25],[164,50,156,26,"segments"],[164,58,156,34],[164,60,156,36,"b"],[164,61,156,37],[164,62,156,38,"segments"],[164,70,156,46],[164,71,156,47],[164,73,156,49],[165,8,157,6],[165,15,157,13],[165,16,157,14],[165,17,157,15],[166,6,158,4],[167,6,159,4],[167,10,159,8],[167,14,159,8,"arrayStartsWith"],[167,46,159,23],[167,48,159,24,"b"],[167,49,159,25],[167,50,159,26,"segments"],[167,58,159,34],[167,60,159,36,"a"],[167,61,159,37],[167,62,159,38,"segments"],[167,70,159,46],[167,71,159,47],[167,73,159,49],[168,8,160,6],[168,15,160,13],[168,16,160,14],[169,6,161,4],[170,6,162,4],[170,11,162,9],[170,15,162,13,"i"],[170,16,162,14],[170,19,162,17],[170,20,162,18],[170,22,162,20,"i"],[170,23,162,21],[170,26,162,24,"Math"],[170,30,162,28],[170,31,162,29,"max"],[170,34,162,32],[170,35,162,33,"a"],[170,36,162,34],[170,37,162,35,"segments"],[170,45,162,43],[170,46,162,44,"length"],[170,52,162,50],[170,54,162,52,"b"],[170,55,162,53],[170,56,162,54,"segments"],[170,64,162,62],[170,65,162,63,"length"],[170,71,162,69],[170,72,162,70],[170,74,162,72,"i"],[170,75,162,73],[170,77,162,75],[170,79,162,77],[171,8,163,6],[172,8,164,6],[172,12,164,10,"a"],[172,13,164,11],[172,14,164,12,"segments"],[172,22,164,20],[172,23,164,21,"i"],[172,24,164,22],[172,25,164,23],[172,29,164,27],[172,33,164,31],[172,35,164,33],[173,10,165,8],[173,17,165,15],[173,18,165,16],[174,8,166,6],[176,8,168,6],[177,8,169,6],[177,12,169,10,"b"],[177,13,169,11],[177,14,169,12,"segments"],[177,22,169,20],[177,23,169,21,"i"],[177,24,169,22],[177,25,169,23],[177,29,169,27],[177,33,169,31],[177,35,169,33],[178,10,170,8],[178,17,170,15],[178,18,170,16],[178,19,170,17],[179,8,171,6],[180,8,172,6],[180,12,172,12,"aWildCard"],[180,21,172,21],[180,24,172,24,"a"],[180,25,172,25],[180,26,172,26,"segments"],[180,34,172,34],[180,35,172,35,"i"],[180,36,172,36],[180,37,172,37],[180,42,172,42],[180,45,172,45],[181,8,173,6],[181,12,173,12,"bWildCard"],[181,21,173,21],[181,24,173,24,"b"],[181,25,173,25],[181,26,173,26,"segments"],[181,34,173,34],[181,35,173,35,"i"],[181,36,173,36],[181,37,173,37],[181,42,173,42],[181,45,173,45],[182,8,174,6],[182,12,174,12,"aParam"],[182,18,174,18],[182,21,174,21,"a"],[182,22,174,22],[182,23,174,23,"segments"],[182,31,174,31],[182,32,174,32,"i"],[182,33,174,33],[182,34,174,34],[182,35,174,35,"startsWith"],[182,45,174,45],[182,46,174,46],[182,49,174,49],[182,50,174,50],[183,8,175,6],[183,12,175,12,"bParam"],[183,18,175,18],[183,21,175,21,"b"],[183,22,175,22],[183,23,175,23,"segments"],[183,31,175,31],[183,32,175,32,"i"],[183,33,175,33],[183,34,175,34],[183,35,175,35,"startsWith"],[183,45,175,45],[183,46,175,46],[183,49,175,49],[183,50,175,50],[184,8,176,6],[184,12,176,12,"aRegex"],[184,18,176,18],[184,21,176,21,"aParam"],[184,27,176,27],[184,31,176,31,"a"],[184,32,176,32],[184,33,176,33,"segments"],[184,41,176,41],[184,42,176,42,"i"],[184,43,176,43],[184,44,176,44],[184,45,176,45,"includes"],[184,53,176,53],[184,54,176,54],[184,57,176,57],[184,58,176,58],[185,8,177,6],[185,12,177,12,"bRegex"],[185,18,177,18],[185,21,177,21,"bParam"],[185,27,177,27],[185,31,177,31,"b"],[185,32,177,32],[185,33,177,33,"segments"],[185,41,177,41],[185,42,177,42,"i"],[185,43,177,43],[185,44,177,44],[185,45,177,45,"includes"],[185,53,177,53],[185,54,177,54],[185,57,177,57],[185,58,177,58],[187,8,179,6],[188,8,180,6],[188,12,180,10,"aWildCard"],[188,21,180,19],[188,25,180,23,"bWildCard"],[188,34,180,32],[188,38,180,36,"aRegex"],[188,44,180,42],[188,48,180,46,"bRegex"],[188,54,180,52],[188,56,180,54],[189,10,181,8],[190,8,182,6],[192,8,184,6],[193,8,185,6],[193,12,185,10,"aWildCard"],[193,21,185,19],[193,25,185,23],[193,26,185,24,"bWildCard"],[193,35,185,33],[193,37,185,35],[194,10,186,8],[194,17,186,15],[194,18,186,16],[195,8,187,6],[197,8,189,6],[198,8,190,6],[198,12,190,10,"bWildCard"],[198,21,190,19],[198,25,190,23],[198,26,190,24,"aWildCard"],[198,35,190,33],[198,37,190,35],[199,10,191,8],[199,17,191,15],[199,18,191,16],[199,19,191,17],[200,8,192,6],[202,8,194,6],[203,8,195,6],[203,12,195,10,"aParam"],[203,18,195,16],[203,22,195,20],[203,23,195,21,"bParam"],[203,29,195,27],[203,31,195,29],[204,10,196,8],[204,17,196,15],[204,18,196,16],[205,8,197,6],[207,8,199,6],[208,8,200,6],[208,12,200,10,"bParam"],[208,18,200,16],[208,22,200,20],[208,23,200,21,"aParam"],[208,29,200,27],[208,31,200,29],[209,10,201,8],[209,17,201,15],[209,18,201,16],[209,19,201,17],[210,8,202,6],[212,8,204,6],[213,8,205,6],[213,12,205,10,"aRegex"],[213,18,205,16],[213,22,205,20],[213,23,205,21,"bRegex"],[213,29,205,27],[213,31,205,29],[214,10,206,8],[214,17,206,15],[214,18,206,16],[214,19,206,17],[215,8,207,6],[217,8,209,6],[218,8,210,6],[218,12,210,10,"bRegex"],[218,18,210,16],[218,22,210,20],[218,23,210,21,"aRegex"],[218,29,210,27],[218,31,210,29],[219,10,211,8],[219,17,211,15],[219,18,211,16],[220,8,212,6],[221,6,213,4],[222,6,214,4],[222,13,214,11,"a"],[222,14,214,12],[222,15,214,13,"segments"],[222,23,214,21],[222,24,214,22,"length"],[222,30,214,28],[222,33,214,31,"b"],[222,34,214,32],[222,35,214,33,"segments"],[222,43,214,41],[222,44,214,42,"length"],[222,50,214,48],[223,4,215,2],[223,5,215,3],[223,6,215,4],[224,2,216,0],[225,2,217,0],[225,11,217,9,"checkForDuplicatedConfigs"],[225,36,217,34,"checkForDuplicatedConfigs"],[225,37,217,35,"configs"],[225,44,217,42],[225,46,217,44],[226,4,218,2],[227,4,219,2,"configs"],[227,11,219,9],[227,12,219,10,"reduce"],[227,18,219,16],[227,19,219,17],[227,20,219,18,"acc"],[227,23,219,21],[227,25,219,23,"config"],[227,31,219,29],[227,36,219,34],[228,6,220,4],[228,10,220,10,"pattern"],[228,17,220,17],[228,20,220,20,"config"],[228,26,220,26],[228,27,220,27,"segments"],[228,35,220,35],[228,36,220,36,"join"],[228,40,220,40],[228,41,220,41],[228,44,220,44],[228,45,220,45],[229,6,221,4],[229,10,221,8,"acc"],[229,13,221,11],[229,14,221,12,"pattern"],[229,21,221,19],[229,22,221,20],[229,24,221,22],[230,8,222,6],[230,12,222,12,"a"],[230,13,222,13],[230,16,222,16,"acc"],[230,19,222,19],[230,20,222,20,"pattern"],[230,27,222,27],[230,28,222,28],[230,29,222,29,"routeNames"],[230,39,222,39],[231,8,223,6],[231,12,223,12,"b"],[231,13,223,13],[231,16,223,16,"config"],[231,22,223,22],[231,23,223,23,"routeNames"],[231,33,223,33],[233,8,225,6],[234,8,226,6],[235,8,227,6],[235,12,227,12,"intersects"],[235,22,227,22],[235,25,227,25,"a"],[235,26,227,26],[235,27,227,27,"length"],[235,33,227,33],[235,36,227,36,"b"],[235,37,227,37],[235,38,227,38,"length"],[235,44,227,44],[235,47,227,47,"b"],[235,48,227,48],[235,49,227,49,"every"],[235,54,227,54],[235,55,227,55],[235,56,227,56,"it"],[235,58,227,58],[235,60,227,60,"i"],[235,61,227,61],[235,66,227,66,"a"],[235,67,227,67],[235,68,227,68,"i"],[235,69,227,69],[235,70,227,70],[235,75,227,75,"it"],[235,77,227,77],[235,78,227,78],[235,81,227,81,"a"],[235,82,227,82],[235,83,227,83,"every"],[235,88,227,88],[235,89,227,89],[235,90,227,90,"it"],[235,92,227,92],[235,94,227,94,"i"],[235,95,227,95],[235,100,227,100,"b"],[235,101,227,101],[235,102,227,102,"i"],[235,103,227,103],[235,104,227,104],[235,109,227,109,"it"],[235,111,227,111],[235,112,227,112],[236,8,228,6],[236,12,228,10],[236,13,228,11,"intersects"],[236,23,228,21],[236,25,228,23],[237,10,229,8],[237,16,229,14],[237,20,229,18,"Error"],[237,25,229,23],[237,26,229,24],[237,91,229,89,"pattern"],[237,98,229,96],[237,121,229,119,"a"],[237,122,229,120],[237,123,229,121,"join"],[237,127,229,125],[237,128,229,126],[237,133,229,131],[237,134,229,132],[237,144,229,142,"b"],[237,145,229,143],[237,146,229,144,"join"],[237,150,229,148],[237,151,229,149],[237,156,229,154],[237,157,229,155],[237,229,229,227],[237,230,229,228],[238,8,230,6],[239,6,231,4],[240,6,232,4],[240,13,232,11,"Object"],[240,19,232,17],[240,20,232,18,"assign"],[240,26,232,24],[240,27,232,25,"acc"],[240,30,232,28],[240,32,232,30],[241,8,233,6],[241,9,233,7,"pattern"],[241,16,233,14],[241,19,233,17,"config"],[242,6,234,4],[242,7,234,5],[242,8,234,6],[243,4,235,2],[243,5,235,3],[243,7,235,5],[243,8,235,6],[243,9,235,7],[243,10,235,8],[244,2,236,0],[245,2,237,0],[245,11,237,9,"getConfigsWithRegexes"],[245,32,237,30,"getConfigsWithRegexes"],[245,33,237,31,"configs"],[245,40,237,38],[245,42,237,40],[246,4,238,2],[246,11,238,9,"configs"],[246,18,238,16],[246,19,238,17,"map"],[246,22,238,20],[246,23,238,21,"c"],[246,24,238,22],[246,29,238,27],[247,6,239,4],[247,9,239,7,"c"],[247,10,239,8],[248,6,240,4],[249,6,241,4,"regex"],[249,11,241,9],[249,13,241,11,"c"],[249,14,241,12],[249,15,241,13,"regex"],[249,20,241,18],[249,23,241,21],[249,27,241,25,"RegExp"],[249,33,241,31],[249,34,241,32,"c"],[249,35,241,33],[249,36,241,34,"regex"],[249,41,241,39],[249,42,241,40,"source"],[249,48,241,46],[249,51,241,49],[249,54,241,52],[249,55,241,53],[249,58,241,56,"undefined"],[250,4,242,2],[250,5,242,3],[250,6,242,4],[250,7,242,5],[251,2,243,0],[252,2,244,0],[252,6,244,6,"matchAgainstConfigs"],[252,25,244,25],[252,28,244,28,"matchAgainstConfigs"],[252,29,244,29,"remaining"],[252,38,244,38],[252,40,244,40,"configs"],[252,47,244,47],[252,52,244,52],[253,4,245,2],[253,8,245,6,"routes"],[253,14,245,12],[254,4,246,2],[254,8,246,6,"remainingPath"],[254,21,246,19],[254,24,246,22,"remaining"],[254,33,246,31],[256,4,248,2],[257,4,248,2],[257,8,248,2,"_loop"],[257,13,248,2],[257,25,248,2,"_loop"],[257,26,248,2,"config"],[257,32,248,2],[257,34,249,32],[258,8,250,4],[258,12,250,8],[258,13,250,9,"config"],[258,19,250,15],[258,20,250,16,"regex"],[258,25,250,21],[258,27,250,23],[259,10,250,23],[260,8,252,4],[261,8,253,4],[261,12,253,10,"match"],[261,17,253,15],[261,20,253,18,"remainingPath"],[261,33,253,31],[261,34,253,32,"match"],[261,39,253,37],[261,40,253,38,"config"],[261,46,253,44],[261,47,253,45,"regex"],[261,52,253,50],[261,53,253,51],[263,8,255,4],[264,8,256,4],[264,12,256,8,"match"],[264,17,256,13],[264,19,256,15],[265,10,257,6,"routes"],[265,16,257,12],[265,19,257,15,"config"],[265,25,257,21],[265,26,257,22,"routeNames"],[265,36,257,32],[265,37,257,33,"map"],[265,40,257,36],[265,41,257,37,"routeName"],[265,50,257,46],[265,54,257,50],[266,12,258,8],[266,16,258,14,"routeConfig"],[266,27,258,25],[266,30,258,28,"configs"],[266,37,258,35],[266,38,258,36,"find"],[266,42,258,40],[266,43,258,41,"c"],[266,44,258,42],[266,48,258,46],[267,14,259,10],[268,14,260,10],[268,21,260,17,"c"],[268,22,260,18],[268,23,260,19,"screen"],[268,29,260,25],[268,34,260,30,"routeName"],[268,43,260,39],[268,47,260,43],[268,51,260,43,"arrayStartsWith"],[268,83,260,58],[268,85,260,59,"config"],[268,91,260,65],[268,92,260,66,"segments"],[268,100,260,74],[268,102,260,76,"c"],[268,103,260,77],[268,104,260,78,"segments"],[268,112,260,86],[268,113,260,87],[269,12,261,8],[269,13,261,9],[269,14,261,10],[270,12,262,8],[270,16,262,14,"params"],[270,22,262,20],[270,25,262,23,"routeConfig"],[270,36,262,34],[270,40,262,38,"match"],[270,45,262,43],[270,46,262,44,"groups"],[270,52,262,50],[270,55,262,53,"Object"],[270,61,262,59],[270,62,262,60,"fromEntries"],[270,73,262,71],[270,74,262,72,"Object"],[270,80,262,78],[270,81,262,79,"entries"],[270,88,262,86],[270,89,262,87,"match"],[270,94,262,92],[270,95,262,93,"groups"],[270,101,262,99],[270,102,262,100],[270,103,262,101,"map"],[270,106,262,104],[270,107,262,105,"_ref"],[270,111,262,105],[270,115,262,123],[271,14,262,123],[271,18,262,123,"_ref2"],[271,23,262,123],[271,30,262,123,"_slicedToArray2"],[271,45,262,123],[271,46,262,123,"default"],[271,53,262,123],[271,55,262,123,"_ref"],[271,59,262,123],[272,16,262,107,"key"],[272,19,262,110],[272,22,262,110,"_ref2"],[272,27,262,110],[273,16,262,112,"value"],[273,21,262,117],[273,24,262,117,"_ref2"],[273,29,262,117],[274,14,263,10],[274,18,263,16,"index"],[274,23,263,21],[274,26,263,24,"Number"],[274,32,263,30],[274,33,263,31,"key"],[274,36,263,34],[274,37,263,35,"replace"],[274,44,263,42],[274,45,263,43],[274,53,263,51],[274,55,263,53],[274,57,263,55],[274,58,263,56],[274,59,263,57],[275,14,264,10],[275,18,264,16,"param"],[275,23,264,21],[275,26,264,24,"routeConfig"],[275,37,264,35],[275,38,264,36,"params"],[275,44,264,42],[275,45,264,43,"find"],[275,49,264,47],[275,50,264,48,"it"],[275,52,264,50],[275,56,264,54,"it"],[275,58,264,56],[275,59,264,57,"index"],[275,64,264,62],[275,69,264,67,"index"],[275,74,264,72],[275,75,264,73],[276,14,265,10],[276,18,265,14,"param"],[276,23,265,19],[276,25,265,21,"screen"],[276,31,265,27],[276,36,265,32,"routeName"],[276,45,265,41],[276,49,265,45,"param"],[276,54,265,50],[276,56,265,52,"name"],[276,60,265,56],[276,62,265,58],[277,16,266,12],[277,23,266,19],[277,24,266,20,"param"],[277,29,266,25],[277,30,266,26,"name"],[277,34,266,30],[277,36,266,32,"value"],[277,41,266,37],[277,42,266,38],[278,14,267,10],[279,14,268,10],[279,21,268,17],[279,25,268,21],[280,12,269,8],[280,13,269,9],[280,14,269,10],[280,15,269,11,"filter"],[280,21,269,17],[280,22,269,18,"it"],[280,24,269,20],[280,28,269,24,"it"],[280,30,269,26],[280,34,269,30],[280,38,269,34],[280,39,269,35],[280,40,269,36,"map"],[280,43,269,39],[280,44,269,40,"_ref3"],[280,49,269,40],[280,53,269,58],[281,14,269,58],[281,18,269,58,"_ref4"],[281,23,269,58],[281,30,269,58,"_slicedToArray2"],[281,45,269,58],[281,46,269,58,"default"],[281,53,269,58],[281,55,269,58,"_ref3"],[281,60,269,58],[282,16,269,42,"key"],[282,19,269,45],[282,22,269,45,"_ref4"],[282,27,269,45],[283,16,269,47,"value"],[283,21,269,52],[283,24,269,52,"_ref4"],[283,29,269,52],[284,14,270,10],[284,18,270,14,"value"],[284,23,270,19],[284,27,270,23],[284,31,270,27],[284,33,270,29],[285,16,271,12],[285,23,271,19],[285,24,271,20,"key"],[285,27,271,23],[285,29,271,25,"undefined"],[285,38,271,34],[285,39,271,35],[286,14,272,10],[287,14,273,10],[287,18,273,16,"decoded"],[287,25,273,23],[287,28,273,26,"decodeURIComponent"],[287,46,273,44],[287,47,273,45,"value"],[287,52,273,50],[287,53,273,51],[288,14,274,10],[288,18,274,16,"parsed"],[288,24,274,22],[288,27,274,25,"routeConfig"],[288,38,274,36],[288,39,274,37,"parse"],[288,44,274,42],[288,47,274,45,"key"],[288,50,274,48],[288,51,274,49],[288,54,274,52,"routeConfig"],[288,65,274,63],[288,66,274,64,"parse"],[288,71,274,69],[288,72,274,70,"key"],[288,75,274,73],[288,76,274,74],[288,77,274,75,"decoded"],[288,84,274,82],[288,85,274,83],[288,88,274,86,"decoded"],[288,95,274,93],[289,14,275,10],[289,21,275,17],[289,22,275,18,"key"],[289,25,275,21],[289,27,275,23,"parsed"],[289,33,275,29],[289,34,275,30],[290,12,276,8],[290,13,276,9],[290,14,276,10],[290,15,276,11],[290,18,276,14,"undefined"],[290,27,276,23],[291,12,277,8],[291,16,277,12,"params"],[291,22,277,18],[291,26,277,22,"Object"],[291,32,277,28],[291,33,277,29,"keys"],[291,37,277,33],[291,38,277,34,"params"],[291,44,277,40],[291,45,277,41],[291,46,277,42,"length"],[291,52,277,48],[291,54,277,50],[292,14,278,10],[292,21,278,17],[293,16,279,12,"name"],[293,20,279,16],[293,22,279,18,"routeName"],[293,31,279,27],[294,16,280,12,"params"],[295,14,281,10],[295,15,281,11],[296,12,282,8],[297,12,283,8],[297,19,283,15],[298,14,284,10,"name"],[298,18,284,14],[298,20,284,16,"routeName"],[299,12,285,8],[299,13,285,9],[300,10,286,6],[300,11,286,7],[300,12,286,8],[301,10,287,6,"remainingPath"],[301,23,287,19],[301,26,287,22,"remainingPath"],[301,39,287,35],[301,40,287,36,"replace"],[301,47,287,43],[301,48,287,44,"match"],[301,53,287,49],[301,54,287,50],[301,55,287,51],[301,56,287,52],[301,58,287,54],[301,60,287,56],[301,61,287,57],[302,10,287,58],[303,8,289,4],[304,6,290,2],[304,7,290,3],[305,6,290,3,"_ret"],[305,10,290,3],[306,4,249,2],[306,9,249,7],[306,13,249,13,"config"],[306,19,249,19],[306,23,249,23,"configs"],[306,30,249,30],[307,6,249,30,"_ret"],[307,10,249,30],[307,13,249,30,"_loop"],[307,18,249,30],[307,19,249,30,"config"],[307,25,249,30],[308,6,249,30],[308,10,249,30,"_ret"],[308,14,249,30],[308,22,251,6],[309,6,251,15],[309,10,251,15,"_ret"],[309,14,251,15],[309,22,288,6],[310,4,288,12],[311,4,291,2],[311,11,291,9],[312,6,292,4,"routes"],[312,12,292,10],[313,6,293,4,"remainingPath"],[314,4,294,2],[314,5,294,3],[315,2,295,0],[315,3,295,1],[316,2,296,0],[316,6,296,6,"createNormalizedConfigs"],[316,29,296,29],[316,32,296,32,"createNormalizedConfigs"],[316,33,296,33,"screen"],[316,39,296,39],[316,41,296,41,"routeConfig"],[316,52,296,52],[316,54,296,54,"initials"],[316,62,296,62],[316,64,296,64,"paths"],[316,69,296,69],[316,71,296,71,"parentScreens"],[316,84,296,84],[316,86,296,86,"routeNames"],[316,96,296,96],[316,101,296,101],[317,4,297,2],[317,8,297,8,"configs"],[317,15,297,15],[317,18,297,18],[317,20,297,20],[318,4,298,2,"routeNames"],[318,14,298,12],[318,15,298,13,"push"],[318,19,298,17],[318,20,298,18,"screen"],[318,26,298,24],[318,27,298,25],[319,4,299,2,"parentScreens"],[319,17,299,15],[319,18,299,16,"push"],[319,22,299,20],[319,23,299,21,"screen"],[319,29,299,27],[319,30,299,28],[320,4,300,2],[320,8,300,8,"config"],[320,14,300,14],[320,17,300,17,"routeConfig"],[320,28,300,28],[320,29,300,29,"screen"],[320,35,300,35],[320,36,300,36],[321,4,301,2],[321,8,301,6],[321,15,301,13,"config"],[321,21,301,19],[321,26,301,24],[321,34,301,32],[321,36,301,34],[322,6,302,4,"paths"],[322,11,302,9],[322,12,302,10,"push"],[322,16,302,14],[322,17,302,15],[323,8,303,6,"screen"],[323,14,303,12],[324,8,304,6,"path"],[324,12,304,10],[324,14,304,12,"config"],[325,6,305,4],[325,7,305,5],[325,8,305,6],[326,6,306,4,"configs"],[326,13,306,11],[326,14,306,12,"push"],[326,18,306,16],[326,19,306,17,"createConfigItem"],[326,35,306,33],[326,36,306,34,"screen"],[326,42,306,40],[326,44,306,42],[326,45,306,43],[326,48,306,46,"routeNames"],[326,58,306,56],[326,59,306,57],[326,61,306,59],[326,62,306,60],[326,65,306,63,"paths"],[326,70,306,68],[326,71,306,69],[326,72,306,70],[326,73,306,71],[327,4,307,2],[327,5,307,3],[327,11,307,9],[327,15,307,13],[327,22,307,20,"config"],[327,28,307,26],[327,33,307,31],[327,41,307,39],[327,43,307,41],[328,6,308,4],[329,6,309,4],[330,6,310,4],[331,6,311,4],[331,10,311,8],[331,17,311,15,"config"],[331,23,311,21],[331,24,311,22,"path"],[331,28,311,26],[331,33,311,31],[331,41,311,39],[331,43,311,41],[332,8,312,6],[332,12,312,10,"config"],[332,18,312,16],[332,19,312,17,"exact"],[332,24,312,22],[332,28,312,26,"config"],[332,34,312,32],[332,35,312,33,"path"],[332,39,312,37],[332,43,312,41],[332,47,312,45],[332,49,312,47],[333,10,313,8],[333,16,313,14],[333,20,313,18,"Error"],[333,25,313,23],[333,26,313,24],[333,37,313,35,"screen"],[333,43,313,41],[333,223,313,221],[333,224,313,222],[334,8,314,6],[336,8,316,6],[337,8,317,6],[338,8,318,6],[338,12,318,12,"aliasConfigs"],[338,24,318,24],[338,27,318,27],[338,29,318,29],[339,8,319,6],[339,12,319,10,"config"],[339,18,319,16],[339,19,319,17,"alias"],[339,24,319,22],[339,26,319,24],[340,10,320,8],[340,15,320,13],[340,19,320,19,"alias"],[340,24,320,24],[340,28,320,28,"config"],[340,34,320,34],[340,35,320,35,"alias"],[340,40,320,40],[340,42,320,42],[341,12,321,10],[341,16,321,14],[341,23,321,21,"alias"],[341,28,321,26],[341,33,321,31],[341,41,321,39],[341,43,321,41],[342,14,322,12,"aliasConfigs"],[342,26,322,24],[342,27,322,25,"push"],[342,31,322,29],[342,32,322,30,"createConfigItem"],[342,48,322,46],[342,49,322,47,"screen"],[342,55,322,53],[342,57,322,55],[342,58,322,56],[342,61,322,59,"routeNames"],[342,71,322,69],[342,72,322,70],[342,74,322,72],[342,75,322,73],[342,78,322,76,"paths"],[342,83,322,81],[342,85,322,83],[343,16,323,14,"screen"],[343,22,323,20],[344,16,324,14,"path"],[344,20,324,18],[344,22,324,20,"alias"],[345,14,325,12],[345,15,325,13],[345,16,325,14],[345,18,325,16,"config"],[345,24,325,22],[345,25,325,23,"parse"],[345,30,325,28],[345,31,325,29],[345,32,325,30],[346,12,326,10],[346,13,326,11],[346,19,326,17],[346,23,326,21],[346,30,326,28,"alias"],[346,35,326,33],[346,40,326,38],[346,48,326,46],[346,50,326,48],[347,14,327,12,"aliasConfigs"],[347,26,327,24],[347,27,327,25,"push"],[347,31,327,29],[347,32,327,30,"createConfigItem"],[347,48,327,46],[347,49,327,47,"screen"],[347,55,327,53],[347,57,327,55],[347,58,327,56],[347,61,327,59,"routeNames"],[347,71,327,69],[347,72,327,70],[347,74,327,72,"alias"],[347,79,327,77],[347,80,327,78,"exact"],[347,85,327,83],[347,88,327,86],[347,89,327,87],[348,16,328,14,"screen"],[348,22,328,20],[349,16,329,14,"path"],[349,20,329,18],[349,22,329,20,"alias"],[349,27,329,25],[349,28,329,26,"path"],[350,14,330,12],[350,15,330,13],[350,16,330,14],[350,19,330,17],[350,20,330,18],[350,23,330,21,"paths"],[350,28,330,26],[350,30,330,28],[351,16,331,14,"screen"],[351,22,331,20],[352,16,332,14,"path"],[352,20,332,18],[352,22,332,20,"alias"],[352,27,332,25],[352,28,332,26,"path"],[353,14,333,12],[353,15,333,13],[353,16,333,14],[353,18,333,16,"alias"],[353,23,333,21],[353,24,333,22,"parse"],[353,29,333,27],[353,30,333,28],[353,31,333,29],[354,12,334,10],[355,10,335,8],[356,8,336,6],[357,8,337,6],[357,12,337,10,"config"],[357,18,337,16],[357,19,337,17,"exact"],[357,24,337,22],[357,26,337,24],[358,10,338,8],[359,10,339,8],[360,10,340,8,"paths"],[360,15,340,13],[360,16,340,14,"length"],[360,22,340,20],[360,25,340,23],[360,26,340,24],[361,8,341,6],[362,8,342,6,"paths"],[362,13,342,11],[362,14,342,12,"push"],[362,18,342,16],[362,19,342,17],[363,10,343,8,"screen"],[363,16,343,14],[364,10,344,8,"path"],[364,14,344,12],[364,16,344,14,"config"],[364,22,344,20],[364,23,344,21,"path"],[365,8,345,6],[365,9,345,7],[365,10,345,8],[366,8,346,6,"configs"],[366,15,346,13],[366,16,346,14,"push"],[366,20,346,18],[366,21,346,19,"createConfigItem"],[366,37,346,35],[366,38,346,36,"screen"],[366,44,346,42],[366,46,346,44],[366,47,346,45],[366,50,346,48,"routeNames"],[366,60,346,58],[366,61,346,59],[366,63,346,61],[366,64,346,62],[366,67,346,65,"paths"],[366,72,346,70],[366,73,346,71],[366,75,346,73,"config"],[366,81,346,79],[366,82,346,80,"parse"],[366,87,346,85],[366,88,346,86],[366,89,346,87],[367,8,347,6,"configs"],[367,15,347,13],[367,16,347,14,"push"],[367,20,347,18],[367,21,347,19],[367,24,347,22,"aliasConfigs"],[367,36,347,34],[367,37,347,35],[368,6,348,4],[369,6,349,4],[369,10,349,8],[369,17,349,15,"config"],[369,23,349,21],[369,28,349,26],[369,36,349,34],[369,40,349,38],[369,47,349,45,"config"],[369,53,349,51],[369,54,349,52,"path"],[369,58,349,56],[369,63,349,61],[369,71,349,69],[369,75,349,73,"config"],[369,81,349,79],[369,82,349,80,"alias"],[369,87,349,85],[369,89,349,87,"length"],[369,95,349,93],[369,97,349,95],[370,8,350,6],[370,14,350,12],[370,18,350,16,"Error"],[370,23,350,21],[370,24,350,22],[370,35,350,33,"screen"],[370,41,350,39],[370,126,350,124],[370,127,350,125],[371,6,351,4],[372,6,352,4],[372,10,352,8,"config"],[372,16,352,14],[372,17,352,15,"screens"],[372,24,352,22],[372,26,352,24],[373,8,353,6],[374,8,354,6],[374,12,354,10,"config"],[374,18,354,16],[374,19,354,17,"initialRouteName"],[374,35,354,33],[374,37,354,35],[375,10,355,8,"initials"],[375,18,355,16],[375,19,355,17,"push"],[375,23,355,21],[375,24,355,22],[376,12,356,10,"initialRouteName"],[376,28,356,26],[376,30,356,28,"config"],[376,36,356,34],[376,37,356,35,"initialRouteName"],[376,53,356,51],[377,12,357,10,"parentScreens"],[378,10,358,8],[378,11,358,9],[378,12,358,10],[379,8,359,6],[380,8,360,6,"Object"],[380,14,360,12],[380,15,360,13,"keys"],[380,19,360,17],[380,20,360,18,"config"],[380,26,360,24],[380,27,360,25,"screens"],[380,34,360,32],[380,35,360,33],[380,36,360,34,"forEach"],[380,43,360,41],[380,44,360,42,"nestedConfig"],[380,56,360,54],[380,60,360,58],[381,10,361,8],[381,14,361,14,"result"],[381,20,361,20],[381,23,361,23,"createNormalizedConfigs"],[381,46,361,46],[381,47,361,47,"nestedConfig"],[381,59,361,59],[381,61,361,61,"config"],[381,67,361,67],[381,68,361,68,"screens"],[381,75,361,75],[381,77,361,77,"initials"],[381,85,361,85],[381,87,361,87],[381,88,361,88],[381,91,361,91,"paths"],[381,96,361,96],[381,97,361,97],[381,99,361,99],[381,100,361,100],[381,103,361,103,"parentScreens"],[381,116,361,116],[381,117,361,117],[381,119,361,119,"routeNames"],[381,129,361,129],[381,130,361,130],[382,10,362,8,"configs"],[382,17,362,15],[382,18,362,16,"push"],[382,22,362,20],[382,23,362,21],[382,26,362,24,"result"],[382,32,362,30],[382,33,362,31],[383,8,363,6],[383,9,363,7],[383,10,363,8],[384,6,364,4],[385,4,365,2],[386,4,366,2,"routeNames"],[386,14,366,12],[386,15,366,13,"pop"],[386,18,366,16],[386,19,366,17],[386,20,366,18],[387,4,367,2],[387,11,367,9,"configs"],[387,18,367,16],[388,2,368,0],[388,3,368,1],[389,2,369,0],[389,6,369,6,"createConfigItem"],[389,22,369,22],[389,25,369,25,"createConfigItem"],[389,26,369,26,"screen"],[389,32,369,32],[389,34,369,34,"routeNames"],[389,44,369,44],[389,46,369,46,"paths"],[389,51,369,51],[389,53,369,53,"parse"],[389,58,369,58],[389,63,369,63],[390,4,370,2],[390,8,370,8,"parts"],[390,13,370,13],[390,16,370,16],[390,18,370,18],[392,4,372,2],[393,4,372,2],[393,8,372,2,"_loop2"],[393,14,372,2],[393,26,372,2,"_loop2"],[393,27,372,2,"_screen"],[393,34,372,2],[393,36,376,14],[394,6,377,4,"parts"],[394,11,377,9],[394,12,377,10,"push"],[394,16,377,14],[394,17,377,15],[394,20,377,18],[394,24,377,18,"getPatternParts"],[394,56,377,33],[394,58,377,34,"path"],[394,62,377,38],[394,63,377,39],[394,64,377,40,"map"],[394,67,377,43],[394,68,377,44,"part"],[394,72,377,48],[394,77,377,53],[395,8,378,6],[395,11,378,9,"part"],[395,15,378,13],[396,8,379,6,"screen"],[396,14,379,12],[396,16,379,6,"screen"],[397,6,380,4],[397,7,380,5],[397,8,380,6],[397,9,380,7],[397,10,380,8],[398,4,381,2],[398,5,381,3],[399,4,373,2],[399,13,373,2,"_ref5"],[399,18,373,2],[399,22,376,7,"paths"],[399,27,376,12],[400,6,376,12],[400,10,374,4,"screen"],[400,17,374,10],[400,20,374,10,"_ref5"],[400,25,374,10],[400,26,374,4,"screen"],[400,32,374,10],[401,6,374,10],[401,10,375,4,"path"],[401,14,375,8],[401,17,375,8,"_ref5"],[401,22,375,8],[401,23,375,4,"path"],[401,27,375,8],[402,6,375,8,"_loop2"],[402,12,375,8],[402,13,375,8,"_screen"],[402,20,375,8],[403,4,375,8],[404,4,382,2],[404,8,382,8,"regex"],[404,13,382,13],[404,16,382,16,"parts"],[404,21,382,21],[404,22,382,22,"length"],[404,28,382,28],[404,31,382,31],[404,35,382,35,"RegExp"],[404,41,382,41],[404,42,382,42],[404,47,382,47,"parts"],[404,52,382,52],[404,53,382,53,"map"],[404,56,382,56],[404,57,382,57],[404,58,382,58,"it"],[404,60,382,60],[404,62,382,62,"i"],[404,63,382,63],[404,68,382,68],[405,6,383,4],[405,10,383,8,"it"],[405,12,383,10],[405,13,383,11,"param"],[405,18,383,16],[405,20,383,18],[406,8,384,6],[406,12,384,12,"reg"],[406,15,384,15],[406,18,384,18,"it"],[406,20,384,20],[406,21,384,21,"regex"],[406,26,384,26],[406,30,384,30],[406,37,384,37],[407,8,385,6],[407,15,385,13],[407,29,385,27,"i"],[407,30,385,28],[407,34,385,32,"reg"],[407,37,385,35],[407,45,385,43,"it"],[407,47,385,45],[407,48,385,46,"optional"],[407,56,385,54],[407,59,385,57],[407,62,385,60],[407,65,385,63],[407,67,385,65],[407,70,385,68],[408,6,386,4],[409,6,387,4],[409,13,387,11],[409,16,387,14,"it"],[409,18,387,16],[409,19,387,17,"segment"],[409,26,387,24],[409,31,387,29],[409,34,387,32],[409,37,387,35],[409,41,387,39],[409,44,387,42],[409,48,387,42,"escape"],[409,75,387,48],[409,77,387,49,"it"],[409,79,387,51],[409,80,387,52,"segment"],[409,87,387,59],[409,88,387,60],[409,93,387,65],[410,4,388,2],[410,5,388,3],[410,6,388,4],[410,7,388,5,"join"],[410,11,388,9],[410,12,388,10],[410,14,388,12],[410,15,388,13],[410,19,388,17],[410,20,388,18],[410,23,388,21,"undefined"],[410,32,388,30],[411,4,389,2],[411,8,389,8,"segments"],[411,16,389,16],[411,19,389,19,"parts"],[411,24,389,24],[411,25,389,25,"map"],[411,28,389,28],[411,29,389,29,"it"],[411,31,389,31],[411,35,389,35,"it"],[411,37,389,37],[411,38,389,38,"segment"],[411,45,389,45],[411,46,389,46],[412,4,390,2],[412,8,390,8,"params"],[412,14,390,14],[412,17,390,17,"parts"],[412,22,390,22],[412,23,390,23,"map"],[412,26,390,26],[412,27,390,27],[412,28,390,28,"it"],[412,30,390,30],[412,32,390,32,"i"],[412,33,390,33],[412,38,390,38,"it"],[412,40,390,40],[412,41,390,41,"param"],[412,46,390,46],[412,49,390,49],[413,6,391,4,"index"],[413,11,391,9],[413,13,391,11,"i"],[413,14,391,12],[414,6,392,4,"screen"],[414,12,392,10],[414,14,392,12,"it"],[414,16,392,14],[414,17,392,15,"screen"],[414,23,392,21],[415,6,393,4,"name"],[415,10,393,8],[415,12,393,10,"it"],[415,14,393,12],[415,15,393,13,"param"],[416,4,394,2],[416,5,394,3],[416,8,394,6],[416,12,394,10],[416,13,394,11],[416,14,394,12,"filter"],[416,20,394,18],[416,21,394,19,"it"],[416,23,394,21],[416,27,394,25,"it"],[416,29,394,27],[416,33,394,31],[416,37,394,35],[416,38,394,36],[417,4,395,2],[417,11,395,9],[418,6,396,4,"screen"],[418,12,396,10],[419,6,397,4,"regex"],[419,11,397,9],[420,6,398,4,"segments"],[420,14,398,12],[421,6,399,4,"params"],[421,12,399,10],[422,6,400,4,"routeNames"],[422,16,400,14],[423,6,401,4,"parse"],[424,4,402,2],[424,5,402,3],[425,2,403,0],[425,3,403,1],[426,2,404,0],[426,6,404,6,"findParseConfigForRoute"],[426,29,404,29],[426,32,404,32,"findParseConfigForRoute"],[426,33,404,33,"routeName"],[426,42,404,42],[426,44,404,44,"flatConfig"],[426,54,404,54],[426,59,404,59],[427,4,405,2],[427,9,405,7],[427,13,405,13,"config"],[427,19,405,19],[427,23,405,23,"flatConfig"],[427,33,405,33],[427,35,405,35],[428,6,406,4],[428,10,406,8,"routeName"],[428,19,406,17],[428,24,406,22,"config"],[428,30,406,28],[428,31,406,29,"routeNames"],[428,41,406,39],[428,42,406,40,"config"],[428,48,406,46],[428,49,406,47,"routeNames"],[428,59,406,57],[428,60,406,58,"length"],[428,66,406,64],[428,69,406,67],[428,70,406,68],[428,71,406,69],[428,73,406,71],[429,8,407,6],[429,15,407,13,"config"],[429,21,407,19],[429,22,407,20,"parse"],[429,27,407,25],[430,6,408,4],[431,4,409,2],[432,4,410,2],[432,11,410,9,"undefined"],[432,20,410,18],[433,2,411,0],[433,3,411,1],[435,2,413,0],[436,2,414,0],[436,6,414,6,"findInitialRoute"],[436,22,414,22],[436,25,414,25,"findInitialRoute"],[436,26,414,26,"routeName"],[436,35,414,35],[436,37,414,37,"parentScreens"],[436,50,414,50],[436,52,414,52,"initialRoutes"],[436,65,414,65],[436,70,414,70],[437,4,415,2],[437,9,415,7],[437,13,415,13,"config"],[437,19,415,19],[437,23,415,23,"initialRoutes"],[437,36,415,36],[437,38,415,38],[438,6,416,4],[438,10,416,8,"parentScreens"],[438,23,416,21],[438,24,416,22,"length"],[438,30,416,28],[438,35,416,33,"config"],[438,41,416,39],[438,42,416,40,"parentScreens"],[438,55,416,53],[438,56,416,54,"length"],[438,62,416,60],[438,64,416,62],[439,8,417,6],[439,12,417,10,"sameParents"],[439,23,417,21],[439,26,417,24],[439,30,417,28],[440,8,418,6],[440,13,418,11],[440,17,418,15,"i"],[440,18,418,16],[440,21,418,19],[440,22,418,20],[440,24,418,22,"i"],[440,25,418,23],[440,28,418,26,"parentScreens"],[440,41,418,39],[440,42,418,40,"length"],[440,48,418,46],[440,50,418,48,"i"],[440,51,418,49],[440,53,418,51],[440,55,418,53],[441,10,419,8],[441,14,419,12,"parentScreens"],[441,27,419,25],[441,28,419,26,"i"],[441,29,419,27],[441,30,419,28],[441,31,419,29,"localeCompare"],[441,44,419,42],[441,45,419,43,"config"],[441,51,419,49],[441,52,419,50,"parentScreens"],[441,65,419,63],[441,66,419,64,"i"],[441,67,419,65],[441,68,419,66],[441,69,419,67],[441,74,419,72],[441,75,419,73],[441,77,419,75],[442,12,420,10,"sameParents"],[442,23,420,21],[442,26,420,24],[442,31,420,29],[443,12,421,10],[444,10,422,8],[445,8,423,6],[446,8,424,6],[446,12,424,10,"sameParents"],[446,23,424,21],[446,25,424,23],[447,10,425,8],[447,17,425,15,"routeName"],[447,26,425,24],[447,31,425,29,"config"],[447,37,425,35],[447,38,425,36,"initialRouteName"],[447,54,425,52],[447,57,425,55,"config"],[447,63,425,61],[447,64,425,62,"initialRouteName"],[447,80,425,78],[447,83,425,81,"undefined"],[447,92,425,90],[448,8,426,6],[449,6,427,4],[450,4,428,2],[451,4,429,2],[451,11,429,9,"undefined"],[451,20,429,18],[452,2,430,0],[452,3,430,1],[454,2,432,0],[455,2,433,0],[456,2,434,0],[456,6,434,6,"createStateObject"],[456,23,434,23],[456,26,434,26,"createStateObject"],[456,27,434,27,"initialRoute"],[456,39,434,39],[456,41,434,41,"route"],[456,46,434,46],[456,48,434,48,"isEmpty"],[456,55,434,55],[456,60,434,60],[457,4,435,2],[457,8,435,6,"isEmpty"],[457,15,435,13],[457,17,435,15],[458,6,436,4],[458,10,436,8,"initialRoute"],[458,22,436,20],[458,24,436,22],[459,8,437,6],[459,15,437,13],[460,10,438,8,"index"],[460,15,438,13],[460,17,438,15],[460,18,438,16],[461,10,439,8,"routes"],[461,16,439,14],[461,18,439,16],[461,19,439,17],[462,12,440,10,"name"],[462,16,440,14],[462,18,440,16,"initialRoute"],[463,10,441,8],[463,11,441,9],[463,13,441,11,"route"],[463,18,441,16],[464,8,442,6],[464,9,442,7],[465,6,443,4],[465,7,443,5],[465,13,443,11],[466,8,444,6],[466,15,444,13],[467,10,445,8,"routes"],[467,16,445,14],[467,18,445,16],[467,19,445,17,"route"],[467,24,445,22],[468,8,446,6],[468,9,446,7],[469,6,447,4],[470,4,448,2],[470,5,448,3],[470,11,448,9],[471,6,449,4],[471,10,449,8,"initialRoute"],[471,22,449,20],[471,24,449,22],[472,8,450,6],[472,15,450,13],[473,10,451,8,"index"],[473,15,451,13],[473,17,451,15],[473,18,451,16],[474,10,452,8,"routes"],[474,16,452,14],[474,18,452,16],[474,19,452,17],[475,12,453,10,"name"],[475,16,453,14],[475,18,453,16,"initialRoute"],[476,10,454,8],[476,11,454,9],[476,13,454,11],[477,12,455,10],[477,15,455,13,"route"],[477,20,455,18],[478,12,456,10,"state"],[478,17,456,15],[478,19,456,17],[479,14,457,12,"routes"],[479,20,457,18],[479,22,457,20],[480,12,458,10],[481,10,459,8],[481,11,459,9],[482,8,460,6],[482,9,460,7],[483,6,461,4],[483,7,461,5],[483,13,461,11],[484,8,462,6],[484,15,462,13],[485,10,463,8,"routes"],[485,16,463,14],[485,18,463,16],[485,19,463,17],[486,12,464,10],[486,15,464,13,"route"],[486,20,464,18],[487,12,465,10,"state"],[487,17,465,15],[487,19,465,17],[488,14,466,12,"routes"],[488,20,466,18],[488,22,466,20],[489,12,467,10],[490,10,468,8],[490,11,468,9],[491,8,469,6],[491,9,469,7],[492,6,470,4],[493,4,471,2],[494,2,472,0],[494,3,472,1],[495,2,473,0],[495,6,473,6,"createNestedStateObject"],[495,29,473,29],[495,32,473,32,"createNestedStateObject"],[495,33,473,33,"path"],[495,37,473,37],[495,39,473,39,"routes"],[495,45,473,45],[495,47,473,47,"initialRoutes"],[495,60,473,60],[495,62,473,62,"flatConfig"],[495,72,473,72],[495,77,473,77],[496,4,474,2],[496,8,474,6,"route"],[496,13,474,11],[496,16,474,14,"routes"],[496,22,474,20],[496,23,474,21,"shift"],[496,28,474,26],[496,29,474,27],[496,30,474,28],[497,4,475,2],[497,8,475,8,"parentScreens"],[497,21,475,21],[497,24,475,24],[497,26,475,26],[498,4,476,2],[498,8,476,6,"initialRoute"],[498,20,476,18],[498,23,476,21,"findInitialRoute"],[498,39,476,37],[498,40,476,38,"route"],[498,45,476,43],[498,46,476,44,"name"],[498,50,476,48],[498,52,476,50,"parentScreens"],[498,65,476,63],[498,67,476,65,"initialRoutes"],[498,80,476,78],[498,81,476,79],[499,4,477,2,"parentScreens"],[499,17,477,15],[499,18,477,16,"push"],[499,22,477,20],[499,23,477,21,"route"],[499,28,477,26],[499,29,477,27,"name"],[499,33,477,31],[499,34,477,32],[500,4,478,2],[500,8,478,8,"state"],[500,13,478,13],[500,16,478,16,"createStateObject"],[500,33,478,33],[500,34,478,34,"initialRoute"],[500,46,478,46],[500,48,478,48,"route"],[500,53,478,53],[500,55,478,55,"routes"],[500,61,478,61],[500,62,478,62,"length"],[500,68,478,68],[500,73,478,73],[500,74,478,74],[500,75,478,75],[501,4,479,2],[501,8,479,6,"routes"],[501,14,479,12],[501,15,479,13,"length"],[501,21,479,19],[501,24,479,22],[501,25,479,23],[501,27,479,25],[502,6,480,4],[502,10,480,8,"nestedState"],[502,21,480,19],[502,24,480,22,"state"],[502,29,480,27],[503,6,481,4],[503,13,481,11,"route"],[503,18,481,16],[503,21,481,19,"routes"],[503,27,481,25],[503,28,481,26,"shift"],[503,33,481,31],[503,34,481,32],[503,35,481,33],[503,37,481,35],[504,8,482,6,"initialRoute"],[504,20,482,18],[504,23,482,21,"findInitialRoute"],[504,39,482,37],[504,40,482,38,"route"],[504,45,482,43],[504,46,482,44,"name"],[504,50,482,48],[504,52,482,50,"parentScreens"],[504,65,482,63],[504,67,482,65,"initialRoutes"],[504,80,482,78],[504,81,482,79],[505,8,483,6],[505,12,483,12,"nestedStateIndex"],[505,28,483,28],[505,31,483,31,"nestedState"],[505,42,483,42],[505,43,483,43,"index"],[505,48,483,48],[505,52,483,52,"nestedState"],[505,63,483,63],[505,64,483,64,"routes"],[505,70,483,70],[505,71,483,71,"length"],[505,77,483,77],[505,80,483,80],[505,81,483,81],[506,8,484,6,"nestedState"],[506,19,484,17],[506,20,484,18,"routes"],[506,26,484,24],[506,27,484,25,"nestedStateIndex"],[506,43,484,41],[506,44,484,42],[506,45,484,43,"state"],[506,50,484,48],[506,53,484,51,"createStateObject"],[506,70,484,68],[506,71,484,69,"initialRoute"],[506,83,484,81],[506,85,484,83,"route"],[506,90,484,88],[506,92,484,90,"routes"],[506,98,484,96],[506,99,484,97,"length"],[506,105,484,103],[506,110,484,108],[506,111,484,109],[506,112,484,110],[507,8,485,6],[507,12,485,10,"routes"],[507,18,485,16],[507,19,485,17,"length"],[507,25,485,23],[507,28,485,26],[507,29,485,27],[507,31,485,29],[508,10,486,8,"nestedState"],[508,21,486,19],[508,24,486,22,"nestedState"],[508,35,486,33],[508,36,486,34,"routes"],[508,42,486,40],[508,43,486,41,"nestedStateIndex"],[508,59,486,57],[508,60,486,58],[508,61,486,59,"state"],[508,66,486,64],[509,8,487,6],[510,8,488,6,"parentScreens"],[510,21,488,19],[510,22,488,20,"push"],[510,26,488,24],[510,27,488,25,"route"],[510,32,488,30],[510,33,488,31,"name"],[510,37,488,35],[510,38,488,36],[511,6,489,4],[512,4,490,2],[513,4,491,2,"route"],[513,9,491,7],[513,12,491,10],[513,16,491,10,"findFocusedRoute"],[513,50,491,26],[513,52,491,27,"state"],[513,57,491,32],[513,58,491,33],[514,4,492,2,"route"],[514,9,492,7],[514,10,492,8,"path"],[514,14,492,12],[514,17,492,15,"path"],[514,21,492,19],[514,22,492,20,"replace"],[514,29,492,27],[514,30,492,28],[514,35,492,33],[514,37,492,35],[514,39,492,37],[514,40,492,38],[515,4,493,2],[515,8,493,8,"params"],[515,14,493,14],[515,17,493,17,"parseQueryParams"],[515,33,493,33],[515,34,493,34,"path"],[515,38,493,38],[515,40,493,40,"flatConfig"],[515,50,493,50],[515,53,493,53,"findParseConfigForRoute"],[515,76,493,76],[515,77,493,77,"route"],[515,82,493,82],[515,83,493,83,"name"],[515,87,493,87],[515,89,493,89,"flatConfig"],[515,99,493,99],[515,100,493,100],[515,103,493,103,"undefined"],[515,112,493,112],[515,113,493,113],[516,4,494,2],[516,8,494,6,"params"],[516,14,494,12],[516,16,494,14],[517,6,495,4,"route"],[517,11,495,9],[517,12,495,10,"params"],[517,18,495,16],[517,21,495,19],[518,8,496,6],[518,11,496,9,"route"],[518,16,496,14],[518,17,496,15,"params"],[518,23,496,21],[519,8,497,6],[519,11,497,9,"params"],[520,6,498,4],[520,7,498,5],[521,4,499,2],[522,4,500,2],[522,11,500,9,"state"],[522,16,500,14],[523,2,501,0],[523,3,501,1],[524,2,502,0],[524,6,502,6,"parseQueryParams"],[524,22,502,22],[524,25,502,25,"parseQueryParams"],[524,26,502,26,"path"],[524,30,502,30],[524,32,502,32,"parseConfig"],[524,43,502,43],[524,48,502,48],[525,4,503,2],[525,8,503,8,"query"],[525,13,503,13],[525,16,503,16,"path"],[525,20,503,20],[525,21,503,21,"split"],[525,26,503,26],[525,27,503,27],[525,30,503,30],[525,31,503,31],[525,32,503,32],[525,33,503,33],[525,34,503,34],[526,4,504,2],[526,8,504,8,"params"],[526,14,504,14],[526,17,504,17,"queryString"],[526,28,504,28],[526,29,504,29,"parse"],[526,34,504,34],[526,35,504,35,"query"],[526,40,504,40],[526,41,504,41],[527,4,505,2],[527,8,505,6,"parseConfig"],[527,19,505,17],[527,21,505,19],[528,6,506,4,"Object"],[528,12,506,10],[528,13,506,11,"keys"],[528,17,506,15],[528,18,506,16,"params"],[528,24,506,22],[528,25,506,23],[528,26,506,24,"forEach"],[528,33,506,31],[528,34,506,32,"name"],[528,38,506,36],[528,42,506,40],[529,8,507,6],[529,12,507,10,"Object"],[529,18,507,16],[529,19,507,17,"hasOwnProperty"],[529,33,507,31],[529,34,507,32,"call"],[529,38,507,36],[529,39,507,37,"parseConfig"],[529,50,507,48],[529,52,507,50,"name"],[529,56,507,54],[529,57,507,55],[529,61,507,59],[529,68,507,66,"params"],[529,74,507,72],[529,75,507,73,"name"],[529,79,507,77],[529,80,507,78],[529,85,507,83],[529,93,507,91],[529,95,507,93],[530,10,508,8,"params"],[530,16,508,14],[530,17,508,15,"name"],[530,21,508,19],[530,22,508,20],[530,25,508,23,"parseConfig"],[530,36,508,34],[530,37,508,35,"name"],[530,41,508,39],[530,42,508,40],[530,43,508,41,"params"],[530,49,508,47],[530,50,508,48,"name"],[530,54,508,52],[530,55,508,53],[530,56,508,54],[531,8,509,6],[532,6,510,4],[532,7,510,5],[532,8,510,6],[533,4,511,2],[534,4,512,2],[534,11,512,9,"Object"],[534,17,512,15],[534,18,512,16,"keys"],[534,22,512,20],[534,23,512,21,"params"],[534,29,512,27],[534,30,512,28],[534,31,512,29,"length"],[534,37,512,35],[534,40,512,38,"params"],[534,46,512,44],[534,49,512,47,"undefined"],[534,58,512,56],[535,2,513,0],[535,3,513,1],[536,0,513,2],[536,3]],"functionMap":{"names":["<global>","getStateFromPath","remaining.split.filter.map$argument_0","configs.find$argument_0","match.routeNames.map$argument_0","getConfigResources","prepareConfigResources","getInitialRoutes","getSortedNormalizedConfigs","Object.keys.map$argument_0","concat.sort$argument_0","checkForDuplicatedConfigs","configs.reduce$argument_0","b.every$argument_0","a.every$argument_0","getConfigsWithRegexes","configs.map$argument_0","matchAgainstConfigs","config.routeNames.map$argument_0","Object.entries.map$argument_0","routeConfig.params.find$argument_0","Object.entries.map.filter$argument_0","Object.entries.map.filter.map$argument_0","createNormalizedConfigs","Object.keys.forEach$argument_0","createConfigItem","getPatternParts.map$argument_0","parts.map$argument_0","parts.map.filter$argument_0","findParseConfigForRoute","findInitialRoute","createStateObject","createNestedStateObject","parseQueryParams"],"mappings":"AAA;OC8B;4DC4B;KDK;+BES,0CF;gEGE;QHE;CDuB;AKM;CLO;AMC;CNa;AOC;CPS;AQC;+CCE,uED,QE;GF2E;CRC;AWC;iBCE;uDCQ,sBD,YE,sBF;GDQ;CXC;AeC;qBCC;IDI;CfC;4BiBC;qCCa;yCfC;SeG;yGCC;gDCE,wBD;SDK,SG,gBH,MI;SJO;ODU;CjBS;gCuBC;0CCgE;ODG;CvBK;yByBC;4CCQ;MDG;yDEE;GFM;6BEC,gBF;2BEC;UFI,SG,gBH;CzBS;gC6BC;C7BO;yB8BG;C9BgB;0B+BI;C/BsC;gCgCC;ChC4B;yBiCC;gCTI;KSI;CjCG"}},"type":"js/module"}]}