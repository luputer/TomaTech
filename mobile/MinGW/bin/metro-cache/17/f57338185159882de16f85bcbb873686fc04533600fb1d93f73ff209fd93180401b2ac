{"dependencies":[{"name":"./fork/getStateFromPath-forks","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":4,"column":33,"index":183},"end":{"line":4,"column":73,"index":223}}],"key":"ipxv70qXETAA38UCDZpBXxWaERo="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getNormalizedStatePath = exports.getRouteInfoFromState = void 0;\n  const getStateFromPath_forks_1 = require(_dependencyMap[0], \"./fork/getStateFromPath-forks\");\n  function getRouteInfoFromState(getPathFromState, state, baseUrl) {\n    const {\n      path\n    } = getPathFromState(state, false);\n    const qualified = getPathFromState(state, true);\n    return Object.assign({\n      // TODO: This may have a predefined origin attached in the future.\n      unstable_globalHref: path,\n      pathname: (0, getStateFromPath_forks_1.stripBaseUrl)(path, baseUrl).split('?')['0'],\n      isIndex: isIndexPath(state)\n    }, getNormalizedStatePath(qualified, baseUrl));\n  }\n  exports.getRouteInfoFromState = getRouteInfoFromState;\n  function isIndexPath(state) {\n    const route = state.routes[state.index ?? state.routes.length - 1];\n    if (route.state) {\n      return isIndexPath(route.state);\n    }\n    // Index routes on the same level as a layout do not have `index` in their name\n    if (route.params && 'screen' in route.params) {\n      return route.params.screen === 'index';\n    }\n    // The `params` key will not exist if there are no params\n    // So we need to do a positive lookahead to check if the route ends with /index\n    // Nested routes that are hoisted will have a name ending with /index\n    // e.g name could be /user/[id]/index\n    if (route.name.match(/.+\\/index$/)) return true;\n    // The state will either have params (because there are multiple _layout) or it will be hoisted with a name\n    // If we don't match the above cases, then it's not an index route\n    return false;\n  }\n  // TODO: Split up getPathFromState to return all this info at once.\n  function getNormalizedStatePath({\n    path: statePath,\n    params\n  }, baseUrl) {\n    const [pathname] = statePath.split('?');\n    return {\n      // Strip empty path at the start\n      segments: (0, getStateFromPath_forks_1.stripBaseUrl)(pathname, baseUrl).split('/').filter(Boolean).map(decodeURIComponent),\n      // TODO: This is not efficient, we should generate based on the state instead\n      // of converting to string then back to object\n      params: decodeParams(params)\n    };\n  }\n  exports.getNormalizedStatePath = getNormalizedStatePath;\n  function decodeParams(params) {\n    const parsed = {};\n    for (const [key, value] of Object.entries(params)) {\n      try {\n        if (key === 'params' && typeof value === 'object') {\n          parsed[key] = decodeParams(value);\n        } else if (Array.isArray(value)) {\n          parsed[key] = value.map(v => decodeURIComponent(v));\n        } else {\n          parsed[key] = decodeURIComponent(value);\n        }\n      } catch {\n        parsed[key] = value;\n      }\n    }\n    return parsed;\n  }\n});","lineCount":72,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"getNormalizedStatePath"],[7,32,3,30],[7,35,3,33,"exports"],[7,42,3,40],[7,43,3,41,"getRouteInfoFromState"],[7,64,3,62],[7,67,3,65],[7,72,3,70],[7,73,3,71],[8,2,4,0],[8,8,4,6,"getStateFromPath_forks_1"],[8,32,4,30],[8,35,4,33,"require"],[8,42,4,40],[8,43,4,40,"_dependencyMap"],[8,57,4,40],[8,93,4,72],[8,94,4,73],[9,2,5,0],[9,11,5,9,"getRouteInfoFromState"],[9,32,5,30,"getRouteInfoFromState"],[9,33,5,31,"getPathFromState"],[9,49,5,47],[9,51,5,49,"state"],[9,56,5,54],[9,58,5,56,"baseUrl"],[9,65,5,63],[9,67,5,65],[10,4,6,4],[10,10,6,10],[11,6,6,12,"path"],[12,4,6,17],[12,5,6,18],[12,8,6,21,"getPathFromState"],[12,24,6,37],[12,25,6,38,"state"],[12,30,6,43],[12,32,6,45],[12,37,6,50],[12,38,6,51],[13,4,7,4],[13,10,7,10,"qualified"],[13,19,7,19],[13,22,7,22,"getPathFromState"],[13,38,7,38],[13,39,7,39,"state"],[13,44,7,44],[13,46,7,46],[13,50,7,50],[13,51,7,51],[14,4,8,4],[14,11,8,4,"Object"],[14,17,8,4],[14,18,8,4,"assign"],[14,24,8,4],[15,6,9,8],[16,6,10,8,"unstable_globalHref"],[16,25,10,27],[16,27,10,29,"path"],[16,31,10,33],[17,6,11,8,"pathname"],[17,14,11,16],[17,16,11,18],[17,17,11,19],[17,18,11,20],[17,20,11,22,"getStateFromPath_forks_1"],[17,44,11,46],[17,45,11,47,"stripBaseUrl"],[17,57,11,59],[17,59,11,61,"path"],[17,63,11,65],[17,65,11,67,"baseUrl"],[17,72,11,74],[17,73,11,75],[17,74,11,76,"split"],[17,79,11,81],[17,80,11,82],[17,83,11,85],[17,84,11,86],[17,85,11,87],[17,88,11,90],[17,89,11,91],[18,6,12,8,"isIndex"],[18,13,12,15],[18,15,12,17,"isIndexPath"],[18,26,12,28],[18,27,12,29,"state"],[18,32,12,34],[19,4,12,35],[19,7,13,11,"getNormalizedStatePath"],[19,29,13,33],[19,30,13,34,"qualified"],[19,39,13,43],[19,41,13,45,"baseUrl"],[19,48,13,52],[19,49,13,53],[20,2,15,0],[21,2,16,0,"exports"],[21,9,16,7],[21,10,16,8,"getRouteInfoFromState"],[21,31,16,29],[21,34,16,32,"getRouteInfoFromState"],[21,55,16,53],[22,2,17,0],[22,11,17,9,"isIndexPath"],[22,22,17,20,"isIndexPath"],[22,23,17,21,"state"],[22,28,17,26],[22,30,17,28],[23,4,18,4],[23,10,18,10,"route"],[23,15,18,15],[23,18,18,18,"state"],[23,23,18,23],[23,24,18,24,"routes"],[23,30,18,30],[23,31,18,31,"state"],[23,36,18,36],[23,37,18,37,"index"],[23,42,18,42],[23,46,18,46,"state"],[23,51,18,51],[23,52,18,52,"routes"],[23,58,18,58],[23,59,18,59,"length"],[23,65,18,65],[23,68,18,68],[23,69,18,69],[23,70,18,70],[24,4,19,4],[24,8,19,8,"route"],[24,13,19,13],[24,14,19,14,"state"],[24,19,19,19],[24,21,19,21],[25,6,20,8],[25,13,20,15,"isIndexPath"],[25,24,20,26],[25,25,20,27,"route"],[25,30,20,32],[25,31,20,33,"state"],[25,36,20,38],[25,37,20,39],[26,4,21,4],[27,4,22,4],[28,4,23,4],[28,8,23,8,"route"],[28,13,23,13],[28,14,23,14,"params"],[28,20,23,20],[28,24,23,24],[28,32,23,32],[28,36,23,36,"route"],[28,41,23,41],[28,42,23,42,"params"],[28,48,23,48],[28,50,23,50],[29,6,24,8],[29,13,24,15,"route"],[29,18,24,20],[29,19,24,21,"params"],[29,25,24,27],[29,26,24,28,"screen"],[29,32,24,34],[29,37,24,39],[29,44,24,46],[30,4,25,4],[31,4,26,4],[32,4,27,4],[33,4,28,4],[34,4,29,4],[35,4,30,4],[35,8,30,8,"route"],[35,13,30,13],[35,14,30,14,"name"],[35,18,30,18],[35,19,30,19,"match"],[35,24,30,24],[35,25,30,25],[35,37,30,37],[35,38,30,38],[35,40,31,8],[35,47,31,15],[35,51,31,19],[36,4,32,4],[37,4,33,4],[38,4,34,4],[38,11,34,11],[38,16,34,16],[39,2,35,0],[40,2,36,0],[41,2,37,0],[41,11,37,9,"getNormalizedStatePath"],[41,33,37,31,"getNormalizedStatePath"],[41,34,37,32],[42,4,37,34,"path"],[42,8,37,38],[42,10,37,40,"statePath"],[42,19,37,49],[43,4,37,51,"params"],[44,2,37,59],[44,3,37,60],[44,5,37,62,"baseUrl"],[44,12,37,69],[44,14,37,71],[45,4,38,4],[45,10,38,10],[45,11,38,11,"pathname"],[45,19,38,19],[45,20,38,20],[45,23,38,23,"statePath"],[45,32,38,32],[45,33,38,33,"split"],[45,38,38,38],[45,39,38,39],[45,42,38,42],[45,43,38,43],[46,4,39,4],[46,11,39,11],[47,6,40,8],[48,6,41,8,"segments"],[48,14,41,16],[48,16,41,18],[48,17,41,19],[48,18,41,20],[48,20,41,22,"getStateFromPath_forks_1"],[48,44,41,46],[48,45,41,47,"stripBaseUrl"],[48,57,41,59],[48,59,41,61,"pathname"],[48,67,41,69],[48,69,41,71,"baseUrl"],[48,76,41,78],[48,77,41,79],[48,78,41,80,"split"],[48,83,41,85],[48,84,41,86],[48,87,41,89],[48,88,41,90],[48,89,41,91,"filter"],[48,95,41,97],[48,96,41,98,"Boolean"],[48,103,41,105],[48,104,41,106],[48,105,41,107,"map"],[48,108,41,110],[48,109,41,111,"decodeURIComponent"],[48,127,41,129],[48,128,41,130],[49,6,42,8],[50,6,43,8],[51,6,44,8,"params"],[51,12,44,14],[51,14,44,16,"decodeParams"],[51,26,44,28],[51,27,44,29,"params"],[51,33,44,35],[52,4,45,4],[52,5,45,5],[53,2,46,0],[54,2,47,0,"exports"],[54,9,47,7],[54,10,47,8,"getNormalizedStatePath"],[54,32,47,30],[54,35,47,33,"getNormalizedStatePath"],[54,57,47,55],[55,2,48,0],[55,11,48,9,"decodeParams"],[55,23,48,21,"decodeParams"],[55,24,48,22,"params"],[55,30,48,28],[55,32,48,30],[56,4,49,4],[56,10,49,10,"parsed"],[56,16,49,16],[56,19,49,19],[56,20,49,20],[56,21,49,21],[57,4,50,4],[57,9,50,9],[57,15,50,15],[57,16,50,16,"key"],[57,19,50,19],[57,21,50,21,"value"],[57,26,50,26],[57,27,50,27],[57,31,50,31,"Object"],[57,37,50,37],[57,38,50,38,"entries"],[57,45,50,45],[57,46,50,46,"params"],[57,52,50,52],[57,53,50,53],[57,55,50,55],[58,6,51,8],[58,10,51,12],[59,8,52,12],[59,12,52,16,"key"],[59,15,52,19],[59,20,52,24],[59,28,52,32],[59,32,52,36],[59,39,52,43,"value"],[59,44,52,48],[59,49,52,53],[59,57,52,61],[59,59,52,63],[60,10,53,16,"parsed"],[60,16,53,22],[60,17,53,23,"key"],[60,20,53,26],[60,21,53,27],[60,24,53,30,"decodeParams"],[60,36,53,42],[60,37,53,43,"value"],[60,42,53,48],[60,43,53,49],[61,8,54,12],[61,9,54,13],[61,15,55,17],[61,19,55,21,"Array"],[61,24,55,26],[61,25,55,27,"isArray"],[61,32,55,34],[61,33,55,35,"value"],[61,38,55,40],[61,39,55,41],[61,41,55,43],[62,10,56,16,"parsed"],[62,16,56,22],[62,17,56,23,"key"],[62,20,56,26],[62,21,56,27],[62,24,56,30,"value"],[62,29,56,35],[62,30,56,36,"map"],[62,33,56,39],[62,34,56,41,"v"],[62,35,56,42],[62,39,56,47,"decodeURIComponent"],[62,57,56,65],[62,58,56,66,"v"],[62,59,56,67],[62,60,56,68],[62,61,56,69],[63,8,57,12],[63,9,57,13],[63,15,58,17],[64,10,59,16,"parsed"],[64,16,59,22],[64,17,59,23,"key"],[64,20,59,26],[64,21,59,27],[64,24,59,30,"decodeURIComponent"],[64,42,59,48],[64,43,59,49,"value"],[64,48,59,54],[64,49,59,55],[65,8,60,12],[66,6,61,8],[66,7,61,9],[66,8,62,8],[66,14,62,14],[67,8,63,12,"parsed"],[67,14,63,18],[67,15,63,19,"key"],[67,18,63,22],[67,19,63,23],[67,22,63,26,"value"],[67,27,63,31],[68,6,64,8],[69,4,65,4],[70,4,66,4],[70,11,66,11,"parsed"],[70,17,66,17],[71,2,67,0],[72,0,67,1],[72,3]],"functionMap":{"names":["<global>","getRouteInfoFromState","isIndexPath","getNormalizedStatePath","decodeParams","value.map$argument_0"],"mappings":"AAA;ACI;CDU;AEE;CFkB;AGE;CHS;AIE;wCCQ,4BD;CJW"}},"type":"js/module"}]}