{"dependencies":[{"name":"./matchers","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":4,"column":19,"index":181},"end":{"line":4,"column":40,"index":202}}],"key":"r7IFX4/qJzuJVkO9YohL0nqjKek="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getReactNavigationConfig = exports.getReactNavigationScreensConfig = void 0;\n  var matchers_1 = require(_dependencyMap[0], \"./matchers\");\n  // `[page]` -> `:page`\n  // `page` -> `page`\n  function convertDynamicRouteToReactNavigation(segment) {\n    // NOTE(EvanBacon): To support shared routes we preserve group segments.\n    if (segment === 'index') {\n      return '';\n    }\n    if (segment === '+not-found') {\n      return '*not-found';\n    }\n    var rest = (0, matchers_1.matchDeepDynamicRouteName)(segment);\n    if (rest != null) {\n      return '*' + rest;\n    }\n    var dynamicName = (0, matchers_1.matchDynamicName)(segment);\n    if (dynamicName != null) {\n      return `:${dynamicName}`;\n    }\n    return segment;\n  }\n  function parseRouteSegments(segments) {\n    return (\n      // NOTE(EvanBacon): When there are nested routes without layouts\n      // the node.route will be something like `app/home/index`\n      // this needs to be split to ensure each segment is parsed correctly.\n      segments.split('/')\n      // Convert each segment to a React Navigation format.\n      .map(convertDynamicRouteToReactNavigation)\n      // Remove any empty paths from groups or index routes.\n      .filter(Boolean)\n      // Join to return as a path.\n      .join('/')\n    );\n  }\n  function convertRouteNodeToScreen(node, metaOnly) {\n    var path = parseRouteSegments(node.route);\n    if (!node.children.length) {\n      if (!metaOnly) {\n        return {\n          path,\n          screens: {},\n          _route: node\n        };\n      }\n      return path;\n    }\n    var screens = getReactNavigationScreensConfig(node.children, metaOnly);\n    var screen = {\n      path,\n      screens\n    };\n    if (node.initialRouteName) {\n      // NOTE(EvanBacon): This is bad because it forces all Layout Routes\n      // to be loaded into memory. We should move towards a system where\n      // the initial route name is either loaded asynchronously in the Layout Route\n      // or defined via a file system convention.\n      screen.initialRouteName = node.initialRouteName;\n    }\n    if (!metaOnly) {\n      screen._route = node;\n    }\n    return screen;\n  }\n  function getReactNavigationScreensConfig(nodes, metaOnly) {\n    return Object.fromEntries(nodes.map(node => [node.route, convertRouteNodeToScreen(node, metaOnly)]));\n  }\n  exports.getReactNavigationScreensConfig = getReactNavigationScreensConfig;\n  function getReactNavigationConfig(routes, metaOnly) {\n    var config = {\n      initialRouteName: undefined,\n      screens: getReactNavigationScreensConfig(routes.children, metaOnly)\n    };\n    if (routes.initialRouteName) {\n      // We're using LinkingOptions the generic type is `object` instead of a proper ParamList.\n      // So we need to cast the initialRouteName to `any` to avoid type errors.\n      config.initialRouteName = routes.initialRouteName;\n    }\n    return config;\n  }\n  exports.getReactNavigationConfig = getReactNavigationConfig;\n});","lineCount":89,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"getReactNavigationConfig"],[7,34,3,32],[7,37,3,35,"exports"],[7,44,3,42],[7,45,3,43,"getReactNavigationScreensConfig"],[7,76,3,74],[7,79,3,77],[7,84,3,82],[7,85,3,83],[8,2,4,0],[8,6,4,6,"matchers_1"],[8,16,4,16],[8,19,4,19,"require"],[8,26,4,26],[8,27,4,26,"_dependencyMap"],[8,41,4,26],[8,58,4,39],[8,59,4,40],[9,2,5,0],[10,2,6,0],[11,2,7,0],[11,11,7,9,"convertDynamicRouteToReactNavigation"],[11,47,7,45,"convertDynamicRouteToReactNavigation"],[11,48,7,46,"segment"],[11,55,7,53],[11,57,7,55],[12,4,8,4],[13,4,9,4],[13,8,9,8,"segment"],[13,15,9,15],[13,20,9,20],[13,27,9,27],[13,29,9,29],[14,6,10,8],[14,13,10,15],[14,15,10,17],[15,4,11,4],[16,4,12,4],[16,8,12,8,"segment"],[16,15,12,15],[16,20,12,20],[16,32,12,32],[16,34,12,34],[17,6,13,8],[17,13,13,15],[17,25,13,27],[18,4,14,4],[19,4,15,4],[19,8,15,10,"rest"],[19,12,15,14],[19,15,15,17],[19,16,15,18],[19,17,15,19],[19,19,15,21,"matchers_1"],[19,29,15,31],[19,30,15,32,"matchDeepDynamicRouteName"],[19,55,15,57],[19,57,15,59,"segment"],[19,64,15,66],[19,65,15,67],[20,4,16,4],[20,8,16,8,"rest"],[20,12,16,12],[20,16,16,16],[20,20,16,20],[20,22,16,22],[21,6,17,8],[21,13,17,15],[21,16,17,18],[21,19,17,21,"rest"],[21,23,17,25],[22,4,18,4],[23,4,19,4],[23,8,19,10,"dynamicName"],[23,19,19,21],[23,22,19,24],[23,23,19,25],[23,24,19,26],[23,26,19,28,"matchers_1"],[23,36,19,38],[23,37,19,39,"matchDynamicName"],[23,53,19,55],[23,55,19,57,"segment"],[23,62,19,64],[23,63,19,65],[24,4,20,4],[24,8,20,8,"dynamicName"],[24,19,20,19],[24,23,20,23],[24,27,20,27],[24,29,20,29],[25,6,21,8],[25,13,21,15],[25,17,21,19,"dynamicName"],[25,28,21,30],[25,30,21,32],[26,4,22,4],[27,4,23,4],[27,11,23,11,"segment"],[27,18,23,18],[28,2,24,0],[29,2,25,0],[29,11,25,9,"parseRouteSegments"],[29,29,25,27,"parseRouteSegments"],[29,30,25,28,"segments"],[29,38,25,36],[29,40,25,38],[30,4,26,4],[31,6,27,4],[32,6,28,4],[33,6,29,4],[34,6,30,4,"segments"],[34,14,30,12],[34,15,31,9,"split"],[34,20,31,14],[34,21,31,15],[34,24,31,18],[35,6,32,8],[36,6,32,8],[36,7,33,9,"map"],[36,10,33,12],[36,11,33,13,"convertDynamicRouteToReactNavigation"],[36,47,33,49],[37,6,34,8],[38,6,34,8],[38,7,35,9,"filter"],[38,13,35,15],[38,14,35,16,"Boolean"],[38,21,35,23],[39,6,36,8],[40,6,36,8],[40,7,37,9,"join"],[40,11,37,13],[40,12,37,14],[40,15,37,17],[41,4,37,18],[42,2,38,0],[43,2,39,0],[43,11,39,9,"convertRouteNodeToScreen"],[43,35,39,33,"convertRouteNodeToScreen"],[43,36,39,34,"node"],[43,40,39,38],[43,42,39,40,"metaOnly"],[43,50,39,48],[43,52,39,50],[44,4,40,4],[44,8,40,10,"path"],[44,12,40,14],[44,15,40,17,"parseRouteSegments"],[44,33,40,35],[44,34,40,36,"node"],[44,38,40,40],[44,39,40,41,"route"],[44,44,40,46],[44,45,40,47],[45,4,41,4],[45,8,41,8],[45,9,41,9,"node"],[45,13,41,13],[45,14,41,14,"children"],[45,22,41,22],[45,23,41,23,"length"],[45,29,41,29],[45,31,41,31],[46,6,42,8],[46,10,42,12],[46,11,42,13,"metaOnly"],[46,19,42,21],[46,21,42,23],[47,8,43,12],[47,15,43,19],[48,10,44,16,"path"],[48,14,44,20],[49,10,45,16,"screens"],[49,17,45,23],[49,19,45,25],[49,20,45,26],[49,21,45,27],[50,10,46,16,"_route"],[50,16,46,22],[50,18,46,24,"node"],[51,8,47,12],[51,9,47,13],[52,6,48,8],[53,6,49,8],[53,13,49,15,"path"],[53,17,49,19],[54,4,50,4],[55,4,51,4],[55,8,51,10,"screens"],[55,15,51,17],[55,18,51,20,"getReactNavigationScreensConfig"],[55,49,51,51],[55,50,51,52,"node"],[55,54,51,56],[55,55,51,57,"children"],[55,63,51,65],[55,65,51,67,"metaOnly"],[55,73,51,75],[55,74,51,76],[56,4,52,4],[56,8,52,10,"screen"],[56,14,52,16],[56,17,52,19],[57,6,53,8,"path"],[57,10,53,12],[58,6,54,8,"screens"],[59,4,55,4],[59,5,55,5],[60,4,56,4],[60,8,56,8,"node"],[60,12,56,12],[60,13,56,13,"initialRouteName"],[60,29,56,29],[60,31,56,31],[61,6,57,8],[62,6,58,8],[63,6,59,8],[64,6,60,8],[65,6,61,8,"screen"],[65,12,61,14],[65,13,61,15,"initialRouteName"],[65,29,61,31],[65,32,61,34,"node"],[65,36,61,38],[65,37,61,39,"initialRouteName"],[65,53,61,55],[66,4,62,4],[67,4,63,4],[67,8,63,8],[67,9,63,9,"metaOnly"],[67,17,63,17],[67,19,63,19],[68,6,64,8,"screen"],[68,12,64,14],[68,13,64,15,"_route"],[68,19,64,21],[68,22,64,24,"node"],[68,26,64,28],[69,4,65,4],[70,4,66,4],[70,11,66,11,"screen"],[70,17,66,17],[71,2,67,0],[72,2,68,0],[72,11,68,9,"getReactNavigationScreensConfig"],[72,42,68,40,"getReactNavigationScreensConfig"],[72,43,68,41,"nodes"],[72,48,68,46],[72,50,68,48,"metaOnly"],[72,58,68,56],[72,60,68,58],[73,4,69,4],[73,11,69,11,"Object"],[73,17,69,17],[73,18,69,18,"fromEntries"],[73,29,69,29],[73,30,69,30,"nodes"],[73,35,69,35],[73,36,69,36,"map"],[73,39,69,39],[73,40,69,41,"node"],[73,44,69,45],[73,48,69,50],[73,49,69,51,"node"],[73,53,69,55],[73,54,69,56,"route"],[73,59,69,61],[73,61,69,63,"convertRouteNodeToScreen"],[73,85,69,87],[73,86,69,88,"node"],[73,90,69,92],[73,92,69,94,"metaOnly"],[73,100,69,102],[73,101,69,103],[73,102,69,104],[73,103,69,105],[73,104,69,106],[74,2,70,0],[75,2,71,0,"exports"],[75,9,71,7],[75,10,71,8,"getReactNavigationScreensConfig"],[75,41,71,39],[75,44,71,42,"getReactNavigationScreensConfig"],[75,75,71,73],[76,2,72,0],[76,11,72,9,"getReactNavigationConfig"],[76,35,72,33,"getReactNavigationConfig"],[76,36,72,34,"routes"],[76,42,72,40],[76,44,72,42,"metaOnly"],[76,52,72,50],[76,54,72,52],[77,4,73,4],[77,8,73,10,"config"],[77,14,73,16],[77,17,73,19],[78,6,74,8,"initialRouteName"],[78,22,74,24],[78,24,74,26,"undefined"],[78,33,74,35],[79,6,75,8,"screens"],[79,13,75,15],[79,15,75,17,"getReactNavigationScreensConfig"],[79,46,75,48],[79,47,75,49,"routes"],[79,53,75,55],[79,54,75,56,"children"],[79,62,75,64],[79,64,75,66,"metaOnly"],[79,72,75,74],[80,4,76,4],[80,5,76,5],[81,4,77,4],[81,8,77,8,"routes"],[81,14,77,14],[81,15,77,15,"initialRouteName"],[81,31,77,31],[81,33,77,33],[82,6,78,8],[83,6,79,8],[84,6,80,8,"config"],[84,12,80,14],[84,13,80,15,"initialRouteName"],[84,29,80,31],[84,32,80,34,"routes"],[84,38,80,40],[84,39,80,41,"initialRouteName"],[84,55,80,57],[85,4,81,4],[86,4,82,4],[86,11,82,11,"config"],[86,17,82,17],[87,2,83,0],[88,2,84,0,"exports"],[88,9,84,7],[88,10,84,8,"getReactNavigationConfig"],[88,34,84,32],[88,37,84,35,"getReactNavigationConfig"],[88,61,84,59],[89,0,84,60],[89,3]],"functionMap":{"names":["<global>","convertDynamicRouteToReactNavigation","parseRouteSegments","convertRouteNodeToScreen","getReactNavigationScreensConfig","nodes.map$argument_0","getReactNavigationConfig"],"mappings":"AAA;ACM;CDiB;AEC;CFa;AGC;CH4B;AIC;wCCC,gED;CJC;AME;CNW"}},"type":"js/module"}]}