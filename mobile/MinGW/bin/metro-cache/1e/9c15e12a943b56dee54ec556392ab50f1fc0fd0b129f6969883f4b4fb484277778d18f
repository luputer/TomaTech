{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":366,"column":38,"index":16604}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":366,"column":38,"index":16604}}],"key":"8I802z/QkQYw0PV6ZCqhBNDwn0Q="}},{"name":"expo-modules-core","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":56,"index":56}}],"key":"ka0FS6s7ZmvhJq+hEjGkLLrGpyo="}},{"name":"react-native","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":2,"column":0,"index":57},"end":{"line":2,"column":74,"index":131}}],"key":"XEo4Z+Aarw9Y7I7ZLBt66vGLAVQ="}},{"name":"./ExpoWebBrowser","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":3,"column":0,"index":132},"end":{"line":3,"column":50,"index":182}}],"key":"bFbi9+MrztiNn8VU13C0V0rPhEk="}},{"name":"./WebBrowser.types","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":4,"column":0,"index":183},"end":{"line":4,"column":88,"index":271}}],"key":"xPPtWBZmSxYR+/YSAVn/oTtBtlE="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, \"WebBrowserPresentationStyle\", {\n    enumerable: true,\n    get: function () {\n      return _WebBrowser.WebBrowserPresentationStyle;\n    }\n  });\n  Object.defineProperty(exports, \"WebBrowserResultType\", {\n    enumerable: true,\n    get: function () {\n      return _WebBrowser.WebBrowserResultType;\n    }\n  });\n  exports.coolDownAsync = coolDownAsync;\n  exports.dismissAuthSession = dismissAuthSession;\n  exports.dismissBrowser = dismissBrowser;\n  exports.getCustomTabsSupportingBrowsersAsync = getCustomTabsSupportingBrowsersAsync;\n  exports.mayInitWithUrlAsync = mayInitWithUrlAsync;\n  exports.maybeCompleteAuthSession = maybeCompleteAuthSession;\n  exports.openAuthSessionAsync = openAuthSessionAsync;\n  exports.openBrowserAsync = openBrowserAsync;\n  exports.warmUpAsync = warmUpAsync;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _expoModulesCore = require(_dependencyMap[2], \"expo-modules-core\");\n  var _reactNative = require(_dependencyMap[3], \"react-native\");\n  var _ExpoWebBrowser = _interopRequireDefault(require(_dependencyMap[4], \"./ExpoWebBrowser\"));\n  var _WebBrowser = require(_dependencyMap[5], \"./WebBrowser.types\");\n  var emptyCustomTabsPackages = {\n    defaultBrowserPackage: undefined,\n    preferredBrowserPackage: undefined,\n    browserPackages: [],\n    servicePackages: []\n  };\n  // @needsAudit\n  /**\n   * Returns a list of applications package names supporting Custom Tabs, Custom Tabs\n   * service, user chosen and preferred one. This may not be fully reliable, since it uses\n   * `PackageManager.getResolvingActivities` under the hood. (For example, some browsers might not be\n   * present in browserPackages list once another browser is set to default.)\n   *\n   * @return The promise which fulfils with [`WebBrowserCustomTabsResults`](#webbrowsercustomtabsresults) object.\n   * @platform android\n   */\n  function getCustomTabsSupportingBrowsersAsync() {\n    return _getCustomTabsSupportingBrowsersAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * This method calls `warmUp` method on [CustomTabsClient](https://developer.android.com/reference/android/support/customtabs/CustomTabsClient.html#warmup(long))\n   * for specified package.\n   *\n   * @param browserPackage Package of browser to be warmed up. If not set, preferred browser will be warmed.\n   *\n   * @return A promise which fulfils with `WebBrowserWarmUpResult` object.\n   * @platform android\n   */\n  function _getCustomTabsSupportingBrowsersAsync() {\n    _getCustomTabsSupportingBrowsersAsync = (0, _asyncToGenerator2.default)(function* () {\n      if (!_ExpoWebBrowser.default.getCustomTabsSupportingBrowsersAsync) {\n        throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'getCustomTabsSupportingBrowsersAsync');\n      }\n      if (_reactNative.Platform.OS !== 'android') {\n        return emptyCustomTabsPackages;\n      } else {\n        return yield _ExpoWebBrowser.default.getCustomTabsSupportingBrowsersAsync();\n      }\n    });\n    return _getCustomTabsSupportingBrowsersAsync.apply(this, arguments);\n  }\n  function warmUpAsync(_x) {\n    return _warmUpAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * This method initiates (if needed) [CustomTabsSession](https://developer.android.com/reference/android/support/customtabs/CustomTabsSession.html#maylaunchurl)\n   * and calls its `mayLaunchUrl` method for browser specified by the package.\n   *\n   * @param url The url of page that is likely to be loaded first when opening browser.\n   * @param browserPackage Package of browser to be informed. If not set, preferred\n   * browser will be used.\n   *\n   * @return A promise which fulfils with `WebBrowserMayInitWithUrlResult` object.\n   * @platform android\n   */\n  function _warmUpAsync() {\n    _warmUpAsync = (0, _asyncToGenerator2.default)(function* (browserPackage) {\n      if (!_ExpoWebBrowser.default.warmUpAsync) {\n        throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'warmUpAsync');\n      }\n      if (_reactNative.Platform.OS !== 'android') {\n        return {};\n      } else {\n        return yield _ExpoWebBrowser.default.warmUpAsync(browserPackage);\n      }\n    });\n    return _warmUpAsync.apply(this, arguments);\n  }\n  function mayInitWithUrlAsync(_x2, _x3) {\n    return _mayInitWithUrlAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * This methods removes all bindings to services created by [`warmUpAsync`](#webbrowserwarmupasyncbrowserpackage)\n   * or [`mayInitWithUrlAsync`](#webbrowsermayinitwithurlasyncurl-browserpackage). You should call\n   * this method once you don't need them to avoid potential memory leaks. However, those binding\n   * would be cleared once your application is destroyed, which might be sufficient in most cases.\n   *\n   * @param browserPackage Package of browser to be cooled. If not set, preferred browser will be used.\n   *\n   * @return The promise which fulfils with ` WebBrowserCoolDownResult` when cooling is performed, or\n   * an empty object when there was no connection to be dismissed.\n   * @platform android\n   */\n  function _mayInitWithUrlAsync() {\n    _mayInitWithUrlAsync = (0, _asyncToGenerator2.default)(function* (url, browserPackage) {\n      if (!_ExpoWebBrowser.default.mayInitWithUrlAsync) {\n        throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'mayInitWithUrlAsync');\n      }\n      if (_reactNative.Platform.OS !== 'android') {\n        return {};\n      } else {\n        return yield _ExpoWebBrowser.default.mayInitWithUrlAsync(url, browserPackage);\n      }\n    });\n    return _mayInitWithUrlAsync.apply(this, arguments);\n  }\n  function coolDownAsync(_x4) {\n    return _coolDownAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Opens the url with Safari in a modal on iOS using [`SFSafariViewController`](https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller),\n   * and Chrome in a new [custom tab](https://developer.chrome.com/multidevice/android/customtabs)\n   * on Android. On iOS, the modal Safari will not share cookies with the system Safari. If you need\n   * this, use [`openAuthSessionAsync`](#webbrowseropenauthsessionasyncurl-redirecturl-options).\n   *\n   * @param url The url to open in the web browser.\n   * @param browserParams A dictionary of key-value pairs.\n   *\n   * @return The promise behaves differently based on the platform.\n   * On Android promise resolves with `{ type: 'opened' }` if we were able to open browser.\n   * On iOS:\n   * - If the user closed the web browser, the Promise resolves with `{ type: 'cancel' }`.\n   * - If the browser is closed using [`dismissBrowser`](#webbrowserdismissbrowser), the Promise resolves with `{ type: 'dismiss' }`.\n   */\n  function _coolDownAsync() {\n    _coolDownAsync = (0, _asyncToGenerator2.default)(function* (browserPackage) {\n      if (!_ExpoWebBrowser.default.coolDownAsync) {\n        throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'coolDownAsync');\n      }\n      if (_reactNative.Platform.OS !== 'android') {\n        return {};\n      } else {\n        return yield _ExpoWebBrowser.default.coolDownAsync(browserPackage);\n      }\n    });\n    return _coolDownAsync.apply(this, arguments);\n  }\n  function openBrowserAsync(_x5) {\n    return _openBrowserAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Dismisses the presented web browser.\n   *\n   * @return The promise that resolves with `{ type: 'dismiss' }` on the successful attempt or throws an error if dismiss functionality is not available.\n   * @platform ios\n   */\n  function _openBrowserAsync() {\n    _openBrowserAsync = (0, _asyncToGenerator2.default)(function* (url) {\n      var browserParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!_ExpoWebBrowser.default.openBrowserAsync) {\n        throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'openBrowserAsync');\n      }\n      var result;\n      try {\n        result = yield _ExpoWebBrowser.default.openBrowserAsync(url, _processOptions(browserParams));\n      } catch {\n        return {\n          type: _WebBrowser.WebBrowserResultType.LOCKED\n        };\n      }\n      return result;\n    });\n    return _openBrowserAsync.apply(this, arguments);\n  }\n  function dismissBrowser() {\n    return _ExpoWebBrowser.default.dismissBrowser?.();\n  }\n  // @needsAudit\n  /**\n   * # On Android:\n   * This will be done using a \"custom Chrome tabs\" browser, [AppState](https://reactnative.dev/docs/appstate),\n   * and [Linking](./linking/) APIs.\n   *\n   * # On iOS:\n   * Opens the url with Safari in a modal using `ASWebAuthenticationSession`. The user will be asked\n   * whether to allow the app to authenticate using the given url.\n   * To handle redirection back to the mobile application, the redirect URI set in the authentication server\n   * has to use the protocol provided as the scheme in **app.json** [`expo.scheme`](./../config/app/#scheme).\n   * For example, `demo://` not `https://` protocol.\n   * Using `Linking.addEventListener` is not needed and can have side effects.\n   *\n   * # On web:\n   * > This API can only be used in a secure environment (localhost/https).\n   * to test this. Otherwise, an error with code [`ERR_WEB_BROWSER_CRYPTO`](#err_web_browser_crypto) will be thrown.\n   * This will use the browser's [`window.open()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/open) API.\n   * - _Desktop_: This will create a new web popup window in the browser that can be closed later using `WebBrowser.maybeCompleteAuthSession()`.\n   * - _Mobile_: This will open a new tab in the browser which can be closed using `WebBrowser.maybeCompleteAuthSession()`.\n   *\n   * How this works on web:\n   * - A crypto state will be created for verifying the redirect.\n   *   - This means you need to run with `npx expo start --https`\n   * - The state will be added to the window's `localstorage`. This ensures that auth cannot complete\n   *   unless it's done from a page running with the same origin as it was started.\n   *   Ex: if `openAuthSessionAsync` is invoked on `https://localhost:19006`, then `maybeCompleteAuthSession`\n   *   must be invoked on a page hosted from the origin `https://localhost:19006`. Using a different\n   *   website, or even a different host like `https://128.0.0.*:19006` for example will not work.\n   * - A timer will be started to check for every 1000 milliseconds (1 second) to detect if the window\n   *   has been closed by the user. If this happens then a promise will resolve with `{ type: 'dismiss' }`.\n   *\n   * > On mobile web, Chrome and Safari will block any call to [`window.open()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)\n   * which takes too long to fire after a user interaction. This method must be invoked immediately\n   * after a user interaction. If the event is blocked, an error with code [`ERR_WEB_BROWSER_BLOCKED`](#err_web_browser_blocked) will be thrown.\n   *\n   * @param url The url to open in the web browser. This should be a login page.\n   * @param redirectUrl _Optional_ - The url to deep link back into your app.\n   * On web, this defaults to the output of [`Linking.createURL(\"\")`](./linking/#linkingcreateurlpath-namedparameters).\n   * @param options _Optional_ - An object extending the [`WebBrowserOpenOptions`](#webbrowseropenoptions).\n   * If there is no native AuthSession implementation available (which is the case on Android)\n   * these params will be used in the browser polyfill. If there is a native AuthSession implementation,\n   * these params will be ignored.\n   *\n   * @return\n   * - If the user does not permit the application to authenticate with the given url, the Promise fulfills with `{ type: 'cancel' }` object.\n   * - If the user closed the web browser, the Promise fulfills with `{ type: 'cancel' }` object.\n   * - If the browser is closed using [`dismissBrowser`](#webbrowserdismissbrowser),\n   * the Promise fulfills with `{ type: 'dismiss' }` object.\n   */\n  function openAuthSessionAsync(_x6, _x7) {\n    return _openAuthSessionAsync.apply(this, arguments);\n  }\n  /**\n   * Dismisses the current authentication session. On web, it will close the popup window associated with auth process.\n   *\n   * @return The `void` on the successful attempt or throws an error if dismiss functionality is not available.\n   *\n   * @platform ios\n   * @platform web\n   */\n  function _openAuthSessionAsync() {\n    _openAuthSessionAsync = (0, _asyncToGenerator2.default)(function* (url, redirectUrl) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      if (_authSessionIsNativelySupported()) {\n        if (!_ExpoWebBrowser.default.openAuthSessionAsync) {\n          throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'openAuthSessionAsync');\n        }\n        if (['ios', 'web'].includes(_reactNative.Platform.OS)) {\n          return _ExpoWebBrowser.default.openAuthSessionAsync(url, redirectUrl, _processOptions(options));\n        }\n        return _ExpoWebBrowser.default.openAuthSessionAsync(url, redirectUrl);\n      } else {\n        return _openAuthSessionPolyfillAsync(url, redirectUrl, options);\n      }\n    });\n    return _openAuthSessionAsync.apply(this, arguments);\n  }\n  function dismissAuthSession() {\n    if (_authSessionIsNativelySupported()) {\n      if (!_ExpoWebBrowser.default.dismissAuthSession) {\n        throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'dismissAuthSession');\n      }\n      _ExpoWebBrowser.default.dismissAuthSession();\n    } else {\n      if (!_ExpoWebBrowser.default.dismissBrowser) {\n        throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'dismissBrowser');\n      }\n      _ExpoWebBrowser.default.dismissBrowser();\n    }\n  }\n  // @needsAudit\n  /**\n   * Possibly completes an authentication session on web in a window popup. The method\n   * should be invoked on the page that the window redirects to.\n   *\n   * @param options\n   *\n   * @return Returns an object with message about why the redirect failed or succeeded:\n   *\n   * If `type` is set to `failed`, the reason depends on the message:\n   * - `Not supported on this platform`: If the platform doesn't support this method (Android, iOS).\n   * - `Cannot use expo-web-browser in a non-browser environment`: If the code was executed in an SSR\n   *   or node environment.\n   * - `No auth session is currently in progress`: (the cached state wasn't found in local storage).\n   *   This can happen if the window redirects to an origin (website) that is different to the initial\n   *   website origin. If this happens in development, it may be because the auth started on localhost\n   *   and finished on your computer port (Ex: `128.0.0.*`). This is controlled by the `redirectUrl`\n   *   and `returnUrl`.\n   * - `Current URL \"<URL>\" and original redirect URL \"<URL>\" do not match`: This can occur when the\n   *   redirect URL doesn't match what was initial defined as the `returnUrl`. You can skip this test\n   *   in development by passing `{ skipRedirectCheck: true }` to the function.\n   *\n   * If `type` is set to `success`, the parent window will attempt to close the child window immediately.\n   *\n   * If the error `ERR_WEB_BROWSER_REDIRECT` was thrown, it may mean that the parent window was\n   * reloaded before the auth was completed. In this case you'll need to close the child window manually.\n   *\n   * @platform web\n   */\n  function maybeCompleteAuthSession() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (_ExpoWebBrowser.default.maybeCompleteAuthSession) {\n      return _ExpoWebBrowser.default.maybeCompleteAuthSession(options);\n    }\n    return {\n      type: 'failed',\n      message: 'Not supported on this platform'\n    };\n  }\n  function _processOptions(options) {\n    return {\n      ...options,\n      controlsColor: (0, _reactNative.processColor)(options.controlsColor),\n      toolbarColor: (0, _reactNative.processColor)(options.toolbarColor),\n      secondaryToolbarColor: (0, _reactNative.processColor)(options.secondaryToolbarColor)\n    };\n  }\n  /* Android polyfill for ASWebAuthenticationSession flow */\n  function _authSessionIsNativelySupported() {\n    return _reactNative.Platform.OS !== 'android';\n  }\n  var _redirectSubscription = null;\n  /*\n   * openBrowserAsync on Android doesn't wait until closed, so we need to polyfill\n   * it with AppState\n   */\n  // Store the `resolve` function from a Promise to fire when the AppState\n  // returns to active\n  var _onWebBrowserCloseAndroid = null;\n  // If the initial AppState.currentState is null, we assume that the first call to\n  // AppState#change event is not actually triggered by a real change,\n  // is triggered instead by the bridge capturing the current state\n  // (https://reactnative.dev/docs/appstate#basic-usage)\n  var _isAppStateAvailable = _reactNative.AppState.currentState !== null;\n  function _onAppStateChangeAndroid(state) {\n    if (!_isAppStateAvailable) {\n      _isAppStateAvailable = true;\n      return;\n    }\n    if (state === 'active' && _onWebBrowserCloseAndroid) {\n      _onWebBrowserCloseAndroid();\n    }\n  }\n  function _openBrowserAndWaitAndroidAsync(_x8) {\n    return _openBrowserAndWaitAndroidAsync2.apply(this, arguments);\n  }\n  function _openBrowserAndWaitAndroidAsync2() {\n    _openBrowserAndWaitAndroidAsync2 = (0, _asyncToGenerator2.default)(function* (startUrl) {\n      var browserParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var appStateChangedToActive = new Promise(resolve => {\n        _onWebBrowserCloseAndroid = resolve;\n      });\n      var stateChangeSubscription = _reactNative.AppState.addEventListener('change', _onAppStateChangeAndroid);\n      var result = {\n        type: _WebBrowser.WebBrowserResultType.CANCEL\n      };\n      var type = null;\n      try {\n        var _yield$openBrowserAsy = yield openBrowserAsync(startUrl, browserParams);\n        type = _yield$openBrowserAsy.type;\n      } catch (e) {\n        stateChangeSubscription.remove();\n        _onWebBrowserCloseAndroid = null;\n        throw e;\n      }\n      if (type === 'opened') {\n        yield appStateChangedToActive;\n        result = {\n          type: _WebBrowser.WebBrowserResultType.DISMISS\n        };\n      }\n      stateChangeSubscription.remove();\n      _onWebBrowserCloseAndroid = null;\n      return result;\n    });\n    return _openBrowserAndWaitAndroidAsync2.apply(this, arguments);\n  }\n  function _openAuthSessionPolyfillAsync(_x9, _x10) {\n    return _openAuthSessionPolyfillAsync2.apply(this, arguments);\n  }\n  function _openAuthSessionPolyfillAsync2() {\n    _openAuthSessionPolyfillAsync2 = (0, _asyncToGenerator2.default)(function* (startUrl, returnUrl) {\n      var browserParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      if (_redirectSubscription) {\n        throw new Error(`The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be`);\n      }\n      if (_onWebBrowserCloseAndroid) {\n        throw new Error(`WebBrowser is already open, only one can be open at a time`);\n      }\n      try {\n        if (_reactNative.Platform.OS === 'android') {\n          return yield Promise.race([_openBrowserAndWaitAndroidAsync(startUrl, browserParams), _waitForRedirectAsync(returnUrl)]);\n        } else {\n          return yield Promise.race([openBrowserAsync(startUrl, browserParams), _waitForRedirectAsync(returnUrl)]);\n        }\n      } finally {\n        // We can't dismiss the browser on Android, only call this when it's available.\n        // Users on Android need to manually press the 'x' button in Chrome Custom Tabs, sadly.\n        if (_ExpoWebBrowser.default.dismissBrowser) {\n          _ExpoWebBrowser.default.dismissBrowser();\n        }\n        _stopWaitingForRedirect();\n      }\n    });\n    return _openAuthSessionPolyfillAsync2.apply(this, arguments);\n  }\n  function _stopWaitingForRedirect() {\n    if (!_redirectSubscription) {\n      throw new Error(`The WebBrowser auth session is in an invalid state with no redirect handler when one should be set`);\n    }\n    _redirectSubscription.remove();\n    _redirectSubscription = null;\n  }\n  function _waitForRedirectAsync(returnUrl) {\n    // Note that this Promise never resolves when `returnUrl` is nullish\n    return new Promise(resolve => {\n      var redirectHandler = event => {\n        if (returnUrl && event.url.startsWith(returnUrl)) {\n          resolve({\n            url: event.url,\n            type: 'success'\n          });\n        }\n      };\n      _redirectSubscription = _reactNative.Linking.addEventListener('url', redirectHandler);\n    });\n  }\n});","lineCount":437,"map":[[28,2,1,0],[28,6,1,0,"_expoModulesCore"],[28,22,1,0],[28,25,1,0,"require"],[28,32,1,0],[28,33,1,0,"_dependencyMap"],[28,47,1,0],[29,2,2,0],[29,6,2,0,"_reactNative"],[29,18,2,0],[29,21,2,0,"require"],[29,28,2,0],[29,29,2,0,"_dependencyMap"],[29,43,2,0],[30,2,3,0],[30,6,3,0,"_ExpoWebBrowser"],[30,21,3,0],[30,24,3,0,"_interopRequireDefault"],[30,46,3,0],[30,47,3,0,"require"],[30,54,3,0],[30,55,3,0,"_dependencyMap"],[30,69,3,0],[31,2,4,0],[31,6,4,0,"_WebBrowser"],[31,17,4,0],[31,20,4,0,"require"],[31,27,4,0],[31,28,4,0,"_dependencyMap"],[31,42,4,0],[32,2,6,0],[32,6,6,6,"emptyCustomTabsPackages"],[32,29,6,29],[32,32,6,32],[33,4,7,4,"defaultBrowserPackage"],[33,25,7,25],[33,27,7,27,"undefined"],[33,36,7,36],[34,4,8,4,"preferredBrowserPackage"],[34,27,8,27],[34,29,8,29,"undefined"],[34,38,8,38],[35,4,9,4,"browserPackages"],[35,19,9,19],[35,21,9,21],[35,23,9,23],[36,4,10,4,"servicePackages"],[36,19,10,19],[36,21,10,21],[37,2,11,0],[37,3,11,1],[38,2,12,0],[39,2,13,0],[40,0,14,0],[41,0,15,0],[42,0,16,0],[43,0,17,0],[44,0,18,0],[45,0,19,0],[46,0,20,0],[47,0,21,0],[48,2,13,0],[48,11,22,22,"getCustomTabsSupportingBrowsersAsync"],[48,47,22,58,"getCustomTabsSupportingBrowsersAsync"],[48,48,22,58],[49,4,22,58],[49,11,22,58,"_getCustomTabsSupportingBrowsersAsync"],[49,48,22,58],[49,49,22,58,"apply"],[49,54,22,58],[49,61,22,58,"arguments"],[49,70,22,58],[50,2,22,58],[50,4,33,0],[51,2,34,0],[52,0,35,0],[53,0,36,0],[54,0,37,0],[55,0,38,0],[56,0,39,0],[57,0,40,0],[58,0,41,0],[59,0,42,0],[60,2,34,0],[60,11,34,0,"_getCustomTabsSupportingBrowsersAsync"],[60,49,34,0],[61,4,34,0,"_getCustomTabsSupportingBrowsersAsync"],[61,41,34,0],[61,48,34,0,"_asyncToGenerator2"],[61,66,34,0],[61,67,34,0,"default"],[61,74,34,0],[61,76,22,7],[61,89,22,61],[62,6,23,4],[62,10,23,8],[62,11,23,9,"ExponentWebBrowser"],[62,34,23,27],[62,35,23,28,"getCustomTabsSupportingBrowsersAsync"],[62,71,23,64],[62,73,23,66],[63,8,24,8],[63,14,24,14],[63,18,24,18,"UnavailabilityError"],[63,54,24,37],[63,55,24,38],[63,67,24,50],[63,69,24,52],[63,107,24,90],[63,108,24,91],[64,6,25,4],[65,6,26,4],[65,10,26,8,"Platform"],[65,31,26,16],[65,32,26,17,"OS"],[65,34,26,19],[65,39,26,24],[65,48,26,33],[65,50,26,35],[66,8,27,8],[66,15,27,15,"emptyCustomTabsPackages"],[66,38,27,38],[67,6,28,4],[67,7,28,5],[67,13,29,9],[68,8,30,8],[68,21,30,21,"ExponentWebBrowser"],[68,44,30,39],[68,45,30,40,"getCustomTabsSupportingBrowsersAsync"],[68,81,30,76],[68,82,30,77],[68,83,30,78],[69,6,31,4],[70,4,32,0],[70,5,32,1],[71,4,32,1],[71,11,32,1,"_getCustomTabsSupportingBrowsersAsync"],[71,48,32,1],[71,49,32,1,"apply"],[71,54,32,1],[71,61,32,1,"arguments"],[71,70,32,1],[72,2,32,1],[73,2,32,1],[73,11,43,22,"warmUpAsync"],[73,22,43,33,"warmUpAsync"],[73,23,43,33,"_x"],[73,25,43,33],[74,4,43,33],[74,11,43,33,"_warmUpAsync"],[74,23,43,33],[74,24,43,33,"apply"],[74,29,43,33],[74,36,43,33,"arguments"],[74,45,43,33],[75,2,43,33],[75,4,54,0],[76,2,55,0],[77,0,56,0],[78,0,57,0],[79,0,58,0],[80,0,59,0],[81,0,60,0],[82,0,61,0],[83,0,62,0],[84,0,63,0],[85,0,64,0],[86,0,65,0],[87,2,55,0],[87,11,55,0,"_warmUpAsync"],[87,24,55,0],[88,4,55,0,"_warmUpAsync"],[88,16,55,0],[88,23,55,0,"_asyncToGenerator2"],[88,41,55,0],[88,42,55,0,"default"],[88,49,55,0],[88,51,43,7],[88,62,43,34,"browserPackage"],[88,76,43,48],[88,78,43,50],[89,6,44,4],[89,10,44,8],[89,11,44,9,"ExponentWebBrowser"],[89,34,44,27],[89,35,44,28,"warmUpAsync"],[89,46,44,39],[89,48,44,41],[90,8,45,8],[90,14,45,14],[90,18,45,18,"UnavailabilityError"],[90,54,45,37],[90,55,45,38],[90,67,45,50],[90,69,45,52],[90,82,45,65],[90,83,45,66],[91,6,46,4],[92,6,47,4],[92,10,47,8,"Platform"],[92,31,47,16],[92,32,47,17,"OS"],[92,34,47,19],[92,39,47,24],[92,48,47,33],[92,50,47,35],[93,8,48,8],[93,15,48,15],[93,16,48,16],[93,17,48,17],[94,6,49,4],[94,7,49,5],[94,13,50,9],[95,8,51,8],[95,21,51,21,"ExponentWebBrowser"],[95,44,51,39],[95,45,51,40,"warmUpAsync"],[95,56,51,51],[95,57,51,52,"browserPackage"],[95,71,51,66],[95,72,51,67],[96,6,52,4],[97,4,53,0],[97,5,53,1],[98,4,53,1],[98,11,53,1,"_warmUpAsync"],[98,23,53,1],[98,24,53,1,"apply"],[98,29,53,1],[98,36,53,1,"arguments"],[98,45,53,1],[99,2,53,1],[100,2,53,1],[100,11,66,22,"mayInitWithUrlAsync"],[100,30,66,41,"mayInitWithUrlAsync"],[100,31,66,41,"_x2"],[100,34,66,41],[100,36,66,41,"_x3"],[100,39,66,41],[101,4,66,41],[101,11,66,41,"_mayInitWithUrlAsync"],[101,31,66,41],[101,32,66,41,"apply"],[101,37,66,41],[101,44,66,41,"arguments"],[101,53,66,41],[102,2,66,41],[102,4,77,0],[103,2,78,0],[104,0,79,0],[105,0,80,0],[106,0,81,0],[107,0,82,0],[108,0,83,0],[109,0,84,0],[110,0,85,0],[111,0,86,0],[112,0,87,0],[113,0,88,0],[114,0,89,0],[115,2,78,0],[115,11,78,0,"_mayInitWithUrlAsync"],[115,32,78,0],[116,4,78,0,"_mayInitWithUrlAsync"],[116,24,78,0],[116,31,78,0,"_asyncToGenerator2"],[116,49,78,0],[116,50,78,0,"default"],[116,57,78,0],[116,59,66,7],[116,70,66,42,"url"],[116,73,66,45],[116,75,66,47,"browserPackage"],[116,89,66,61],[116,91,66,63],[117,6,67,4],[117,10,67,8],[117,11,67,9,"ExponentWebBrowser"],[117,34,67,27],[117,35,67,28,"mayInitWithUrlAsync"],[117,54,67,47],[117,56,67,49],[118,8,68,8],[118,14,68,14],[118,18,68,18,"UnavailabilityError"],[118,54,68,37],[118,55,68,38],[118,67,68,50],[118,69,68,52],[118,90,68,73],[118,91,68,74],[119,6,69,4],[120,6,70,4],[120,10,70,8,"Platform"],[120,31,70,16],[120,32,70,17,"OS"],[120,34,70,19],[120,39,70,24],[120,48,70,33],[120,50,70,35],[121,8,71,8],[121,15,71,15],[121,16,71,16],[121,17,71,17],[122,6,72,4],[122,7,72,5],[122,13,73,9],[123,8,74,8],[123,21,74,21,"ExponentWebBrowser"],[123,44,74,39],[123,45,74,40,"mayInitWithUrlAsync"],[123,64,74,59],[123,65,74,60,"url"],[123,68,74,63],[123,70,74,65,"browserPackage"],[123,84,74,79],[123,85,74,80],[124,6,75,4],[125,4,76,0],[125,5,76,1],[126,4,76,1],[126,11,76,1,"_mayInitWithUrlAsync"],[126,31,76,1],[126,32,76,1,"apply"],[126,37,76,1],[126,44,76,1,"arguments"],[126,53,76,1],[127,2,76,1],[128,2,76,1],[128,11,90,22,"coolDownAsync"],[128,24,90,35,"coolDownAsync"],[128,25,90,35,"_x4"],[128,28,90,35],[129,4,90,35],[129,11,90,35,"_coolDownAsync"],[129,25,90,35],[129,26,90,35,"apply"],[129,31,90,35],[129,38,90,35,"arguments"],[129,47,90,35],[130,2,90,35],[130,4,101,0],[131,2,102,0],[132,0,103,0],[133,0,104,0],[134,0,105,0],[135,0,106,0],[136,0,107,0],[137,0,108,0],[138,0,109,0],[139,0,110,0],[140,0,111,0],[141,0,112,0],[142,0,113,0],[143,0,114,0],[144,0,115,0],[145,0,116,0],[146,2,102,0],[146,11,102,0,"_coolDownAsync"],[146,26,102,0],[147,4,102,0,"_coolDownAsync"],[147,18,102,0],[147,25,102,0,"_asyncToGenerator2"],[147,43,102,0],[147,44,102,0,"default"],[147,51,102,0],[147,53,90,7],[147,64,90,36,"browserPackage"],[147,78,90,50],[147,80,90,52],[148,6,91,4],[148,10,91,8],[148,11,91,9,"ExponentWebBrowser"],[148,34,91,27],[148,35,91,28,"coolDownAsync"],[148,48,91,41],[148,50,91,43],[149,8,92,8],[149,14,92,14],[149,18,92,18,"UnavailabilityError"],[149,54,92,37],[149,55,92,38],[149,67,92,50],[149,69,92,52],[149,84,92,67],[149,85,92,68],[150,6,93,4],[151,6,94,4],[151,10,94,8,"Platform"],[151,31,94,16],[151,32,94,17,"OS"],[151,34,94,19],[151,39,94,24],[151,48,94,33],[151,50,94,35],[152,8,95,8],[152,15,95,15],[152,16,95,16],[152,17,95,17],[153,6,96,4],[153,7,96,5],[153,13,97,9],[154,8,98,8],[154,21,98,21,"ExponentWebBrowser"],[154,44,98,39],[154,45,98,40,"coolDownAsync"],[154,58,98,53],[154,59,98,54,"browserPackage"],[154,73,98,68],[154,74,98,69],[155,6,99,4],[156,4,100,0],[156,5,100,1],[157,4,100,1],[157,11,100,1,"_coolDownAsync"],[157,25,100,1],[157,26,100,1,"apply"],[157,31,100,1],[157,38,100,1,"arguments"],[157,47,100,1],[158,2,100,1],[159,2,100,1],[159,11,117,22,"openBrowserAsync"],[159,27,117,38,"openBrowserAsync"],[159,28,117,38,"_x5"],[159,31,117,38],[160,4,117,38],[160,11,117,38,"_openBrowserAsync"],[160,28,117,38],[160,29,117,38,"apply"],[160,34,117,38],[160,41,117,38,"arguments"],[160,50,117,38],[161,2,117,38],[161,4,130,0],[162,2,131,0],[163,0,132,0],[164,0,133,0],[165,0,134,0],[166,0,135,0],[167,0,136,0],[168,2,131,0],[168,11,131,0,"_openBrowserAsync"],[168,29,131,0],[169,4,131,0,"_openBrowserAsync"],[169,21,131,0],[169,28,131,0,"_asyncToGenerator2"],[169,46,131,0],[169,47,131,0,"default"],[169,54,131,0],[169,56,117,7],[169,67,117,39,"url"],[169,70,117,42],[169,72,117,64],[170,6,117,64],[170,10,117,44,"browserParams"],[170,23,117,57],[170,26,117,57,"arguments"],[170,35,117,57],[170,36,117,57,"length"],[170,42,117,57],[170,50,117,57,"arguments"],[170,59,117,57],[170,67,117,57,"undefined"],[170,76,117,57],[170,79,117,57,"arguments"],[170,88,117,57],[170,94,117,60],[170,95,117,61],[170,96,117,62],[171,6,118,4],[171,10,118,8],[171,11,118,9,"ExponentWebBrowser"],[171,34,118,27],[171,35,118,28,"openBrowserAsync"],[171,51,118,44],[171,53,118,46],[172,8,119,8],[172,14,119,14],[172,18,119,18,"UnavailabilityError"],[172,54,119,37],[172,55,119,38],[172,67,119,50],[172,69,119,52],[172,87,119,70],[172,88,119,71],[173,6,120,4],[174,6,121,4],[174,10,121,8,"result"],[174,16,121,14],[175,6,122,4],[175,10,122,8],[176,8,123,8,"result"],[176,14,123,14],[176,23,123,23,"ExponentWebBrowser"],[176,46,123,41],[176,47,123,42,"openBrowserAsync"],[176,63,123,58],[176,64,123,59,"url"],[176,67,123,62],[176,69,123,64,"_processOptions"],[176,84,123,79],[176,85,123,80,"browserParams"],[176,98,123,93],[176,99,123,94],[176,100,123,95],[177,6,124,4],[177,7,124,5],[177,8,125,4],[177,14,125,10],[178,8,126,8],[178,15,126,15],[179,10,126,17,"type"],[179,14,126,21],[179,16,126,23,"WebBrowserResultType"],[179,48,126,43],[179,49,126,44,"LOCKED"],[180,8,126,51],[180,9,126,52],[181,6,127,4],[182,6,128,4],[182,13,128,11,"result"],[182,19,128,17],[183,4,129,0],[183,5,129,1],[184,4,129,1],[184,11,129,1,"_openBrowserAsync"],[184,28,129,1],[184,29,129,1,"apply"],[184,34,129,1],[184,41,129,1,"arguments"],[184,50,129,1],[185,2,129,1],[186,2,137,7],[186,11,137,16,"dismissBrowser"],[186,25,137,30,"dismissBrowser"],[186,26,137,30],[186,28,137,33],[187,4,138,4],[187,11,138,11,"ExponentWebBrowser"],[187,34,138,29],[187,35,138,30,"dismissBrowser"],[187,49,138,44],[187,52,138,47],[187,53,138,48],[188,2,139,0],[189,2,140,0],[190,2,141,0],[191,0,142,0],[192,0,143,0],[193,0,144,0],[194,0,145,0],[195,0,146,0],[196,0,147,0],[197,0,148,0],[198,0,149,0],[199,0,150,0],[200,0,151,0],[201,0,152,0],[202,0,153,0],[203,0,154,0],[204,0,155,0],[205,0,156,0],[206,0,157,0],[207,0,158,0],[208,0,159,0],[209,0,160,0],[210,0,161,0],[211,0,162,0],[212,0,163,0],[213,0,164,0],[214,0,165,0],[215,0,166,0],[216,0,167,0],[217,0,168,0],[218,0,169,0],[219,0,170,0],[220,0,171,0],[221,0,172,0],[222,0,173,0],[223,0,174,0],[224,0,175,0],[225,0,176,0],[226,0,177,0],[227,0,178,0],[228,0,179,0],[229,0,180,0],[230,0,181,0],[231,0,182,0],[232,0,183,0],[233,0,184,0],[234,0,185,0],[235,0,186,0],[236,0,187,0],[237,0,188,0],[238,0,189,0],[239,2,141,0],[239,11,190,22,"openAuthSessionAsync"],[239,31,190,42,"openAuthSessionAsync"],[239,32,190,42,"_x6"],[239,35,190,42],[239,37,190,42,"_x7"],[239,40,190,42],[240,4,190,42],[240,11,190,42,"_openAuthSessionAsync"],[240,32,190,42],[240,33,190,42,"apply"],[240,38,190,42],[240,45,190,42,"arguments"],[240,54,190,42],[241,2,190,42],[242,2,204,0],[243,0,205,0],[244,0,206,0],[245,0,207,0],[246,0,208,0],[247,0,209,0],[248,0,210,0],[249,0,211,0],[250,2,204,0],[250,11,204,0,"_openAuthSessionAsync"],[250,33,204,0],[251,4,204,0,"_openAuthSessionAsync"],[251,25,204,0],[251,32,204,0,"_asyncToGenerator2"],[251,50,204,0],[251,51,204,0,"default"],[251,58,204,0],[251,60,190,7],[251,71,190,43,"url"],[251,74,190,46],[251,76,190,48,"redirectUrl"],[251,87,190,59],[251,89,190,75],[252,6,190,75],[252,10,190,61,"options"],[252,17,190,68],[252,20,190,68,"arguments"],[252,29,190,68],[252,30,190,68,"length"],[252,36,190,68],[252,44,190,68,"arguments"],[252,53,190,68],[252,61,190,68,"undefined"],[252,70,190,68],[252,73,190,68,"arguments"],[252,82,190,68],[252,88,190,71],[252,89,190,72],[252,90,190,73],[253,6,191,4],[253,10,191,8,"_authSessionIsNativelySupported"],[253,41,191,39],[253,42,191,40],[253,43,191,41],[253,45,191,43],[254,8,192,8],[254,12,192,12],[254,13,192,13,"ExponentWebBrowser"],[254,36,192,31],[254,37,192,32,"openAuthSessionAsync"],[254,57,192,52],[254,59,192,54],[255,10,193,12],[255,16,193,18],[255,20,193,22,"UnavailabilityError"],[255,56,193,41],[255,57,193,42],[255,69,193,54],[255,71,193,56],[255,93,193,78],[255,94,193,79],[256,8,194,8],[257,8,195,8],[257,12,195,12],[257,13,195,13],[257,18,195,18],[257,20,195,20],[257,25,195,25],[257,26,195,26],[257,27,195,27,"includes"],[257,35,195,35],[257,36,195,36,"Platform"],[257,57,195,44],[257,58,195,45,"OS"],[257,60,195,47],[257,61,195,48],[257,63,195,50],[258,10,196,12],[258,17,196,19,"ExponentWebBrowser"],[258,40,196,37],[258,41,196,38,"openAuthSessionAsync"],[258,61,196,58],[258,62,196,59,"url"],[258,65,196,62],[258,67,196,64,"redirectUrl"],[258,78,196,75],[258,80,196,77,"_processOptions"],[258,95,196,92],[258,96,196,93,"options"],[258,103,196,100],[258,104,196,101],[258,105,196,102],[259,8,197,8],[260,8,198,8],[260,15,198,15,"ExponentWebBrowser"],[260,38,198,33],[260,39,198,34,"openAuthSessionAsync"],[260,59,198,54],[260,60,198,55,"url"],[260,63,198,58],[260,65,198,60,"redirectUrl"],[260,76,198,71],[260,77,198,72],[261,6,199,4],[261,7,199,5],[261,13,200,9],[262,8,201,8],[262,15,201,15,"_openAuthSessionPolyfillAsync"],[262,44,201,44],[262,45,201,45,"url"],[262,48,201,48],[262,50,201,50,"redirectUrl"],[262,61,201,61],[262,63,201,63,"options"],[262,70,201,70],[262,71,201,71],[263,6,202,4],[264,4,203,0],[264,5,203,1],[265,4,203,1],[265,11,203,1,"_openAuthSessionAsync"],[265,32,203,1],[265,33,203,1,"apply"],[265,38,203,1],[265,45,203,1,"arguments"],[265,54,203,1],[266,2,203,1],[267,2,212,7],[267,11,212,16,"dismissAuthSession"],[267,29,212,34,"dismissAuthSession"],[267,30,212,34],[267,32,212,37],[268,4,213,4],[268,8,213,8,"_authSessionIsNativelySupported"],[268,39,213,39],[268,40,213,40],[268,41,213,41],[268,43,213,43],[269,6,214,8],[269,10,214,12],[269,11,214,13,"ExponentWebBrowser"],[269,34,214,31],[269,35,214,32,"dismissAuthSession"],[269,53,214,50],[269,55,214,52],[270,8,215,12],[270,14,215,18],[270,18,215,22,"UnavailabilityError"],[270,54,215,41],[270,55,215,42],[270,67,215,54],[270,69,215,56],[270,89,215,76],[270,90,215,77],[271,6,216,8],[272,6,217,8,"ExponentWebBrowser"],[272,29,217,26],[272,30,217,27,"dismissAuthSession"],[272,48,217,45],[272,49,217,46],[272,50,217,47],[273,4,218,4],[273,5,218,5],[273,11,219,9],[274,6,220,8],[274,10,220,12],[274,11,220,13,"ExponentWebBrowser"],[274,34,220,31],[274,35,220,32,"dismissBrowser"],[274,49,220,46],[274,51,220,48],[275,8,221,12],[275,14,221,18],[275,18,221,22,"UnavailabilityError"],[275,54,221,41],[275,55,221,42],[275,67,221,54],[275,69,221,56],[275,85,221,72],[275,86,221,73],[276,6,222,8],[277,6,223,8,"ExponentWebBrowser"],[277,29,223,26],[277,30,223,27,"dismissBrowser"],[277,44,223,41],[277,45,223,42],[277,46,223,43],[278,4,224,4],[279,2,225,0],[280,2,226,0],[281,2,227,0],[282,0,228,0],[283,0,229,0],[284,0,230,0],[285,0,231,0],[286,0,232,0],[287,0,233,0],[288,0,234,0],[289,0,235,0],[290,0,236,0],[291,0,237,0],[292,0,238,0],[293,0,239,0],[294,0,240,0],[295,0,241,0],[296,0,242,0],[297,0,243,0],[298,0,244,0],[299,0,245,0],[300,0,246,0],[301,0,247,0],[302,0,248,0],[303,0,249,0],[304,0,250,0],[305,0,251,0],[306,0,252,0],[307,0,253,0],[308,0,254,0],[309,2,255,7],[309,11,255,16,"maybeCompleteAuthSession"],[309,35,255,40,"maybeCompleteAuthSession"],[309,36,255,40],[309,38,255,55],[310,4,255,55],[310,8,255,41,"options"],[310,15,255,48],[310,18,255,48,"arguments"],[310,27,255,48],[310,28,255,48,"length"],[310,34,255,48],[310,42,255,48,"arguments"],[310,51,255,48],[310,59,255,48,"undefined"],[310,68,255,48],[310,71,255,48,"arguments"],[310,80,255,48],[310,86,255,51],[310,87,255,52],[310,88,255,53],[311,4,256,4],[311,8,256,8,"ExponentWebBrowser"],[311,31,256,26],[311,32,256,27,"maybeCompleteAuthSession"],[311,56,256,51],[311,58,256,53],[312,6,257,8],[312,13,257,15,"ExponentWebBrowser"],[312,36,257,33],[312,37,257,34,"maybeCompleteAuthSession"],[312,61,257,58],[312,62,257,59,"options"],[312,69,257,66],[312,70,257,67],[313,4,258,4],[314,4,259,4],[314,11,259,11],[315,6,259,13,"type"],[315,10,259,17],[315,12,259,19],[315,20,259,27],[316,6,259,29,"message"],[316,13,259,36],[316,15,259,38],[317,4,259,71],[317,5,259,72],[318,2,260,0],[319,2,261,0],[319,11,261,9,"_processOptions"],[319,26,261,24,"_processOptions"],[319,27,261,25,"options"],[319,34,261,32],[319,36,261,34],[320,4,262,4],[320,11,262,11],[321,6,263,8],[321,9,263,11,"options"],[321,16,263,18],[322,6,264,8,"controlsColor"],[322,19,264,21],[322,21,264,23],[322,25,264,23,"processColor"],[322,50,264,35],[322,52,264,36,"options"],[322,59,264,43],[322,60,264,44,"controlsColor"],[322,73,264,57],[322,74,264,58],[323,6,265,8,"toolbarColor"],[323,18,265,20],[323,20,265,22],[323,24,265,22,"processColor"],[323,49,265,34],[323,51,265,35,"options"],[323,58,265,42],[323,59,265,43,"toolbarColor"],[323,71,265,55],[323,72,265,56],[324,6,266,8,"secondaryToolbarColor"],[324,27,266,29],[324,29,266,31],[324,33,266,31,"processColor"],[324,58,266,43],[324,60,266,44,"options"],[324,67,266,51],[324,68,266,52,"secondaryToolbarColor"],[324,89,266,73],[325,4,267,4],[325,5,267,5],[326,2,268,0],[327,2,269,0],[328,2,270,0],[328,11,270,9,"_authSessionIsNativelySupported"],[328,42,270,40,"_authSessionIsNativelySupported"],[328,43,270,40],[328,45,270,43],[329,4,271,4],[329,11,271,11,"Platform"],[329,32,271,19],[329,33,271,20,"OS"],[329,35,271,22],[329,40,271,27],[329,49,271,36],[330,2,272,0],[331,2,273,0],[331,6,273,4,"_redirectSubscription"],[331,27,273,25],[331,30,273,28],[331,34,273,32],[332,2,274,0],[333,0,275,0],[334,0,276,0],[335,0,277,0],[336,2,278,0],[337,2,279,0],[338,2,280,0],[338,6,280,4,"_onWebBrowserCloseAndroid"],[338,31,280,29],[338,34,280,32],[338,38,280,36],[339,2,281,0],[340,2,282,0],[341,2,283,0],[342,2,284,0],[343,2,285,0],[343,6,285,4,"_isAppStateAvailable"],[343,26,285,24],[343,29,285,27,"AppState"],[343,50,285,35],[343,51,285,36,"currentState"],[343,63,285,48],[343,68,285,53],[343,72,285,57],[344,2,286,0],[344,11,286,9,"_onAppStateChangeAndroid"],[344,35,286,33,"_onAppStateChangeAndroid"],[344,36,286,34,"state"],[344,41,286,39],[344,43,286,41],[345,4,287,4],[345,8,287,8],[345,9,287,9,"_isAppStateAvailable"],[345,29,287,29],[345,31,287,31],[346,6,288,8,"_isAppStateAvailable"],[346,26,288,28],[346,29,288,31],[346,33,288,35],[347,6,289,8],[348,4,290,4],[349,4,291,4],[349,8,291,8,"state"],[349,13,291,13],[349,18,291,18],[349,26,291,26],[349,30,291,30,"_onWebBrowserCloseAndroid"],[349,55,291,55],[349,57,291,57],[350,6,292,8,"_onWebBrowserCloseAndroid"],[350,31,292,33],[350,32,292,34],[350,33,292,35],[351,4,293,4],[352,2,294,0],[353,2,294,1],[353,11,295,15,"_openBrowserAndWaitAndroidAsync"],[353,42,295,46,"_openBrowserAndWaitAndroidAsync"],[353,43,295,46,"_x8"],[353,46,295,46],[354,4,295,46],[354,11,295,46,"_openBrowserAndWaitAndroidAsync2"],[354,43,295,46],[354,44,295,46,"apply"],[354,49,295,46],[354,56,295,46,"arguments"],[354,65,295,46],[355,2,295,46],[356,2,295,46],[356,11,295,46,"_openBrowserAndWaitAndroidAsync2"],[356,44,295,46],[357,4,295,46,"_openBrowserAndWaitAndroidAsync2"],[357,36,295,46],[357,43,295,46,"_asyncToGenerator2"],[357,61,295,46],[357,62,295,46,"default"],[357,69,295,46],[357,71,295,0],[357,82,295,47,"startUrl"],[357,90,295,55],[357,92,295,77],[358,6,295,77],[358,10,295,57,"browserParams"],[358,23,295,70],[358,26,295,70,"arguments"],[358,35,295,70],[358,36,295,70,"length"],[358,42,295,70],[358,50,295,70,"arguments"],[358,59,295,70],[358,67,295,70,"undefined"],[358,76,295,70],[358,79,295,70,"arguments"],[358,88,295,70],[358,94,295,73],[358,95,295,74],[358,96,295,75],[359,6,296,4],[359,10,296,10,"appStateChangedToActive"],[359,33,296,33],[359,36,296,36],[359,40,296,40,"Promise"],[359,47,296,47],[359,48,296,49,"resolve"],[359,55,296,56],[359,59,296,61],[360,8,297,8,"_onWebBrowserCloseAndroid"],[360,33,297,33],[360,36,297,36,"resolve"],[360,43,297,43],[361,6,298,4],[361,7,298,5],[361,8,298,6],[362,6,299,4],[362,10,299,10,"stateChangeSubscription"],[362,33,299,33],[362,36,299,36,"AppState"],[362,57,299,44],[362,58,299,45,"addEventListener"],[362,74,299,61],[362,75,299,62],[362,83,299,70],[362,85,299,72,"_onAppStateChangeAndroid"],[362,109,299,96],[362,110,299,97],[363,6,300,4],[363,10,300,8,"result"],[363,16,300,14],[363,19,300,17],[364,8,300,19,"type"],[364,12,300,23],[364,14,300,25,"WebBrowserResultType"],[364,46,300,45],[364,47,300,46,"CANCEL"],[365,6,300,53],[365,7,300,54],[366,6,301,4],[366,10,301,8,"type"],[366,14,301,12],[366,17,301,15],[366,21,301,19],[367,6,302,4],[367,10,302,8],[368,8,302,8],[368,12,302,8,"_yield$openBrowserAsy"],[368,33,302,8],[368,42,303,26,"openBrowserAsync"],[368,58,303,42],[368,59,303,43,"startUrl"],[368,67,303,51],[368,69,303,53,"browserParams"],[368,82,303,66],[368,83,303,67],[369,8,303,11,"type"],[369,12,303,15],[369,15,303,15,"_yield$openBrowserAsy"],[369,36,303,15],[369,37,303,11,"type"],[369,41,303,15],[370,6,304,4],[370,7,304,5],[370,8,305,4],[370,15,305,11,"e"],[370,16,305,12],[370,18,305,14],[371,8,306,8,"stateChangeSubscription"],[371,31,306,31],[371,32,306,32,"remove"],[371,38,306,38],[371,39,306,39],[371,40,306,40],[372,8,307,8,"_onWebBrowserCloseAndroid"],[372,33,307,33],[372,36,307,36],[372,40,307,40],[373,8,308,8],[373,14,308,14,"e"],[373,15,308,15],[374,6,309,4],[375,6,310,4],[375,10,310,8,"type"],[375,14,310,12],[375,19,310,17],[375,27,310,25],[375,29,310,27],[376,8,311,8],[376,14,311,14,"appStateChangedToActive"],[376,37,311,37],[377,8,312,8,"result"],[377,14,312,14],[377,17,312,17],[378,10,312,19,"type"],[378,14,312,23],[378,16,312,25,"WebBrowserResultType"],[378,48,312,45],[378,49,312,46,"DISMISS"],[379,8,312,54],[379,9,312,55],[380,6,313,4],[381,6,314,4,"stateChangeSubscription"],[381,29,314,27],[381,30,314,28,"remove"],[381,36,314,34],[381,37,314,35],[381,38,314,36],[382,6,315,4,"_onWebBrowserCloseAndroid"],[382,31,315,29],[382,34,315,32],[382,38,315,36],[383,6,316,4],[383,13,316,11,"result"],[383,19,316,17],[384,4,317,0],[384,5,317,1],[385,4,317,1],[385,11,317,1,"_openBrowserAndWaitAndroidAsync2"],[385,43,317,1],[385,44,317,1,"apply"],[385,49,317,1],[385,56,317,1,"arguments"],[385,65,317,1],[386,2,317,1],[387,2,317,1],[387,11,318,15,"_openAuthSessionPolyfillAsync"],[387,40,318,44,"_openAuthSessionPolyfillAsync"],[387,41,318,44,"_x9"],[387,44,318,44],[387,46,318,44,"_x10"],[387,50,318,44],[388,4,318,44],[388,11,318,44,"_openAuthSessionPolyfillAsync2"],[388,41,318,44],[388,42,318,44,"apply"],[388,47,318,44],[388,54,318,44,"arguments"],[388,63,318,44],[389,2,318,44],[390,2,318,44],[390,11,318,44,"_openAuthSessionPolyfillAsync2"],[390,42,318,44],[391,4,318,44,"_openAuthSessionPolyfillAsync2"],[391,34,318,44],[391,41,318,44,"_asyncToGenerator2"],[391,59,318,44],[391,60,318,44,"default"],[391,67,318,44],[391,69,318,0],[391,80,318,45,"startUrl"],[391,88,318,53],[391,90,318,55,"returnUrl"],[391,99,318,64],[391,101,318,86],[392,6,318,86],[392,10,318,66,"browserParams"],[392,23,318,79],[392,26,318,79,"arguments"],[392,35,318,79],[392,36,318,79,"length"],[392,42,318,79],[392,50,318,79,"arguments"],[392,59,318,79],[392,67,318,79,"undefined"],[392,76,318,79],[392,79,318,79,"arguments"],[392,88,318,79],[392,94,318,82],[392,95,318,83],[392,96,318,84],[393,6,319,4],[393,10,319,8,"_redirectSubscription"],[393,31,319,29],[393,33,319,31],[394,8,320,8],[394,14,320,14],[394,18,320,18,"Error"],[394,23,320,23],[394,24,320,24],[394,128,320,128],[394,129,320,129],[395,6,321,4],[396,6,322,4],[396,10,322,8,"_onWebBrowserCloseAndroid"],[396,35,322,33],[396,37,322,35],[397,8,323,8],[397,14,323,14],[397,18,323,18,"Error"],[397,23,323,23],[397,24,323,24],[397,84,323,84],[397,85,323,85],[398,6,324,4],[399,6,325,4],[399,10,325,8],[400,8,326,8],[400,12,326,12,"Platform"],[400,33,326,20],[400,34,326,21,"OS"],[400,36,326,23],[400,41,326,28],[400,50,326,37],[400,52,326,39],[401,10,327,12],[401,23,327,25,"Promise"],[401,30,327,32],[401,31,327,33,"race"],[401,35,327,37],[401,36,327,38],[401,37,328,16,"_openBrowserAndWaitAndroidAsync"],[401,68,328,47],[401,69,328,48,"startUrl"],[401,77,328,56],[401,79,328,58,"browserParams"],[401,92,328,71],[401,93,328,72],[401,95,329,16,"_waitForRedirectAsync"],[401,116,329,37],[401,117,329,38,"returnUrl"],[401,126,329,47],[401,127,329,48],[401,128,330,13],[401,129,330,14],[402,8,331,8],[402,9,331,9],[402,15,332,13],[403,10,333,12],[403,23,333,25,"Promise"],[403,30,333,32],[403,31,333,33,"race"],[403,35,333,37],[403,36,333,38],[403,37,334,16,"openBrowserAsync"],[403,53,334,32],[403,54,334,33,"startUrl"],[403,62,334,41],[403,64,334,43,"browserParams"],[403,77,334,56],[403,78,334,57],[403,80,335,16,"_waitForRedirectAsync"],[403,101,335,37],[403,102,335,38,"returnUrl"],[403,111,335,47],[403,112,335,48],[403,113,336,13],[403,114,336,14],[404,8,337,8],[405,6,338,4],[405,7,338,5],[405,16,339,12],[406,8,340,8],[407,8,341,8],[408,8,342,8],[408,12,342,12,"ExponentWebBrowser"],[408,35,342,30],[408,36,342,31,"dismissBrowser"],[408,50,342,45],[408,52,342,47],[409,10,343,12,"ExponentWebBrowser"],[409,33,343,30],[409,34,343,31,"dismissBrowser"],[409,48,343,45],[409,49,343,46],[409,50,343,47],[410,8,344,8],[411,8,345,8,"_stopWaitingForRedirect"],[411,31,345,31],[411,32,345,32],[411,33,345,33],[412,6,346,4],[413,4,347,0],[413,5,347,1],[414,4,347,1],[414,11,347,1,"_openAuthSessionPolyfillAsync2"],[414,41,347,1],[414,42,347,1,"apply"],[414,47,347,1],[414,54,347,1,"arguments"],[414,63,347,1],[415,2,347,1],[416,2,348,0],[416,11,348,9,"_stopWaitingForRedirect"],[416,34,348,32,"_stopWaitingForRedirect"],[416,35,348,32],[416,37,348,35],[417,4,349,4],[417,8,349,8],[417,9,349,9,"_redirectSubscription"],[417,30,349,30],[417,32,349,32],[418,6,350,8],[418,12,350,14],[418,16,350,18,"Error"],[418,21,350,23],[418,22,350,24],[418,122,350,124],[418,123,350,125],[419,4,351,4],[420,4,352,4,"_redirectSubscription"],[420,25,352,25],[420,26,352,26,"remove"],[420,32,352,32],[420,33,352,33],[420,34,352,34],[421,4,353,4,"_redirectSubscription"],[421,25,353,25],[421,28,353,28],[421,32,353,32],[422,2,354,0],[423,2,355,0],[423,11,355,9,"_waitForRedirectAsync"],[423,32,355,30,"_waitForRedirectAsync"],[423,33,355,31,"returnUrl"],[423,42,355,40],[423,44,355,42],[424,4,356,4],[425,4,357,4],[425,11,357,11],[425,15,357,15,"Promise"],[425,22,357,22],[425,23,357,24,"resolve"],[425,30,357,31],[425,34,357,36],[426,6,358,8],[426,10,358,14,"redirectHandler"],[426,25,358,29],[426,28,358,33,"event"],[426,33,358,38],[426,37,358,43],[427,8,359,12],[427,12,359,16,"returnUrl"],[427,21,359,25],[427,25,359,29,"event"],[427,30,359,34],[427,31,359,35,"url"],[427,34,359,38],[427,35,359,39,"startsWith"],[427,45,359,49],[427,46,359,50,"returnUrl"],[427,55,359,59],[427,56,359,60],[427,58,359,62],[428,10,360,16,"resolve"],[428,17,360,23],[428,18,360,24],[429,12,360,26,"url"],[429,15,360,29],[429,17,360,31,"event"],[429,22,360,36],[429,23,360,37,"url"],[429,26,360,40],[430,12,360,42,"type"],[430,16,360,46],[430,18,360,48],[431,10,360,58],[431,11,360,59],[431,12,360,60],[432,8,361,12],[433,6,362,8],[433,7,362,9],[434,6,363,8,"_redirectSubscription"],[434,27,363,29],[434,30,363,32,"Linking"],[434,50,363,39],[434,51,363,40,"addEventListener"],[434,67,363,56],[434,68,363,57],[434,73,363,62],[434,75,363,64,"redirectHandler"],[434,90,363,79],[434,91,363,80],[435,4,364,4],[435,5,364,5],[435,6,364,6],[436,2,365,0],[437,0,365,1],[437,3]],"functionMap":{"names":["<global>","getCustomTabsSupportingBrowsersAsync","warmUpAsync","mayInitWithUrlAsync","coolDownAsync","openBrowserAsync","dismissBrowser","openAuthSessionAsync","dismissAuthSession","maybeCompleteAuthSession","_processOptions","_authSessionIsNativelySupported","_onAppStateChangeAndroid","_openBrowserAndWaitAndroidAsync","Promise$argument_0","_openAuthSessionPolyfillAsync","_stopWaitingForRedirect","_waitForRedirectAsync","redirectHandler"],"mappings":"AAA;OCqB;CDU;OEW;CFU;OGa;CHU;OIc;CJU;OKiB;CLY;OMQ;CNE;OOmD;CPa;OQS;CRa;OS8B;CTK;AUC;CVO;AWE;CXE;AYc;CZQ;AaC;gDCC;KDE;CbmB;AeC;Cf6B;AgBC;ChBM;AiBC;uBHE;gCIC;SJI;KGE;CjBC"}},"type":"js/module"}]}