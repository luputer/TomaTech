{"dependencies":[{"name":"./XMLHttpRequest","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":12,"column":23,"index":244},"end":{"line":12,"column":50,"index":271}}],"key":"O+JY6tQeHsIWY50GgaFx/xvik0k="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   */\n\n  'use strict';\n\n  var XMLHttpRequest = require(_dependencyMap[0], \"./XMLHttpRequest\");\n  var originalXHROpen = XMLHttpRequest.prototype.open;\n  var originalXHRSend = XMLHttpRequest.prototype.send;\n  var originalXHRSetRequestHeader = XMLHttpRequest.prototype.setRequestHeader;\n  var openCallback;\n  var sendCallback;\n  var requestHeaderCallback;\n  var headerReceivedCallback;\n  var responseCallback;\n  var isInterceptorEnabled = false;\n\n  /**\n   * A network interceptor which monkey-patches XMLHttpRequest methods\n   * to gather all network requests/responses, in order to show their\n   * information in the React Native inspector development tool.\n   * This supports interception with XMLHttpRequest API, including Fetch API\n   * and any other third party libraries that depend on XMLHttpRequest.\n   */\n  var XHRInterceptor = {\n    /**\n     * Invoked before XMLHttpRequest.open(...) is called.\n     */\n    setOpenCallback(callback) {\n      openCallback = callback;\n    },\n    /**\n     * Invoked before XMLHttpRequest.send(...) is called.\n     */\n    setSendCallback(callback) {\n      sendCallback = callback;\n    },\n    /**\n     * Invoked after xhr's readyState becomes xhr.HEADERS_RECEIVED.\n     */\n    setHeaderReceivedCallback(callback) {\n      headerReceivedCallback = callback;\n    },\n    /**\n     * Invoked after xhr's readyState becomes xhr.DONE.\n     */\n    setResponseCallback(callback) {\n      responseCallback = callback;\n    },\n    /**\n     * Invoked before XMLHttpRequest.setRequestHeader(...) is called.\n     */\n    setRequestHeaderCallback(callback) {\n      requestHeaderCallback = callback;\n    },\n    isInterceptorEnabled() {\n      return isInterceptorEnabled;\n    },\n    enableInterception() {\n      if (isInterceptorEnabled) {\n        return;\n      }\n      // Override `open` method for all XHR requests to intercept the request\n      // method and url, then pass them through the `openCallback`.\n      XMLHttpRequest.prototype.open = function (method, url) {\n        if (openCallback) {\n          openCallback(method, url, this);\n        }\n        originalXHROpen.apply(this, arguments);\n      };\n\n      // Override `setRequestHeader` method for all XHR requests to intercept\n      // the request headers, then pass them through the `requestHeaderCallback`.\n      XMLHttpRequest.prototype.setRequestHeader = function (header, value) {\n        if (requestHeaderCallback) {\n          requestHeaderCallback(header, value, this);\n        }\n        originalXHRSetRequestHeader.apply(this, arguments);\n      };\n\n      // Override `send` method of all XHR requests to intercept the data sent,\n      // register listeners to intercept the response, and invoke the callbacks.\n      XMLHttpRequest.prototype.send = function (data) {\n        if (sendCallback) {\n          sendCallback(data, this);\n        }\n        if (this.addEventListener) {\n          this.addEventListener('readystatechange', () => {\n            if (!isInterceptorEnabled) {\n              return;\n            }\n            if (this.readyState === this.HEADERS_RECEIVED) {\n              var contentTypeString = this.getResponseHeader('Content-Type');\n              var contentLengthString = this.getResponseHeader('Content-Length');\n              var responseContentType, responseSize;\n              if (contentTypeString) {\n                responseContentType = contentTypeString.split(';')[0];\n              }\n              if (contentLengthString) {\n                responseSize = parseInt(contentLengthString, 10);\n              }\n              if (headerReceivedCallback) {\n                headerReceivedCallback(responseContentType, responseSize, this.getAllResponseHeaders(), this);\n              }\n            }\n            if (this.readyState === this.DONE) {\n              if (responseCallback) {\n                responseCallback(this.status, this.timeout, this.response, this.responseURL, this.responseType, this);\n              }\n            }\n          }, false);\n        }\n        originalXHRSend.apply(this, arguments);\n      };\n      isInterceptorEnabled = true;\n    },\n    // Unpatch XMLHttpRequest methods and remove the callbacks.\n    disableInterception() {\n      if (!isInterceptorEnabled) {\n        return;\n      }\n      isInterceptorEnabled = false;\n      XMLHttpRequest.prototype.send = originalXHRSend;\n      XMLHttpRequest.prototype.open = originalXHROpen;\n      XMLHttpRequest.prototype.setRequestHeader = originalXHRSetRequestHeader;\n      responseCallback = null;\n      openCallback = null;\n      sendCallback = null;\n      headerReceivedCallback = null;\n      requestHeaderCallback = null;\n    }\n  };\n  module.exports = XHRInterceptor;\n});","lineCount":140,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[11,2,10,0],[11,14,10,12],[13,2,12,0],[13,6,12,6,"XMLHttpRequest"],[13,20,12,20],[13,23,12,23,"require"],[13,30,12,30],[13,31,12,30,"_dependencyMap"],[13,45,12,30],[13,68,12,49],[13,69,12,50],[14,2,13,0],[14,6,13,6,"originalXHROpen"],[14,21,13,21],[14,24,13,24,"XMLHttpRequest"],[14,38,13,38],[14,39,13,39,"prototype"],[14,48,13,48],[14,49,13,49,"open"],[14,53,13,53],[15,2,14,0],[15,6,14,6,"originalXHRSend"],[15,21,14,21],[15,24,14,24,"XMLHttpRequest"],[15,38,14,38],[15,39,14,39,"prototype"],[15,48,14,48],[15,49,14,49,"send"],[15,53,14,53],[16,2,15,0],[16,6,15,6,"originalXHRSetRequestHeader"],[16,33,15,33],[16,36,15,36,"XMLHttpRequest"],[16,50,15,50],[16,51,15,51,"prototype"],[16,60,15,60],[16,61,15,61,"setRequestHeader"],[16,77,15,77],[17,2,17,0],[17,6,17,4,"openCallback"],[17,18,17,16],[18,2,18,0],[18,6,18,4,"sendCallback"],[18,18,18,16],[19,2,19,0],[19,6,19,4,"requestHeaderCallback"],[19,27,19,25],[20,2,20,0],[20,6,20,4,"headerReceivedCallback"],[20,28,20,26],[21,2,21,0],[21,6,21,4,"responseCallback"],[21,22,21,20],[22,2,23,0],[22,6,23,4,"isInterceptorEnabled"],[22,26,23,24],[22,29,23,27],[22,34,23,32],[24,2,25,0],[25,0,26,0],[26,0,27,0],[27,0,28,0],[28,0,29,0],[29,0,30,0],[30,0,31,0],[31,2,32,0],[31,6,32,6,"XHRInterceptor"],[31,20,32,20],[31,23,32,23],[32,4,33,2],[33,0,34,0],[34,0,35,0],[35,4,36,2,"setOpenCallback"],[35,19,36,17,"setOpenCallback"],[35,20,36,18,"callback"],[35,28,36,26],[35,30,36,28],[36,6,37,4,"openCallback"],[36,18,37,16],[36,21,37,19,"callback"],[36,29,37,27],[37,4,38,2],[37,5,38,3],[38,4,40,2],[39,0,41,0],[40,0,42,0],[41,4,43,2,"setSendCallback"],[41,19,43,17,"setSendCallback"],[41,20,43,18,"callback"],[41,28,43,26],[41,30,43,28],[42,6,44,4,"sendCallback"],[42,18,44,16],[42,21,44,19,"callback"],[42,29,44,27],[43,4,45,2],[43,5,45,3],[44,4,47,2],[45,0,48,0],[46,0,49,0],[47,4,50,2,"setHeaderReceivedCallback"],[47,29,50,27,"setHeaderReceivedCallback"],[47,30,50,28,"callback"],[47,38,50,36],[47,40,50,38],[48,6,51,4,"headerReceivedCallback"],[48,28,51,26],[48,31,51,29,"callback"],[48,39,51,37],[49,4,52,2],[49,5,52,3],[50,4,54,2],[51,0,55,0],[52,0,56,0],[53,4,57,2,"setResponseCallback"],[53,23,57,21,"setResponseCallback"],[53,24,57,22,"callback"],[53,32,57,30],[53,34,57,32],[54,6,58,4,"responseCallback"],[54,22,58,20],[54,25,58,23,"callback"],[54,33,58,31],[55,4,59,2],[55,5,59,3],[56,4,61,2],[57,0,62,0],[58,0,63,0],[59,4,64,2,"setRequestHeaderCallback"],[59,28,64,26,"setRequestHeaderCallback"],[59,29,64,27,"callback"],[59,37,64,35],[59,39,64,37],[60,6,65,4,"requestHeaderCallback"],[60,27,65,25],[60,30,65,28,"callback"],[60,38,65,36],[61,4,66,2],[61,5,66,3],[62,4,68,2,"isInterceptorEnabled"],[62,24,68,22,"isInterceptorEnabled"],[62,25,68,22],[62,27,68,25],[63,6,69,4],[63,13,69,11,"isInterceptorEnabled"],[63,33,69,31],[64,4,70,2],[64,5,70,3],[65,4,72,2,"enableInterception"],[65,22,72,20,"enableInterception"],[65,23,72,20],[65,25,72,23],[66,6,73,4],[66,10,73,8,"isInterceptorEnabled"],[66,30,73,28],[66,32,73,30],[67,8,74,6],[68,6,75,4],[69,6,76,4],[70,6,77,4],[71,6,78,4,"XMLHttpRequest"],[71,20,78,18],[71,21,78,19,"prototype"],[71,30,78,28],[71,31,78,29,"open"],[71,35,78,33],[71,38,78,36],[71,48,78,46,"method"],[71,54,78,52],[71,56,78,54,"url"],[71,59,78,57],[71,61,78,59],[72,8,79,6],[72,12,79,10,"openCallback"],[72,24,79,22],[72,26,79,24],[73,10,80,8,"openCallback"],[73,22,80,20],[73,23,80,21,"method"],[73,29,80,27],[73,31,80,29,"url"],[73,34,80,32],[73,36,80,34],[73,40,80,38],[73,41,80,39],[74,8,81,6],[75,8,82,6,"originalXHROpen"],[75,23,82,21],[75,24,82,22,"apply"],[75,29,82,27],[75,30,82,28],[75,34,82,32],[75,36,82,34,"arguments"],[75,45,82,43],[75,46,82,44],[76,6,83,4],[76,7,83,5],[78,6,85,4],[79,6,86,4],[80,6,87,4,"XMLHttpRequest"],[80,20,87,18],[80,21,87,19,"prototype"],[80,30,87,28],[80,31,87,29,"setRequestHeader"],[80,47,87,45],[80,50,87,48],[80,60,87,58,"header"],[80,66,87,64],[80,68,87,66,"value"],[80,73,87,71],[80,75,87,73],[81,8,88,6],[81,12,88,10,"requestHeaderCallback"],[81,33,88,31],[81,35,88,33],[82,10,89,8,"requestHeaderCallback"],[82,31,89,29],[82,32,89,30,"header"],[82,38,89,36],[82,40,89,38,"value"],[82,45,89,43],[82,47,89,45],[82,51,89,49],[82,52,89,50],[83,8,90,6],[84,8,91,6,"originalXHRSetRequestHeader"],[84,35,91,33],[84,36,91,34,"apply"],[84,41,91,39],[84,42,91,40],[84,46,91,44],[84,48,91,46,"arguments"],[84,57,91,55],[84,58,91,56],[85,6,92,4],[85,7,92,5],[87,6,94,4],[88,6,95,4],[89,6,96,4,"XMLHttpRequest"],[89,20,96,18],[89,21,96,19,"prototype"],[89,30,96,28],[89,31,96,29,"send"],[89,35,96,33],[89,38,96,36],[89,48,96,46,"data"],[89,52,96,50],[89,54,96,52],[90,8,97,6],[90,12,97,10,"sendCallback"],[90,24,97,22],[90,26,97,24],[91,10,98,8,"sendCallback"],[91,22,98,20],[91,23,98,21,"data"],[91,27,98,25],[91,29,98,27],[91,33,98,31],[91,34,98,32],[92,8,99,6],[93,8,100,6],[93,12,100,10],[93,16,100,14],[93,17,100,15,"addEventListener"],[93,33,100,31],[93,35,100,33],[94,10,101,8],[94,14,101,12],[94,15,101,13,"addEventListener"],[94,31,101,29],[94,32,102,10],[94,50,102,28],[94,52,103,10],[94,58,103,16],[95,12,104,12],[95,16,104,16],[95,17,104,17,"isInterceptorEnabled"],[95,37,104,37],[95,39,104,39],[96,14,105,14],[97,12,106,12],[98,12,107,12],[98,16,107,16],[98,20,107,20],[98,21,107,21,"readyState"],[98,31,107,31],[98,36,107,36],[98,40,107,40],[98,41,107,41,"HEADERS_RECEIVED"],[98,57,107,57],[98,59,107,59],[99,14,108,14],[99,18,108,20,"contentTypeString"],[99,35,108,37],[99,38,108,40],[99,42,108,44],[99,43,108,45,"getResponseHeader"],[99,60,108,62],[99,61,108,63],[99,75,108,77],[99,76,108,78],[100,14,109,14],[100,18,109,20,"contentLengthString"],[100,37,109,39],[100,40,110,16],[100,44,110,20],[100,45,110,21,"getResponseHeader"],[100,62,110,38],[100,63,110,39],[100,79,110,55],[100,80,110,56],[101,14,111,14],[101,18,111,18,"responseContentType"],[101,37,111,37],[101,39,111,39,"responseSize"],[101,51,111,51],[102,14,112,14],[102,18,112,18,"contentTypeString"],[102,35,112,35],[102,37,112,37],[103,16,113,16,"responseContentType"],[103,35,113,35],[103,38,113,38,"contentTypeString"],[103,55,113,55],[103,56,113,56,"split"],[103,61,113,61],[103,62,113,62],[103,65,113,65],[103,66,113,66],[103,67,113,67],[103,68,113,68],[103,69,113,69],[104,14,114,14],[105,14,115,14],[105,18,115,18,"contentLengthString"],[105,37,115,37],[105,39,115,39],[106,16,116,16,"responseSize"],[106,28,116,28],[106,31,116,31,"parseInt"],[106,39,116,39],[106,40,116,40,"contentLengthString"],[106,59,116,59],[106,61,116,61],[106,63,116,63],[106,64,116,64],[107,14,117,14],[108,14,118,14],[108,18,118,18,"headerReceivedCallback"],[108,40,118,40],[108,42,118,42],[109,16,119,16,"headerReceivedCallback"],[109,38,119,38],[109,39,120,18,"responseContentType"],[109,58,120,37],[109,60,121,18,"responseSize"],[109,72,121,30],[109,74,122,18],[109,78,122,22],[109,79,122,23,"getAllResponseHeaders"],[109,100,122,44],[109,101,122,45],[109,102,122,46],[109,104,123,18],[109,108,124,16],[109,109,124,17],[110,14,125,14],[111,12,126,12],[112,12,127,12],[112,16,127,16],[112,20,127,20],[112,21,127,21,"readyState"],[112,31,127,31],[112,36,127,36],[112,40,127,40],[112,41,127,41,"DONE"],[112,45,127,45],[112,47,127,47],[113,14,128,14],[113,18,128,18,"responseCallback"],[113,34,128,34],[113,36,128,36],[114,16,129,16,"responseCallback"],[114,32,129,32],[114,33,130,18],[114,37,130,22],[114,38,130,23,"status"],[114,44,130,29],[114,46,131,18],[114,50,131,22],[114,51,131,23,"timeout"],[114,58,131,30],[114,60,132,18],[114,64,132,22],[114,65,132,23,"response"],[114,73,132,31],[114,75,133,18],[114,79,133,22],[114,80,133,23,"responseURL"],[114,91,133,34],[114,93,134,18],[114,97,134,22],[114,98,134,23,"responseType"],[114,110,134,35],[114,112,135,18],[114,116,136,16],[114,117,136,17],[115,14,137,14],[116,12,138,12],[117,10,139,10],[117,11,139,11],[117,13,140,10],[117,18,141,8],[117,19,141,9],[118,8,142,6],[119,8,143,6,"originalXHRSend"],[119,23,143,21],[119,24,143,22,"apply"],[119,29,143,27],[119,30,143,28],[119,34,143,32],[119,36,143,34,"arguments"],[119,45,143,43],[119,46,143,44],[120,6,144,4],[120,7,144,5],[121,6,145,4,"isInterceptorEnabled"],[121,26,145,24],[121,29,145,27],[121,33,145,31],[122,4,146,2],[122,5,146,3],[123,4,148,2],[124,4,149,2,"disableInterception"],[124,23,149,21,"disableInterception"],[124,24,149,21],[124,26,149,24],[125,6,150,4],[125,10,150,8],[125,11,150,9,"isInterceptorEnabled"],[125,31,150,29],[125,33,150,31],[126,8,151,6],[127,6,152,4],[128,6,153,4,"isInterceptorEnabled"],[128,26,153,24],[128,29,153,27],[128,34,153,32],[129,6,154,4,"XMLHttpRequest"],[129,20,154,18],[129,21,154,19,"prototype"],[129,30,154,28],[129,31,154,29,"send"],[129,35,154,33],[129,38,154,36,"originalXHRSend"],[129,53,154,51],[130,6,155,4,"XMLHttpRequest"],[130,20,155,18],[130,21,155,19,"prototype"],[130,30,155,28],[130,31,155,29,"open"],[130,35,155,33],[130,38,155,36,"originalXHROpen"],[130,53,155,51],[131,6,156,4,"XMLHttpRequest"],[131,20,156,18],[131,21,156,19,"prototype"],[131,30,156,28],[131,31,156,29,"setRequestHeader"],[131,47,156,45],[131,50,156,48,"originalXHRSetRequestHeader"],[131,77,156,75],[132,6,157,4,"responseCallback"],[132,22,157,20],[132,25,157,23],[132,29,157,27],[133,6,158,4,"openCallback"],[133,18,158,16],[133,21,158,19],[133,25,158,23],[134,6,159,4,"sendCallback"],[134,18,159,16],[134,21,159,19],[134,25,159,23],[135,6,160,4,"headerReceivedCallback"],[135,28,160,26],[135,31,160,29],[135,35,160,33],[136,6,161,4,"requestHeaderCallback"],[136,27,161,25],[136,30,161,28],[136,34,161,32],[137,4,162,2],[138,2,163,0],[138,3,163,1],[139,2,165,0,"module"],[139,8,165,6],[139,9,165,7,"exports"],[139,16,165,14],[139,19,165,17,"XHRInterceptor"],[139,33,165,31],[140,0,165,32],[140,3]],"functionMap":{"names":["<global>","setOpenCallback","setSendCallback","setHeaderReceivedCallback","setResponseCallback","setRequestHeaderCallback","isInterceptorEnabled","enableInterception","XMLHttpRequest.prototype.open","XMLHttpRequest.prototype.setRequestHeader","XMLHttpRequest.prototype.send","addEventListener$argument_1","disableInterception"],"mappings":"AAA;ECmC;GDE;EEK;GFE;EGK;GHE;EIK;GJE;EKK;GLE;EME;GNE;EOE;oCCM;KDK;gDEI;KFK;oCGI;UCO;WDoC;KHK;GPE;EYG;GZa"}},"type":"js/module"}]}