{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":320,"column":38,"index":13301}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@react-navigation/core","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":227,"index":242}}],"key":"i0wMeuFkK29k6tj4be7EOXJEiJA="}},{"name":"fast-deep-equal","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":4,"column":0,"index":243},"end":{"line":4,"column":38,"index":281}}],"key":"mKCaXdMog1sUnz6w1YFznVR6qsA="}},{"name":"react","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":5,"column":0,"index":282},"end":{"line":5,"column":31,"index":313}}],"key":"a4EMkKqamYWCMMPV7UeQlqGQ+ks="}},{"name":"./createMemoryHistory.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":6,"column":0,"index":314},"end":{"line":6,"column":63,"index":377}}],"key":"7IZlRNFPThcpl0Uy+sQmzfP7AfE="}},{"name":"./ServerContext.js","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":7,"column":0,"index":378},"end":{"line":7,"column":51,"index":429}}],"key":"zLB3DrhG14iYHCmlocz31+L8MUw="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.series = void 0;\n  exports.useLinking = useLinking;\n  var _core = require(_dependencyMap[1], \"@react-navigation/core\");\n  var _fastDeepEqual = _interopRequireDefault(require(_dependencyMap[2], \"fast-deep-equal\"));\n  var React = _interopRequireWildcard(require(_dependencyMap[3], \"react\"));\n  var _createMemoryHistory = require(_dependencyMap[4], \"./createMemoryHistory.js\");\n  var _ServerContext = require(_dependencyMap[5], \"./ServerContext.js\");\n  function _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }\n  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\n  /**\n   * Find the matching navigation state that changed between 2 navigation states\n   * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n   */\n  const findMatchingState = (a, b) => {\n    if (a === undefined || b === undefined || a.key !== b.key) {\n      return [undefined, undefined];\n    }\n\n    // Tab and drawer will have `history` property, but stack will have history in `routes`\n    const aHistoryLength = a.history ? a.history.length : a.routes.length;\n    const bHistoryLength = b.history ? b.history.length : b.routes.length;\n    const aRoute = a.routes[a.index];\n    const bRoute = b.routes[b.index];\n    const aChildState = aRoute.state;\n    const bChildState = bRoute.state;\n\n    // Stop here if this is the state object that changed:\n    // - history length is different\n    // - focused routes are different\n    // - one of them doesn't have child state\n    // - child state keys are different\n    if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n      return [a, b];\n    }\n    return findMatchingState(aChildState, bChildState);\n  };\n\n  /**\n   * Run async function in series as it's called.\n   */\n  const series = cb => {\n    let queue = Promise.resolve();\n    const callback = () => {\n      // eslint-disable-next-line promise/no-callback-in-promise\n      queue = queue.then(cb);\n    };\n    return callback;\n  };\n  exports.series = series;\n  const linkingHandlers = [];\n  function useLinking(ref, {\n    enabled = true,\n    config,\n    getStateFromPath = _core.getStateFromPath,\n    getPathFromState = _core.getPathFromState,\n    getActionFromState = _core.getActionFromState\n  }, onUnhandledLinking) {\n    const independent = (0, _core.useNavigationIndependentTree)();\n    React.useEffect(() => {\n      if (process.env.NODE_ENV === 'production') {\n        return undefined;\n      }\n      if (independent) {\n        return undefined;\n      }\n      if (enabled !== false && linkingHandlers.length) {\n        console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:', \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\", '- Only a single instance of the root component is rendered'].join('\\n').trim());\n      }\n      const handler = Symbol();\n      if (enabled !== false) {\n        linkingHandlers.push(handler);\n      }\n      return () => {\n        const index = linkingHandlers.indexOf(handler);\n        if (index > -1) {\n          linkingHandlers.splice(index, 1);\n        }\n      };\n    }, [enabled, independent]);\n    const [history] = React.useState(_createMemoryHistory.createMemoryHistory);\n\n    // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n    // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n    // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n    const enabledRef = React.useRef(enabled);\n    const configRef = React.useRef(config);\n    const getStateFromPathRef = React.useRef(getStateFromPath);\n    const getPathFromStateRef = React.useRef(getPathFromState);\n    const getActionFromStateRef = React.useRef(getActionFromState);\n    React.useEffect(() => {\n      enabledRef.current = enabled;\n      configRef.current = config;\n      getStateFromPathRef.current = getStateFromPath;\n      getPathFromStateRef.current = getPathFromState;\n      getActionFromStateRef.current = getActionFromState;\n    });\n    const validateRoutesNotExistInRootState = React.useCallback(state => {\n      const navigation = ref.current;\n      const rootState = navigation?.getRootState();\n      // Make sure that the routes in the state exist in the root navigator\n      // Otherwise there's an error in the linking configuration\n      return state?.routes.some(r => !rootState?.routeNames.includes(r.name));\n    }, [ref]);\n    const server = React.useContext(_ServerContext.ServerContext);\n    const getInitialState = React.useCallback(() => {\n      let value;\n      if (enabledRef.current) {\n        const location = server?.location ?? (true ? window.location : undefined);\n        const path = location ? location.pathname + location.search : undefined;\n        if (path) {\n          value = getStateFromPathRef.current(path, configRef.current);\n        }\n\n        // If the link were handled, it gets cleared in NavigationContainer\n        onUnhandledLinking(path);\n      }\n      const thenable = {\n        then(onfulfilled) {\n          return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n        },\n        catch() {\n          return thenable;\n        }\n      };\n      return thenable;\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    const previousIndexRef = React.useRef(undefined);\n    const previousStateRef = React.useRef(undefined);\n    const pendingPopStatePathRef = React.useRef(undefined);\n    React.useEffect(() => {\n      previousIndexRef.current = history.index;\n      return history.listen(() => {\n        const navigation = ref.current;\n        if (!navigation || !enabled) {\n          return;\n        }\n        const {\n          location\n        } = window;\n        const path = location.pathname + location.search;\n        const index = history.index;\n        const previousIndex = previousIndexRef.current ?? 0;\n        previousIndexRef.current = index;\n        pendingPopStatePathRef.current = path;\n\n        // When browser back/forward is clicked, we first need to check if state object for this index exists\n        // If it does we'll reset to that state object\n        // Otherwise, we'll handle it like a regular deep link\n        const record = history.get(index);\n        if (record?.path === path && record?.state) {\n          navigation.resetRoot(record.state);\n          return;\n        }\n        const state = getStateFromPathRef.current(path, configRef.current);\n\n        // We should only dispatch an action when going forward\n        // Otherwise the action will likely add items to history, which would mess things up\n        if (state) {\n          // If the link were handled, it gets cleared in NavigationContainer\n          onUnhandledLinking(path);\n          // Make sure that the routes in the state exist in the root navigator\n          // Otherwise there's an error in the linking configuration\n          if (validateRoutesNotExistInRootState(state)) {\n            return;\n          }\n          if (index > previousIndex) {\n            const action = getActionFromStateRef.current(state, configRef.current);\n            if (action !== undefined) {\n              try {\n                navigation.dispatch(action);\n              } catch (e) {\n                // Ignore any errors from deep linking.\n                // This could happen in case of malformed links, navigation object not being initialized etc.\n                console.warn(`An error occurred when trying to handle the link '${path}': ${typeof e === 'object' && e != null && 'message' in e ? e.message : e}`);\n              }\n            } else {\n              navigation.resetRoot(state);\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          // if current path didn't return any state, we should revert to initial state\n          navigation.resetRoot(state);\n        }\n      });\n    }, [enabled, history, onUnhandledLinking, ref, validateRoutesNotExistInRootState]);\n    React.useEffect(() => {\n      if (!enabled) {\n        return;\n      }\n      const getPathForRoute = (route, state) => {\n        let path;\n\n        // If the `route` object contains a `path`, use that path as long as `route.name` and `params` still match\n        // This makes sure that we preserve the original URL for wildcard routes\n        if (route?.path) {\n          const stateForPath = getStateFromPathRef.current(route.path, configRef.current);\n          if (stateForPath) {\n            const focusedRoute = (0, _core.findFocusedRoute)(stateForPath);\n            if (focusedRoute && focusedRoute.name === route.name && (0, _fastDeepEqual.default)(focusedRoute.params, route.params)) {\n              path = route.path;\n            }\n          }\n        }\n        if (path == null) {\n          path = getPathFromStateRef.current(state, configRef.current);\n        }\n        const previousRoute = previousStateRef.current ? (0, _core.findFocusedRoute)(previousStateRef.current) : undefined;\n\n        // Preserve the hash if the route didn't change\n        if (previousRoute && route && 'key' in previousRoute && 'key' in route && previousRoute.key === route.key) {\n          path = path + location.hash;\n        }\n        return path;\n      };\n      if (ref.current) {\n        // We need to record the current metadata on the first render if they aren't set\n        // This will allow the initial state to be in the history entry\n        const state = ref.current.getRootState();\n        if (state) {\n          const route = (0, _core.findFocusedRoute)(state);\n          const path = getPathForRoute(route, state);\n          if (previousStateRef.current === undefined) {\n            previousStateRef.current = state;\n          }\n          history.replace({\n            path,\n            state\n          });\n        }\n      }\n      const onStateChange = async () => {\n        const navigation = ref.current;\n        if (!navigation || !enabled) {\n          return;\n        }\n        const previousState = previousStateRef.current;\n        const state = navigation.getRootState();\n\n        // root state may not available, for example when root navigators switch inside the container\n        if (!state) {\n          return;\n        }\n        const pendingPath = pendingPopStatePathRef.current;\n        const route = (0, _core.findFocusedRoute)(state);\n        const path = getPathForRoute(route, state);\n        previousStateRef.current = state;\n        pendingPopStatePathRef.current = undefined;\n\n        // To detect the kind of state change, we need to:\n        // - Find the common focused navigation state in previous and current state\n        // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n        // - If no common focused navigation state found, it's a replace\n        const [previousFocusedState, focusedState] = findMatchingState(previousState, state);\n        if (previousFocusedState && focusedState &&\n        // We should only handle push/pop if path changed from what was in last `popstate`\n        // Otherwise it's likely a change triggered by `popstate`\n        path !== pendingPath) {\n          const historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n          if (historyDelta > 0) {\n            // If history length is increased, we should pushState\n            // Note that path might not actually change here, for example, drawer open should pushState\n            history.push({\n              path,\n              state\n            });\n          } else if (historyDelta < 0) {\n            // If history length is decreased, i.e. entries were removed, we want to go back\n\n            const nextIndex = history.backIndex({\n              path\n            });\n            const currentIndex = history.index;\n            try {\n              if (nextIndex !== -1 && nextIndex < currentIndex &&\n              // We should only go back if the entry exists and it's less than current index\n              history.get(nextIndex - currentIndex)) {\n                // An existing entry for this path exists and it's less than current index, go back to that\n                await history.go(nextIndex - currentIndex);\n              } else {\n                // We couldn't find an existing entry to go back to, so we'll go back by the delta\n                // This won't be correct if multiple routes were pushed in one go before\n                // Usually this shouldn't happen and this is a fallback for that\n                await history.go(historyDelta);\n              }\n\n              // Store the updated state as well as fix the path if incorrect\n              history.replace({\n                path,\n                state\n              });\n            } catch (e) {\n              // The navigation was interrupted\n            }\n          } else {\n            // If history length is unchanged, we want to replaceState\n            history.replace({\n              path,\n              state\n            });\n          }\n        } else {\n          // If no common navigation state was found, assume it's a replace\n          // This would happen if the user did a reset/conditionally changed navigators\n          history.replace({\n            path,\n            state\n          });\n        }\n      };\n\n      // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n      // This could happen since `history.go(n)` is asynchronous\n      // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n      return ref.current?.addListener('state', series(onStateChange));\n    }, [enabled, history, ref]);\n    return {\n      getInitialState\n    };\n  }\n});","lineCount":330,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_interopRequireDefault"],[4,28,1,13],[4,31,1,13,"require"],[4,38,1,13],[4,39,1,13,"_dependencyMap"],[4,53,1,13],[5,2,1,13,"Object"],[5,8,1,13],[5,9,1,13,"defineProperty"],[5,23,1,13],[5,24,1,13,"exports"],[5,31,1,13],[6,4,1,13,"value"],[6,9,1,13],[7,2,1,13],[8,2,1,13,"exports"],[8,9,1,13],[8,10,1,13,"series"],[8,16,1,13],[9,2,1,13,"exports"],[9,9,1,13],[9,10,1,13,"useLinking"],[9,20,1,13],[9,23,1,13,"useLinking"],[9,33,1,13],[10,2,3,0],[10,6,3,0,"_core"],[10,11,3,0],[10,14,3,0,"require"],[10,21,3,0],[10,22,3,0,"_dependencyMap"],[10,36,3,0],[11,2,4,0],[11,6,4,0,"_fastDeepEqual"],[11,20,4,0],[11,23,4,0,"_interopRequireDefault"],[11,45,4,0],[11,46,4,0,"require"],[11,53,4,0],[11,54,4,0,"_dependencyMap"],[11,68,4,0],[12,2,5,0],[12,6,5,0,"React"],[12,11,5,0],[12,14,5,0,"_interopRequireWildcard"],[12,37,5,0],[12,38,5,0,"require"],[12,45,5,0],[12,46,5,0,"_dependencyMap"],[12,60,5,0],[13,2,6,0],[13,6,6,0,"_createMemoryHistory"],[13,26,6,0],[13,29,6,0,"require"],[13,36,6,0],[13,37,6,0,"_dependencyMap"],[13,51,6,0],[14,2,7,0],[14,6,7,0,"_ServerContext"],[14,20,7,0],[14,23,7,0,"require"],[14,30,7,0],[14,31,7,0,"_dependencyMap"],[14,45,7,0],[15,2,7,51],[15,11,7,51,"_getRequireWildcardCache"],[15,36,7,51,"e"],[15,37,7,51],[15,66,7,51,"WeakMap"],[15,73,7,51],[15,92,7,51,"r"],[15,93,7,51],[15,100,7,51,"WeakMap"],[15,107,7,51],[15,111,7,51,"t"],[15,112,7,51],[15,119,7,51,"WeakMap"],[15,126,7,51],[15,138,7,51,"_getRequireWildcardCache"],[15,162,7,51],[15,174,7,51,"_getRequireWildcardCache"],[15,175,7,51,"e"],[15,176,7,51],[15,187,7,51,"e"],[15,188,7,51],[15,191,7,51,"t"],[15,192,7,51],[15,195,7,51,"r"],[15,196,7,51],[15,201,7,51,"e"],[15,202,7,51],[16,2,7,51],[16,11,7,51,"_interopRequireWildcard"],[16,35,7,51,"e"],[16,36,7,51],[16,38,7,51,"r"],[16,39,7,51],[16,48,7,51,"r"],[16,49,7,51],[16,53,7,51,"e"],[16,54,7,51],[16,58,7,51,"e"],[16,59,7,51],[16,60,7,51,"__esModule"],[16,70,7,51],[16,79,7,51,"e"],[16,80,7,51],[16,95,7,51,"e"],[16,96,7,51],[16,119,7,51,"e"],[16,120,7,51],[16,145,7,51,"e"],[16,146,7,51],[16,157,7,51,"default"],[16,164,7,51],[16,166,7,51,"e"],[16,167,7,51],[16,175,7,51,"t"],[16,176,7,51],[16,179,7,51,"_getRequireWildcardCache"],[16,203,7,51],[16,204,7,51,"r"],[16,205,7,51],[16,212,7,51,"t"],[16,213,7,51],[16,217,7,51,"t"],[16,218,7,51],[16,219,7,51,"has"],[16,222,7,51],[16,223,7,51,"e"],[16,224,7,51],[16,234,7,51,"t"],[16,235,7,51],[16,236,7,51,"get"],[16,239,7,51],[16,240,7,51,"e"],[16,241,7,51],[16,248,7,51,"n"],[16,249,7,51],[16,254,7,51,"__proto__"],[16,263,7,51],[16,273,7,51,"a"],[16,274,7,51],[16,277,7,51,"Object"],[16,283,7,51],[16,284,7,51,"defineProperty"],[16,298,7,51],[16,302,7,51,"Object"],[16,308,7,51],[16,309,7,51,"getOwnPropertyDescriptor"],[16,333,7,51],[16,344,7,51,"u"],[16,345,7,51],[16,349,7,51,"e"],[16,350,7,51],[16,370,7,51,"u"],[16,371,7,51],[16,378,7,51,"hasOwnProperty"],[16,392,7,51],[16,393,7,51,"call"],[16,397,7,51],[16,398,7,51,"e"],[16,399,7,51],[16,401,7,51,"u"],[16,402,7,51],[16,411,7,51,"i"],[16,412,7,51],[16,415,7,51,"a"],[16,416,7,51],[16,419,7,51,"Object"],[16,425,7,51],[16,426,7,51,"getOwnPropertyDescriptor"],[16,450,7,51],[16,451,7,51,"e"],[16,452,7,51],[16,454,7,51,"u"],[16,455,7,51],[16,465,7,51,"i"],[16,466,7,51],[16,471,7,51,"i"],[16,472,7,51],[16,473,7,51,"get"],[16,476,7,51],[16,480,7,51,"i"],[16,481,7,51],[16,482,7,51,"set"],[16,485,7,51],[16,489,7,51,"Object"],[16,495,7,51],[16,496,7,51,"defineProperty"],[16,510,7,51],[16,511,7,51,"n"],[16,512,7,51],[16,514,7,51,"u"],[16,515,7,51],[16,517,7,51,"i"],[16,518,7,51],[16,522,7,51,"n"],[16,523,7,51],[16,524,7,51,"u"],[16,525,7,51],[16,529,7,51,"e"],[16,530,7,51],[16,531,7,51,"u"],[16,532,7,51],[16,544,7,51,"n"],[16,545,7,51],[16,546,7,51,"default"],[16,553,7,51],[16,556,7,51,"e"],[16,557,7,51],[16,559,7,51,"t"],[16,560,7,51],[16,564,7,51,"t"],[16,565,7,51],[16,566,7,51,"set"],[16,569,7,51],[16,570,7,51,"e"],[16,571,7,51],[16,573,7,51,"n"],[16,574,7,51],[16,577,7,51,"n"],[16,578,7,51],[17,2,8,0],[18,0,9,0],[19,0,10,0],[20,0,11,0],[21,2,12,0],[21,8,12,6,"findMatchingState"],[21,25,12,23],[21,28,12,26,"findMatchingState"],[21,29,12,27,"a"],[21,30,12,28],[21,32,12,30,"b"],[21,33,12,31],[21,38,12,36],[22,4,13,2],[22,8,13,6,"a"],[22,9,13,7],[22,14,13,12,"undefined"],[22,23,13,21],[22,27,13,25,"b"],[22,28,13,26],[22,33,13,31,"undefined"],[22,42,13,40],[22,46,13,44,"a"],[22,47,13,45],[22,48,13,46,"key"],[22,51,13,49],[22,56,13,54,"b"],[22,57,13,55],[22,58,13,56,"key"],[22,61,13,59],[22,63,13,61],[23,6,14,4],[23,13,14,11],[23,14,14,12,"undefined"],[23,23,14,21],[23,25,14,23,"undefined"],[23,34,14,32],[23,35,14,33],[24,4,15,2],[26,4,17,2],[27,4,18,2],[27,10,18,8,"aHistoryLength"],[27,24,18,22],[27,27,18,25,"a"],[27,28,18,26],[27,29,18,27,"history"],[27,36,18,34],[27,39,18,37,"a"],[27,40,18,38],[27,41,18,39,"history"],[27,48,18,46],[27,49,18,47,"length"],[27,55,18,53],[27,58,18,56,"a"],[27,59,18,57],[27,60,18,58,"routes"],[27,66,18,64],[27,67,18,65,"length"],[27,73,18,71],[28,4,19,2],[28,10,19,8,"bHistoryLength"],[28,24,19,22],[28,27,19,25,"b"],[28,28,19,26],[28,29,19,27,"history"],[28,36,19,34],[28,39,19,37,"b"],[28,40,19,38],[28,41,19,39,"history"],[28,48,19,46],[28,49,19,47,"length"],[28,55,19,53],[28,58,19,56,"b"],[28,59,19,57],[28,60,19,58,"routes"],[28,66,19,64],[28,67,19,65,"length"],[28,73,19,71],[29,4,20,2],[29,10,20,8,"aRoute"],[29,16,20,14],[29,19,20,17,"a"],[29,20,20,18],[29,21,20,19,"routes"],[29,27,20,25],[29,28,20,26,"a"],[29,29,20,27],[29,30,20,28,"index"],[29,35,20,33],[29,36,20,34],[30,4,21,2],[30,10,21,8,"bRoute"],[30,16,21,14],[30,19,21,17,"b"],[30,20,21,18],[30,21,21,19,"routes"],[30,27,21,25],[30,28,21,26,"b"],[30,29,21,27],[30,30,21,28,"index"],[30,35,21,33],[30,36,21,34],[31,4,22,2],[31,10,22,8,"aChildState"],[31,21,22,19],[31,24,22,22,"aRoute"],[31,30,22,28],[31,31,22,29,"state"],[31,36,22,34],[32,4,23,2],[32,10,23,8,"bChildState"],[32,21,23,19],[32,24,23,22,"bRoute"],[32,30,23,28],[32,31,23,29,"state"],[32,36,23,34],[34,4,25,2],[35,4,26,2],[36,4,27,2],[37,4,28,2],[38,4,29,2],[39,4,30,2],[39,8,30,6,"aHistoryLength"],[39,22,30,20],[39,27,30,25,"bHistoryLength"],[39,41,30,39],[39,45,30,43,"aRoute"],[39,51,30,49],[39,52,30,50,"key"],[39,55,30,53],[39,60,30,58,"bRoute"],[39,66,30,64],[39,67,30,65,"key"],[39,70,30,68],[39,74,30,72,"aChildState"],[39,85,30,83],[39,90,30,88,"undefined"],[39,99,30,97],[39,103,30,101,"bChildState"],[39,114,30,112],[39,119,30,117,"undefined"],[39,128,30,126],[39,132,30,130,"aChildState"],[39,143,30,141],[39,144,30,142,"key"],[39,147,30,145],[39,152,30,150,"bChildState"],[39,163,30,161],[39,164,30,162,"key"],[39,167,30,165],[39,169,30,167],[40,6,31,4],[40,13,31,11],[40,14,31,12,"a"],[40,15,31,13],[40,17,31,15,"b"],[40,18,31,16],[40,19,31,17],[41,4,32,2],[42,4,33,2],[42,11,33,9,"findMatchingState"],[42,28,33,26],[42,29,33,27,"aChildState"],[42,40,33,38],[42,42,33,40,"bChildState"],[42,53,33,51],[42,54,33,52],[43,2,34,0],[43,3,34,1],[45,2,36,0],[46,0,37,0],[47,0,38,0],[48,2,39,7],[48,8,39,13,"series"],[48,14,39,19],[48,17,39,22,"cb"],[48,19,39,24],[48,23,39,28],[49,4,40,2],[49,8,40,6,"queue"],[49,13,40,11],[49,16,40,14,"Promise"],[49,23,40,21],[49,24,40,22,"resolve"],[49,31,40,29],[49,32,40,30],[49,33,40,31],[50,4,41,2],[50,10,41,8,"callback"],[50,18,41,16],[50,21,41,19,"callback"],[50,22,41,19],[50,27,41,25],[51,6,42,4],[52,6,43,4,"queue"],[52,11,43,9],[52,14,43,12,"queue"],[52,19,43,17],[52,20,43,18,"then"],[52,24,43,22],[52,25,43,23,"cb"],[52,27,43,25],[52,28,43,26],[53,4,44,2],[53,5,44,3],[54,4,45,2],[54,11,45,9,"callback"],[54,19,45,17],[55,2,46,0],[55,3,46,1],[56,2,46,2,"exports"],[56,9,46,2],[56,10,46,2,"series"],[56,16,46,2],[56,19,46,2,"series"],[56,25,46,2],[57,2,47,0],[57,8,47,6,"linkingHandlers"],[57,23,47,21],[57,26,47,24],[57,28,47,26],[58,2,48,7],[58,11,48,16,"useLinking"],[58,21,48,26,"useLinking"],[58,22,48,27,"ref"],[58,25,48,30],[58,27,48,32],[59,4,49,2,"enabled"],[59,11,49,9],[59,14,49,12],[59,18,49,16],[60,4,50,2,"config"],[60,10,50,8],[61,4,51,2,"getStateFromPath"],[61,20,51,18],[61,23,51,21,"getStateFromPathDefault"],[61,45,51,44],[62,4,52,2,"getPathFromState"],[62,20,52,18],[62,23,52,21,"getPathFromStateDefault"],[62,45,52,44],[63,4,53,2,"getActionFromState"],[63,22,53,20],[63,25,53,23,"getActionFromStateDefault"],[64,2,54,0],[64,3,54,1],[64,5,54,3,"onUnhandledLinking"],[64,23,54,21],[64,25,54,23],[65,4,55,2],[65,10,55,8,"independent"],[65,21,55,19],[65,24,55,22],[65,28,55,22,"useNavigationIndependentTree"],[65,62,55,50],[65,64,55,51],[65,65,55,52],[66,4,56,2,"React"],[66,9,56,7],[66,10,56,8,"useEffect"],[66,19,56,17],[66,20,56,18],[66,26,56,24],[67,6,57,4],[67,10,57,8,"process"],[67,17,57,15],[67,18,57,16,"env"],[67,21,57,19],[67,22,57,20,"NODE_ENV"],[67,30,57,28],[67,35,57,33],[67,47,57,45],[67,49,57,47],[68,8,58,6],[68,15,58,13,"undefined"],[68,24,58,22],[69,6,59,4],[70,6,60,4],[70,10,60,8,"independent"],[70,21,60,19],[70,23,60,21],[71,8,61,6],[71,15,61,13,"undefined"],[71,24,61,22],[72,6,62,4],[73,6,63,4],[73,10,63,8,"enabled"],[73,17,63,15],[73,22,63,20],[73,27,63,25],[73,31,63,29,"linkingHandlers"],[73,46,63,44],[73,47,63,45,"length"],[73,53,63,51],[73,55,63,53],[74,8,64,6,"console"],[74,15,64,13],[74,16,64,14,"error"],[74,21,64,19],[74,22,64,20],[74,23,64,21],[74,196,64,194],[74,198,64,196],[74,285,64,283],[74,287,64,285],[74,347,64,345],[74,348,64,346],[74,349,64,347,"join"],[74,353,64,351],[74,354,64,352],[74,358,64,356],[74,359,64,357],[74,360,64,358,"trim"],[74,364,64,362],[74,365,64,363],[74,366,64,364],[74,367,64,365],[75,6,65,4],[76,6,66,4],[76,12,66,10,"handler"],[76,19,66,17],[76,22,66,20,"Symbol"],[76,28,66,26],[76,29,66,27],[76,30,66,28],[77,6,67,4],[77,10,67,8,"enabled"],[77,17,67,15],[77,22,67,20],[77,27,67,25],[77,29,67,27],[78,8,68,6,"linkingHandlers"],[78,23,68,21],[78,24,68,22,"push"],[78,28,68,26],[78,29,68,27,"handler"],[78,36,68,34],[78,37,68,35],[79,6,69,4],[80,6,70,4],[80,13,70,11],[80,19,70,17],[81,8,71,6],[81,14,71,12,"index"],[81,19,71,17],[81,22,71,20,"linkingHandlers"],[81,37,71,35],[81,38,71,36,"indexOf"],[81,45,71,43],[81,46,71,44,"handler"],[81,53,71,51],[81,54,71,52],[82,8,72,6],[82,12,72,10,"index"],[82,17,72,15],[82,20,72,18],[82,21,72,19],[82,22,72,20],[82,24,72,22],[83,10,73,8,"linkingHandlers"],[83,25,73,23],[83,26,73,24,"splice"],[83,32,73,30],[83,33,73,31,"index"],[83,38,73,36],[83,40,73,38],[83,41,73,39],[83,42,73,40],[84,8,74,6],[85,6,75,4],[85,7,75,5],[86,4,76,2],[86,5,76,3],[86,7,76,5],[86,8,76,6,"enabled"],[86,15,76,13],[86,17,76,15,"independent"],[86,28,76,26],[86,29,76,27],[86,30,76,28],[87,4,77,2],[87,10,77,8],[87,11,77,9,"history"],[87,18,77,16],[87,19,77,17],[87,22,77,20,"React"],[87,27,77,25],[87,28,77,26,"useState"],[87,36,77,34],[87,37,77,35,"createMemoryHistory"],[87,77,77,54],[87,78,77,55],[89,4,79,2],[90,4,80,2],[91,4,81,2],[92,4,82,2],[92,10,82,8,"enabledRef"],[92,20,82,18],[92,23,82,21,"React"],[92,28,82,26],[92,29,82,27,"useRef"],[92,35,82,33],[92,36,82,34,"enabled"],[92,43,82,41],[92,44,82,42],[93,4,83,2],[93,10,83,8,"configRef"],[93,19,83,17],[93,22,83,20,"React"],[93,27,83,25],[93,28,83,26,"useRef"],[93,34,83,32],[93,35,83,33,"config"],[93,41,83,39],[93,42,83,40],[94,4,84,2],[94,10,84,8,"getStateFromPathRef"],[94,29,84,27],[94,32,84,30,"React"],[94,37,84,35],[94,38,84,36,"useRef"],[94,44,84,42],[94,45,84,43,"getStateFromPath"],[94,61,84,59],[94,62,84,60],[95,4,85,2],[95,10,85,8,"getPathFromStateRef"],[95,29,85,27],[95,32,85,30,"React"],[95,37,85,35],[95,38,85,36,"useRef"],[95,44,85,42],[95,45,85,43,"getPathFromState"],[95,61,85,59],[95,62,85,60],[96,4,86,2],[96,10,86,8,"getActionFromStateRef"],[96,31,86,29],[96,34,86,32,"React"],[96,39,86,37],[96,40,86,38,"useRef"],[96,46,86,44],[96,47,86,45,"getActionFromState"],[96,65,86,63],[96,66,86,64],[97,4,87,2,"React"],[97,9,87,7],[97,10,87,8,"useEffect"],[97,19,87,17],[97,20,87,18],[97,26,87,24],[98,6,88,4,"enabledRef"],[98,16,88,14],[98,17,88,15,"current"],[98,24,88,22],[98,27,88,25,"enabled"],[98,34,88,32],[99,6,89,4,"configRef"],[99,15,89,13],[99,16,89,14,"current"],[99,23,89,21],[99,26,89,24,"config"],[99,32,89,30],[100,6,90,4,"getStateFromPathRef"],[100,25,90,23],[100,26,90,24,"current"],[100,33,90,31],[100,36,90,34,"getStateFromPath"],[100,52,90,50],[101,6,91,4,"getPathFromStateRef"],[101,25,91,23],[101,26,91,24,"current"],[101,33,91,31],[101,36,91,34,"getPathFromState"],[101,52,91,50],[102,6,92,4,"getActionFromStateRef"],[102,27,92,25],[102,28,92,26,"current"],[102,35,92,33],[102,38,92,36,"getActionFromState"],[102,56,92,54],[103,4,93,2],[103,5,93,3],[103,6,93,4],[104,4,94,2],[104,10,94,8,"validateRoutesNotExistInRootState"],[104,43,94,41],[104,46,94,44,"React"],[104,51,94,49],[104,52,94,50,"useCallback"],[104,63,94,61],[104,64,94,62,"state"],[104,69,94,67],[104,73,94,71],[105,6,95,4],[105,12,95,10,"navigation"],[105,22,95,20],[105,25,95,23,"ref"],[105,28,95,26],[105,29,95,27,"current"],[105,36,95,34],[106,6,96,4],[106,12,96,10,"rootState"],[106,21,96,19],[106,24,96,22,"navigation"],[106,34,96,32],[106,36,96,34,"getRootState"],[106,48,96,46],[106,49,96,47],[106,50,96,48],[107,6,97,4],[108,6,98,4],[109,6,99,4],[109,13,99,11,"state"],[109,18,99,16],[109,20,99,18,"routes"],[109,26,99,24],[109,27,99,25,"some"],[109,31,99,29],[109,32,99,30,"r"],[109,33,99,31],[109,37,99,35],[109,38,99,36,"rootState"],[109,47,99,45],[109,49,99,47,"routeNames"],[109,59,99,57],[109,60,99,58,"includes"],[109,68,99,66],[109,69,99,67,"r"],[109,70,99,68],[109,71,99,69,"name"],[109,75,99,73],[109,76,99,74],[109,77,99,75],[110,4,100,2],[110,5,100,3],[110,7,100,5],[110,8,100,6,"ref"],[110,11,100,9],[110,12,100,10],[110,13,100,11],[111,4,101,2],[111,10,101,8,"server"],[111,16,101,14],[111,19,101,17,"React"],[111,24,101,22],[111,25,101,23,"useContext"],[111,35,101,33],[111,36,101,34,"ServerContext"],[111,64,101,47],[111,65,101,48],[112,4,102,2],[112,10,102,8,"getInitialState"],[112,25,102,23],[112,28,102,26,"React"],[112,33,102,31],[112,34,102,32,"useCallback"],[112,45,102,43],[112,46,102,44],[112,52,102,50],[113,6,103,4],[113,10,103,8,"value"],[113,15,103,13],[114,6,104,4],[114,10,104,8,"enabledRef"],[114,20,104,18],[114,21,104,19,"current"],[114,28,104,26],[114,30,104,28],[115,8,105,6],[115,14,105,12,"location"],[115,22,105,20],[115,25,105,23,"server"],[115,31,105,29],[115,33,105,31,"location"],[115,41,105,39],[115,46,105,44],[115,53,105,76,"window"],[115,59,105,82],[115,60,105,83,"location"],[115,68,105,91],[115,71,105,94,"undefined"],[115,80,105,103],[115,81,105,104],[116,8,106,6],[116,14,106,12,"path"],[116,18,106,16],[116,21,106,19,"location"],[116,29,106,27],[116,32,106,30,"location"],[116,40,106,38],[116,41,106,39,"pathname"],[116,49,106,47],[116,52,106,50,"location"],[116,60,106,58],[116,61,106,59,"search"],[116,67,106,65],[116,70,106,68,"undefined"],[116,79,106,77],[117,8,107,6],[117,12,107,10,"path"],[117,16,107,14],[117,18,107,16],[118,10,108,8,"value"],[118,15,108,13],[118,18,108,16,"getStateFromPathRef"],[118,37,108,35],[118,38,108,36,"current"],[118,45,108,43],[118,46,108,44,"path"],[118,50,108,48],[118,52,108,50,"configRef"],[118,61,108,59],[118,62,108,60,"current"],[118,69,108,67],[118,70,108,68],[119,8,109,6],[121,8,111,6],[122,8,112,6,"onUnhandledLinking"],[122,26,112,24],[122,27,112,25,"path"],[122,31,112,29],[122,32,112,30],[123,6,113,4],[124,6,114,4],[124,12,114,10,"thenable"],[124,20,114,18],[124,23,114,21],[125,8,115,6,"then"],[125,12,115,10,"then"],[125,13,115,11,"onfulfilled"],[125,24,115,22],[125,26,115,24],[126,10,116,8],[126,17,116,15,"Promise"],[126,24,116,22],[126,25,116,23,"resolve"],[126,32,116,30],[126,33,116,31,"onfulfilled"],[126,44,116,42],[126,47,116,45,"onfulfilled"],[126,58,116,56],[126,59,116,57,"value"],[126,64,116,62],[126,65,116,63],[126,68,116,66,"value"],[126,73,116,71],[126,74,116,72],[127,8,117,6],[127,9,117,7],[128,8,118,6,"catch"],[128,13,118,11,"catch"],[128,14,118,11],[128,16,118,14],[129,10,119,8],[129,17,119,15,"thenable"],[129,25,119,23],[130,8,120,6],[131,6,121,4],[131,7,121,5],[132,6,122,4],[132,13,122,11,"thenable"],[132,21,122,19],[133,6,123,4],[134,4,124,2],[134,5,124,3],[134,7,124,5],[134,9,124,7],[134,10,124,8],[135,4,125,2],[135,10,125,8,"previousIndexRef"],[135,26,125,24],[135,29,125,27,"React"],[135,34,125,32],[135,35,125,33,"useRef"],[135,41,125,39],[135,42,125,40,"undefined"],[135,51,125,49],[135,52,125,50],[136,4,126,2],[136,10,126,8,"previousStateRef"],[136,26,126,24],[136,29,126,27,"React"],[136,34,126,32],[136,35,126,33,"useRef"],[136,41,126,39],[136,42,126,40,"undefined"],[136,51,126,49],[136,52,126,50],[137,4,127,2],[137,10,127,8,"pendingPopStatePathRef"],[137,32,127,30],[137,35,127,33,"React"],[137,40,127,38],[137,41,127,39,"useRef"],[137,47,127,45],[137,48,127,46,"undefined"],[137,57,127,55],[137,58,127,56],[138,4,128,2,"React"],[138,9,128,7],[138,10,128,8,"useEffect"],[138,19,128,17],[138,20,128,18],[138,26,128,24],[139,6,129,4,"previousIndexRef"],[139,22,129,20],[139,23,129,21,"current"],[139,30,129,28],[139,33,129,31,"history"],[139,40,129,38],[139,41,129,39,"index"],[139,46,129,44],[140,6,130,4],[140,13,130,11,"history"],[140,20,130,18],[140,21,130,19,"listen"],[140,27,130,25],[140,28,130,26],[140,34,130,32],[141,8,131,6],[141,14,131,12,"navigation"],[141,24,131,22],[141,27,131,25,"ref"],[141,30,131,28],[141,31,131,29,"current"],[141,38,131,36],[142,8,132,6],[142,12,132,10],[142,13,132,11,"navigation"],[142,23,132,21],[142,27,132,25],[142,28,132,26,"enabled"],[142,35,132,33],[142,37,132,35],[143,10,133,8],[144,8,134,6],[145,8,135,6],[145,14,135,12],[146,10,136,8,"location"],[147,8,137,6],[147,9,137,7],[147,12,137,10,"window"],[147,18,137,16],[148,8,138,6],[148,14,138,12,"path"],[148,18,138,16],[148,21,138,19,"location"],[148,29,138,27],[148,30,138,28,"pathname"],[148,38,138,36],[148,41,138,39,"location"],[148,49,138,47],[148,50,138,48,"search"],[148,56,138,54],[149,8,139,6],[149,14,139,12,"index"],[149,19,139,17],[149,22,139,20,"history"],[149,29,139,27],[149,30,139,28,"index"],[149,35,139,33],[150,8,140,6],[150,14,140,12,"previousIndex"],[150,27,140,25],[150,30,140,28,"previousIndexRef"],[150,46,140,44],[150,47,140,45,"current"],[150,54,140,52],[150,58,140,56],[150,59,140,57],[151,8,141,6,"previousIndexRef"],[151,24,141,22],[151,25,141,23,"current"],[151,32,141,30],[151,35,141,33,"index"],[151,40,141,38],[152,8,142,6,"pendingPopStatePathRef"],[152,30,142,28],[152,31,142,29,"current"],[152,38,142,36],[152,41,142,39,"path"],[152,45,142,43],[154,8,144,6],[155,8,145,6],[156,8,146,6],[157,8,147,6],[157,14,147,12,"record"],[157,20,147,18],[157,23,147,21,"history"],[157,30,147,28],[157,31,147,29,"get"],[157,34,147,32],[157,35,147,33,"index"],[157,40,147,38],[157,41,147,39],[158,8,148,6],[158,12,148,10,"record"],[158,18,148,16],[158,20,148,18,"path"],[158,24,148,22],[158,29,148,27,"path"],[158,33,148,31],[158,37,148,35,"record"],[158,43,148,41],[158,45,148,43,"state"],[158,50,148,48],[158,52,148,50],[159,10,149,8,"navigation"],[159,20,149,18],[159,21,149,19,"resetRoot"],[159,30,149,28],[159,31,149,29,"record"],[159,37,149,35],[159,38,149,36,"state"],[159,43,149,41],[159,44,149,42],[160,10,150,8],[161,8,151,6],[162,8,152,6],[162,14,152,12,"state"],[162,19,152,17],[162,22,152,20,"getStateFromPathRef"],[162,41,152,39],[162,42,152,40,"current"],[162,49,152,47],[162,50,152,48,"path"],[162,54,152,52],[162,56,152,54,"configRef"],[162,65,152,63],[162,66,152,64,"current"],[162,73,152,71],[162,74,152,72],[164,8,154,6],[165,8,155,6],[166,8,156,6],[166,12,156,10,"state"],[166,17,156,15],[166,19,156,17],[167,10,157,8],[168,10,158,8,"onUnhandledLinking"],[168,28,158,26],[168,29,158,27,"path"],[168,33,158,31],[168,34,158,32],[169,10,159,8],[170,10,160,8],[171,10,161,8],[171,14,161,12,"validateRoutesNotExistInRootState"],[171,47,161,45],[171,48,161,46,"state"],[171,53,161,51],[171,54,161,52],[171,56,161,54],[172,12,162,10],[173,10,163,8],[174,10,164,8],[174,14,164,12,"index"],[174,19,164,17],[174,22,164,20,"previousIndex"],[174,35,164,33],[174,37,164,35],[175,12,165,10],[175,18,165,16,"action"],[175,24,165,22],[175,27,165,25,"getActionFromStateRef"],[175,48,165,46],[175,49,165,47,"current"],[175,56,165,54],[175,57,165,55,"state"],[175,62,165,60],[175,64,165,62,"configRef"],[175,73,165,71],[175,74,165,72,"current"],[175,81,165,79],[175,82,165,80],[176,12,166,10],[176,16,166,14,"action"],[176,22,166,20],[176,27,166,25,"undefined"],[176,36,166,34],[176,38,166,36],[177,14,167,12],[177,18,167,16],[178,16,168,14,"navigation"],[178,26,168,24],[178,27,168,25,"dispatch"],[178,35,168,33],[178,36,168,34,"action"],[178,42,168,40],[178,43,168,41],[179,14,169,12],[179,15,169,13],[179,16,169,14],[179,23,169,21,"e"],[179,24,169,22],[179,26,169,24],[180,16,170,14],[181,16,171,14],[182,16,172,14,"console"],[182,23,172,21],[182,24,172,22,"warn"],[182,28,172,26],[182,29,172,27],[182,82,172,80,"path"],[182,86,172,84],[182,92,172,90],[182,99,172,97,"e"],[182,100,172,98],[182,105,172,103],[182,113,172,111],[182,117,172,115,"e"],[182,118,172,116],[182,122,172,120],[182,126,172,124],[182,130,172,128],[182,139,172,137],[182,143,172,141,"e"],[182,144,172,142],[182,147,172,145,"e"],[182,148,172,146],[182,149,172,147,"message"],[182,156,172,154],[182,159,172,157,"e"],[182,160,172,158],[182,162,172,160],[182,163,172,161],[183,14,173,12],[184,12,174,10],[184,13,174,11],[184,19,174,17],[185,14,175,12,"navigation"],[185,24,175,22],[185,25,175,23,"resetRoot"],[185,34,175,32],[185,35,175,33,"state"],[185,40,175,38],[185,41,175,39],[186,12,176,10],[187,10,177,8],[187,11,177,9],[187,17,177,15],[188,12,178,10,"navigation"],[188,22,178,20],[188,23,178,21,"resetRoot"],[188,32,178,30],[188,33,178,31,"state"],[188,38,178,36],[188,39,178,37],[189,10,179,8],[190,8,180,6],[190,9,180,7],[190,15,180,13],[191,10,181,8],[192,10,182,8,"navigation"],[192,20,182,18],[192,21,182,19,"resetRoot"],[192,30,182,28],[192,31,182,29,"state"],[192,36,182,34],[192,37,182,35],[193,8,183,6],[194,6,184,4],[194,7,184,5],[194,8,184,6],[195,4,185,2],[195,5,185,3],[195,7,185,5],[195,8,185,6,"enabled"],[195,15,185,13],[195,17,185,15,"history"],[195,24,185,22],[195,26,185,24,"onUnhandledLinking"],[195,44,185,42],[195,46,185,44,"ref"],[195,49,185,47],[195,51,185,49,"validateRoutesNotExistInRootState"],[195,84,185,82],[195,85,185,83],[195,86,185,84],[196,4,186,2,"React"],[196,9,186,7],[196,10,186,8,"useEffect"],[196,19,186,17],[196,20,186,18],[196,26,186,24],[197,6,187,4],[197,10,187,8],[197,11,187,9,"enabled"],[197,18,187,16],[197,20,187,18],[198,8,188,6],[199,6,189,4],[200,6,190,4],[200,12,190,10,"getPathForRoute"],[200,27,190,25],[200,30,190,28,"getPathForRoute"],[200,31,190,29,"route"],[200,36,190,34],[200,38,190,36,"state"],[200,43,190,41],[200,48,190,46],[201,8,191,6],[201,12,191,10,"path"],[201,16,191,14],[203,8,193,6],[204,8,194,6],[205,8,195,6],[205,12,195,10,"route"],[205,17,195,15],[205,19,195,17,"path"],[205,23,195,21],[205,25,195,23],[206,10,196,8],[206,16,196,14,"stateForPath"],[206,28,196,26],[206,31,196,29,"getStateFromPathRef"],[206,50,196,48],[206,51,196,49,"current"],[206,58,196,56],[206,59,196,57,"route"],[206,64,196,62],[206,65,196,63,"path"],[206,69,196,67],[206,71,196,69,"configRef"],[206,80,196,78],[206,81,196,79,"current"],[206,88,196,86],[206,89,196,87],[207,10,197,8],[207,14,197,12,"stateForPath"],[207,26,197,24],[207,28,197,26],[208,12,198,10],[208,18,198,16,"focusedRoute"],[208,30,198,28],[208,33,198,31],[208,37,198,31,"findFocusedRoute"],[208,59,198,47],[208,61,198,48,"stateForPath"],[208,73,198,60],[208,74,198,61],[209,12,199,10],[209,16,199,14,"focusedRoute"],[209,28,199,26],[209,32,199,30,"focusedRoute"],[209,44,199,42],[209,45,199,43,"name"],[209,49,199,47],[209,54,199,52,"route"],[209,59,199,57],[209,60,199,58,"name"],[209,64,199,62],[209,68,199,66],[209,72,199,66,"isEqual"],[209,94,199,73],[209,96,199,74,"focusedRoute"],[209,108,199,86],[209,109,199,87,"params"],[209,115,199,93],[209,117,199,95,"route"],[209,122,199,100],[209,123,199,101,"params"],[209,129,199,107],[209,130,199,108],[209,132,199,110],[210,14,200,12,"path"],[210,18,200,16],[210,21,200,19,"route"],[210,26,200,24],[210,27,200,25,"path"],[210,31,200,29],[211,12,201,10],[212,10,202,8],[213,8,203,6],[214,8,204,6],[214,12,204,10,"path"],[214,16,204,14],[214,20,204,18],[214,24,204,22],[214,26,204,24],[215,10,205,8,"path"],[215,14,205,12],[215,17,205,15,"getPathFromStateRef"],[215,36,205,34],[215,37,205,35,"current"],[215,44,205,42],[215,45,205,43,"state"],[215,50,205,48],[215,52,205,50,"configRef"],[215,61,205,59],[215,62,205,60,"current"],[215,69,205,67],[215,70,205,68],[216,8,206,6],[217,8,207,6],[217,14,207,12,"previousRoute"],[217,27,207,25],[217,30,207,28,"previousStateRef"],[217,46,207,44],[217,47,207,45,"current"],[217,54,207,52],[217,57,207,55],[217,61,207,55,"findFocusedRoute"],[217,83,207,71],[217,85,207,72,"previousStateRef"],[217,101,207,88],[217,102,207,89,"current"],[217,109,207,96],[217,110,207,97],[217,113,207,100,"undefined"],[217,122,207,109],[219,8,209,6],[220,8,210,6],[220,12,210,10,"previousRoute"],[220,25,210,23],[220,29,210,27,"route"],[220,34,210,32],[220,38,210,36],[220,43,210,41],[220,47,210,45,"previousRoute"],[220,60,210,58],[220,64,210,62],[220,69,210,67],[220,73,210,71,"route"],[220,78,210,76],[220,82,210,80,"previousRoute"],[220,95,210,93],[220,96,210,94,"key"],[220,99,210,97],[220,104,210,102,"route"],[220,109,210,107],[220,110,210,108,"key"],[220,113,210,111],[220,115,210,113],[221,10,211,8,"path"],[221,14,211,12],[221,17,211,15,"path"],[221,21,211,19],[221,24,211,22,"location"],[221,32,211,30],[221,33,211,31,"hash"],[221,37,211,35],[222,8,212,6],[223,8,213,6],[223,15,213,13,"path"],[223,19,213,17],[224,6,214,4],[224,7,214,5],[225,6,215,4],[225,10,215,8,"ref"],[225,13,215,11],[225,14,215,12,"current"],[225,21,215,19],[225,23,215,21],[226,8,216,6],[227,8,217,6],[228,8,218,6],[228,14,218,12,"state"],[228,19,218,17],[228,22,218,20,"ref"],[228,25,218,23],[228,26,218,24,"current"],[228,33,218,31],[228,34,218,32,"getRootState"],[228,46,218,44],[228,47,218,45],[228,48,218,46],[229,8,219,6],[229,12,219,10,"state"],[229,17,219,15],[229,19,219,17],[230,10,220,8],[230,16,220,14,"route"],[230,21,220,19],[230,24,220,22],[230,28,220,22,"findFocusedRoute"],[230,50,220,38],[230,52,220,39,"state"],[230,57,220,44],[230,58,220,45],[231,10,221,8],[231,16,221,14,"path"],[231,20,221,18],[231,23,221,21,"getPathForRoute"],[231,38,221,36],[231,39,221,37,"route"],[231,44,221,42],[231,46,221,44,"state"],[231,51,221,49],[231,52,221,50],[232,10,222,8],[232,14,222,12,"previousStateRef"],[232,30,222,28],[232,31,222,29,"current"],[232,38,222,36],[232,43,222,41,"undefined"],[232,52,222,50],[232,54,222,52],[233,12,223,10,"previousStateRef"],[233,28,223,26],[233,29,223,27,"current"],[233,36,223,34],[233,39,223,37,"state"],[233,44,223,42],[234,10,224,8],[235,10,225,8,"history"],[235,17,225,15],[235,18,225,16,"replace"],[235,25,225,23],[235,26,225,24],[236,12,226,10,"path"],[236,16,226,14],[237,12,227,10,"state"],[238,10,228,8],[238,11,228,9],[238,12,228,10],[239,8,229,6],[240,6,230,4],[241,6,231,4],[241,12,231,10,"onStateChange"],[241,25,231,23],[241,28,231,26],[241,34,231,26,"onStateChange"],[241,35,231,26],[241,40,231,38],[242,8,232,6],[242,14,232,12,"navigation"],[242,24,232,22],[242,27,232,25,"ref"],[242,30,232,28],[242,31,232,29,"current"],[242,38,232,36],[243,8,233,6],[243,12,233,10],[243,13,233,11,"navigation"],[243,23,233,21],[243,27,233,25],[243,28,233,26,"enabled"],[243,35,233,33],[243,37,233,35],[244,10,234,8],[245,8,235,6],[246,8,236,6],[246,14,236,12,"previousState"],[246,27,236,25],[246,30,236,28,"previousStateRef"],[246,46,236,44],[246,47,236,45,"current"],[246,54,236,52],[247,8,237,6],[247,14,237,12,"state"],[247,19,237,17],[247,22,237,20,"navigation"],[247,32,237,30],[247,33,237,31,"getRootState"],[247,45,237,43],[247,46,237,44],[247,47,237,45],[249,8,239,6],[250,8,240,6],[250,12,240,10],[250,13,240,11,"state"],[250,18,240,16],[250,20,240,18],[251,10,241,8],[252,8,242,6],[253,8,243,6],[253,14,243,12,"pendingPath"],[253,25,243,23],[253,28,243,26,"pendingPopStatePathRef"],[253,50,243,48],[253,51,243,49,"current"],[253,58,243,56],[254,8,244,6],[254,14,244,12,"route"],[254,19,244,17],[254,22,244,20],[254,26,244,20,"findFocusedRoute"],[254,48,244,36],[254,50,244,37,"state"],[254,55,244,42],[254,56,244,43],[255,8,245,6],[255,14,245,12,"path"],[255,18,245,16],[255,21,245,19,"getPathForRoute"],[255,36,245,34],[255,37,245,35,"route"],[255,42,245,40],[255,44,245,42,"state"],[255,49,245,47],[255,50,245,48],[256,8,246,6,"previousStateRef"],[256,24,246,22],[256,25,246,23,"current"],[256,32,246,30],[256,35,246,33,"state"],[256,40,246,38],[257,8,247,6,"pendingPopStatePathRef"],[257,30,247,28],[257,31,247,29,"current"],[257,38,247,36],[257,41,247,39,"undefined"],[257,50,247,48],[259,8,249,6],[260,8,250,6],[261,8,251,6],[262,8,252,6],[263,8,253,6],[263,14,253,12],[263,15,253,13,"previousFocusedState"],[263,35,253,33],[263,37,253,35,"focusedState"],[263,49,253,47],[263,50,253,48],[263,53,253,51,"findMatchingState"],[263,70,253,68],[263,71,253,69,"previousState"],[263,84,253,82],[263,86,253,84,"state"],[263,91,253,89],[263,92,253,90],[264,8,254,6],[264,12,254,10,"previousFocusedState"],[264,32,254,30],[264,36,254,34,"focusedState"],[264,48,254,46],[265,8,255,6],[266,8,256,6],[267,8,257,6,"path"],[267,12,257,10],[267,17,257,15,"pendingPath"],[267,28,257,26],[267,30,257,28],[268,10,258,8],[268,16,258,14,"historyDelta"],[268,28,258,26],[268,31,258,29],[268,32,258,30,"focusedState"],[268,44,258,42],[268,45,258,43,"history"],[268,52,258,50],[268,55,258,53,"focusedState"],[268,67,258,65],[268,68,258,66,"history"],[268,75,258,73],[268,76,258,74,"length"],[268,82,258,80],[268,85,258,83,"focusedState"],[268,97,258,95],[268,98,258,96,"routes"],[268,104,258,102],[268,105,258,103,"length"],[268,111,258,109],[268,116,258,114,"previousFocusedState"],[268,136,258,134],[268,137,258,135,"history"],[268,144,258,142],[268,147,258,145,"previousFocusedState"],[268,167,258,165],[268,168,258,166,"history"],[268,175,258,173],[268,176,258,174,"length"],[268,182,258,180],[268,185,258,183,"previousFocusedState"],[268,205,258,203],[268,206,258,204,"routes"],[268,212,258,210],[268,213,258,211,"length"],[268,219,258,217],[268,220,258,218],[269,10,259,8],[269,14,259,12,"historyDelta"],[269,26,259,24],[269,29,259,27],[269,30,259,28],[269,32,259,30],[270,12,260,10],[271,12,261,10],[272,12,262,10,"history"],[272,19,262,17],[272,20,262,18,"push"],[272,24,262,22],[272,25,262,23],[273,14,263,12,"path"],[273,18,263,16],[274,14,264,12,"state"],[275,12,265,10],[275,13,265,11],[275,14,265,12],[276,10,266,8],[276,11,266,9],[276,17,266,15],[276,21,266,19,"historyDelta"],[276,33,266,31],[276,36,266,34],[276,37,266,35],[276,39,266,37],[277,12,267,10],[279,12,269,10],[279,18,269,16,"nextIndex"],[279,27,269,25],[279,30,269,28,"history"],[279,37,269,35],[279,38,269,36,"backIndex"],[279,47,269,45],[279,48,269,46],[280,14,270,12,"path"],[281,12,271,10],[281,13,271,11],[281,14,271,12],[282,12,272,10],[282,18,272,16,"currentIndex"],[282,30,272,28],[282,33,272,31,"history"],[282,40,272,38],[282,41,272,39,"index"],[282,46,272,44],[283,12,273,10],[283,16,273,14],[284,14,274,12],[284,18,274,16,"nextIndex"],[284,27,274,25],[284,32,274,30],[284,33,274,31],[284,34,274,32],[284,38,274,36,"nextIndex"],[284,47,274,45],[284,50,274,48,"currentIndex"],[284,62,274,60],[285,14,275,12],[286,14,276,12,"history"],[286,21,276,19],[286,22,276,20,"get"],[286,25,276,23],[286,26,276,24,"nextIndex"],[286,35,276,33],[286,38,276,36,"currentIndex"],[286,50,276,48],[286,51,276,49],[286,53,276,51],[287,16,277,14],[288,16,278,14],[288,22,278,20,"history"],[288,29,278,27],[288,30,278,28,"go"],[288,32,278,30],[288,33,278,31,"nextIndex"],[288,42,278,40],[288,45,278,43,"currentIndex"],[288,57,278,55],[288,58,278,56],[289,14,279,12],[289,15,279,13],[289,21,279,19],[290,16,280,14],[291,16,281,14],[292,16,282,14],[293,16,283,14],[293,22,283,20,"history"],[293,29,283,27],[293,30,283,28,"go"],[293,32,283,30],[293,33,283,31,"historyDelta"],[293,45,283,43],[293,46,283,44],[294,14,284,12],[296,14,286,12],[297,14,287,12,"history"],[297,21,287,19],[297,22,287,20,"replace"],[297,29,287,27],[297,30,287,28],[298,16,288,14,"path"],[298,20,288,18],[299,16,289,14,"state"],[300,14,290,12],[300,15,290,13],[300,16,290,14],[301,12,291,10],[301,13,291,11],[301,14,291,12],[301,21,291,19,"e"],[301,22,291,20],[301,24,291,22],[302,14,292,12],[303,12,292,12],[304,10,294,8],[304,11,294,9],[304,17,294,15],[305,12,295,10],[306,12,296,10,"history"],[306,19,296,17],[306,20,296,18,"replace"],[306,27,296,25],[306,28,296,26],[307,14,297,12,"path"],[307,18,297,16],[308,14,298,12,"state"],[309,12,299,10],[309,13,299,11],[309,14,299,12],[310,10,300,8],[311,8,301,6],[311,9,301,7],[311,15,301,13],[312,10,302,8],[313,10,303,8],[314,10,304,8,"history"],[314,17,304,15],[314,18,304,16,"replace"],[314,25,304,23],[314,26,304,24],[315,12,305,10,"path"],[315,16,305,14],[316,12,306,10,"state"],[317,10,307,8],[317,11,307,9],[317,12,307,10],[318,8,308,6],[319,6,309,4],[319,7,309,5],[321,6,311,4],[322,6,312,4],[323,6,313,4],[324,6,314,4],[324,13,314,11,"ref"],[324,16,314,14],[324,17,314,15,"current"],[324,24,314,22],[324,26,314,24,"addListener"],[324,37,314,35],[324,38,314,36],[324,45,314,43],[324,47,314,45,"series"],[324,53,314,51],[324,54,314,52,"onStateChange"],[324,67,314,65],[324,68,314,66],[324,69,314,67],[325,4,315,2],[325,5,315,3],[325,7,315,5],[325,8,315,6,"enabled"],[325,15,315,13],[325,17,315,15,"history"],[325,24,315,22],[325,26,315,24,"ref"],[325,29,315,27],[325,30,315,28],[325,31,315,29],[326,4,316,2],[326,11,316,9],[327,6,317,4,"getInitialState"],[328,4,318,2],[328,5,318,3],[329,2,319,0],[330,0,319,1],[330,3]],"functionMap":{"names":["<global>","findMatchingState","series","callback","useLinking","React.useEffect$argument_0","<anonymous>","validateRoutesNotExistInRootState","state.routes.some$argument_0","getInitialState","thenable.then","thenable._catch","history.listen$argument_0","getPathForRoute","onStateChange"],"mappings":"AAA;0BCW;CDsB;sBEK;mBCE;GDG;CFE;OIE;kBCQ;WCc;KDK;GDC;kBCW;GDM;8DGC;8BCK,4CD;GHC;4CKE;MCa;ODE;MEC;OFE;GLI;kBCI;0BOE;KPsD;GDC;kBCC;4BQI;KRwB;0BSiB;KT8E;GDM;CJI"}},"type":"js/module"}]}