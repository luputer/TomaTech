{"dependencies":[{"name":"./matchers","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":4,"column":19,"index":157},"end":{"line":4,"column":40,"index":178}}],"key":"r7IFX4/qJzuJVkO9YohL0nqjKek="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.sortRoutesWithInitial = exports.sortRoutes = void 0;\n  var matchers_1 = require(_dependencyMap[0], \"./matchers\");\n  function sortDynamicConvention(a, b) {\n    if (a.deep && !b.deep) {\n      return 1;\n    }\n    if (!a.deep && b.deep) {\n      return -1;\n    }\n    return 0;\n  }\n  function sortRoutes(a, b) {\n    if (a.dynamic && !b.dynamic) {\n      return 1;\n    }\n    if (!a.dynamic && b.dynamic) {\n      return -1;\n    }\n    if (a.dynamic && b.dynamic) {\n      if (a.dynamic.length !== b.dynamic.length) {\n        return b.dynamic.length - a.dynamic.length;\n      }\n      for (var i = 0; i < a.dynamic.length; i++) {\n        var aDynamic = a.dynamic[i];\n        var bDynamic = b.dynamic[i];\n        if (aDynamic.notFound && bDynamic.notFound) {\n          var _s = sortDynamicConvention(aDynamic, bDynamic);\n          if (_s) {\n            return _s;\n          }\n        }\n        if (aDynamic.notFound && !bDynamic.notFound) {\n          return 1;\n        }\n        if (!aDynamic.notFound && bDynamic.notFound) {\n          return -1;\n        }\n        var s = sortDynamicConvention(aDynamic, bDynamic);\n        if (s) {\n          return s;\n        }\n      }\n      return 0;\n    }\n    var aIndex = a.route === 'index' || (0, matchers_1.matchGroupName)(a.route) != null;\n    var bIndex = b.route === 'index' || (0, matchers_1.matchGroupName)(b.route) != null;\n    if (aIndex && !bIndex) {\n      return -1;\n    }\n    if (!aIndex && bIndex) {\n      return 1;\n    }\n    return a.route.length - b.route.length;\n  }\n  exports.sortRoutes = sortRoutes;\n  function sortRoutesWithInitial(initialRouteName) {\n    return (a, b) => {\n      if (initialRouteName) {\n        if (a.route === initialRouteName) {\n          return -1;\n        }\n        if (b.route === initialRouteName) {\n          return 1;\n        }\n      }\n      return sortRoutes(a, b);\n    };\n  }\n  exports.sortRoutesWithInitial = sortRoutesWithInitial;\n});","lineCount":76,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"sortRoutesWithInitial"],[7,31,3,29],[7,34,3,32,"exports"],[7,41,3,39],[7,42,3,40,"sortRoutes"],[7,52,3,50],[7,55,3,53],[7,60,3,58],[7,61,3,59],[8,2,4,0],[8,6,4,6,"matchers_1"],[8,16,4,16],[8,19,4,19,"require"],[8,26,4,26],[8,27,4,26,"_dependencyMap"],[8,41,4,26],[8,58,4,39],[8,59,4,40],[9,2,5,0],[9,11,5,9,"sortDynamicConvention"],[9,32,5,30,"sortDynamicConvention"],[9,33,5,31,"a"],[9,34,5,32],[9,36,5,34,"b"],[9,37,5,35],[9,39,5,37],[10,4,6,4],[10,8,6,8,"a"],[10,9,6,9],[10,10,6,10,"deep"],[10,14,6,14],[10,18,6,18],[10,19,6,19,"b"],[10,20,6,20],[10,21,6,21,"deep"],[10,25,6,25],[10,27,6,27],[11,6,7,8],[11,13,7,15],[11,14,7,16],[12,4,8,4],[13,4,9,4],[13,8,9,8],[13,9,9,9,"a"],[13,10,9,10],[13,11,9,11,"deep"],[13,15,9,15],[13,19,9,19,"b"],[13,20,9,20],[13,21,9,21,"deep"],[13,25,9,25],[13,27,9,27],[14,6,10,8],[14,13,10,15],[14,14,10,16],[14,15,10,17],[15,4,11,4],[16,4,12,4],[16,11,12,11],[16,12,12,12],[17,2,13,0],[18,2,14,0],[18,11,14,9,"sortRoutes"],[18,21,14,19,"sortRoutes"],[18,22,14,20,"a"],[18,23,14,21],[18,25,14,23,"b"],[18,26,14,24],[18,28,14,26],[19,4,15,4],[19,8,15,8,"a"],[19,9,15,9],[19,10,15,10,"dynamic"],[19,17,15,17],[19,21,15,21],[19,22,15,22,"b"],[19,23,15,23],[19,24,15,24,"dynamic"],[19,31,15,31],[19,33,15,33],[20,6,16,8],[20,13,16,15],[20,14,16,16],[21,4,17,4],[22,4,18,4],[22,8,18,8],[22,9,18,9,"a"],[22,10,18,10],[22,11,18,11,"dynamic"],[22,18,18,18],[22,22,18,22,"b"],[22,23,18,23],[22,24,18,24,"dynamic"],[22,31,18,31],[22,33,18,33],[23,6,19,8],[23,13,19,15],[23,14,19,16],[23,15,19,17],[24,4,20,4],[25,4,21,4],[25,8,21,8,"a"],[25,9,21,9],[25,10,21,10,"dynamic"],[25,17,21,17],[25,21,21,21,"b"],[25,22,21,22],[25,23,21,23,"dynamic"],[25,30,21,30],[25,32,21,32],[26,6,22,8],[26,10,22,12,"a"],[26,11,22,13],[26,12,22,14,"dynamic"],[26,19,22,21],[26,20,22,22,"length"],[26,26,22,28],[26,31,22,33,"b"],[26,32,22,34],[26,33,22,35,"dynamic"],[26,40,22,42],[26,41,22,43,"length"],[26,47,22,49],[26,49,22,51],[27,8,23,12],[27,15,23,19,"b"],[27,16,23,20],[27,17,23,21,"dynamic"],[27,24,23,28],[27,25,23,29,"length"],[27,31,23,35],[27,34,23,38,"a"],[27,35,23,39],[27,36,23,40,"dynamic"],[27,43,23,47],[27,44,23,48,"length"],[27,50,23,54],[28,6,24,8],[29,6,25,8],[29,11,25,13],[29,15,25,17,"i"],[29,16,25,18],[29,19,25,21],[29,20,25,22],[29,22,25,24,"i"],[29,23,25,25],[29,26,25,28,"a"],[29,27,25,29],[29,28,25,30,"dynamic"],[29,35,25,37],[29,36,25,38,"length"],[29,42,25,44],[29,44,25,46,"i"],[29,45,25,47],[29,47,25,49],[29,49,25,51],[30,8,26,12],[30,12,26,18,"aDynamic"],[30,20,26,26],[30,23,26,29,"a"],[30,24,26,30],[30,25,26,31,"dynamic"],[30,32,26,38],[30,33,26,39,"i"],[30,34,26,40],[30,35,26,41],[31,8,27,12],[31,12,27,18,"bDynamic"],[31,20,27,26],[31,23,27,29,"b"],[31,24,27,30],[31,25,27,31,"dynamic"],[31,32,27,38],[31,33,27,39,"i"],[31,34,27,40],[31,35,27,41],[32,8,28,12],[32,12,28,16,"aDynamic"],[32,20,28,24],[32,21,28,25,"notFound"],[32,29,28,33],[32,33,28,37,"bDynamic"],[32,41,28,45],[32,42,28,46,"notFound"],[32,50,28,54],[32,52,28,56],[33,10,29,16],[33,14,29,22,"s"],[33,16,29,23],[33,19,29,26,"sortDynamicConvention"],[33,40,29,47],[33,41,29,48,"aDynamic"],[33,49,29,56],[33,51,29,58,"bDynamic"],[33,59,29,66],[33,60,29,67],[34,10,30,16],[34,14,30,20,"s"],[34,16,30,21],[34,18,30,23],[35,12,31,20],[35,19,31,27,"s"],[35,21,31,28],[36,10,32,16],[37,8,33,12],[38,8,34,12],[38,12,34,16,"aDynamic"],[38,20,34,24],[38,21,34,25,"notFound"],[38,29,34,33],[38,33,34,37],[38,34,34,38,"bDynamic"],[38,42,34,46],[38,43,34,47,"notFound"],[38,51,34,55],[38,53,34,57],[39,10,35,16],[39,17,35,23],[39,18,35,24],[40,8,36,12],[41,8,37,12],[41,12,37,16],[41,13,37,17,"aDynamic"],[41,21,37,25],[41,22,37,26,"notFound"],[41,30,37,34],[41,34,37,38,"bDynamic"],[41,42,37,46],[41,43,37,47,"notFound"],[41,51,37,55],[41,53,37,57],[42,10,38,16],[42,17,38,23],[42,18,38,24],[42,19,38,25],[43,8,39,12],[44,8,40,12],[44,12,40,18,"s"],[44,13,40,19],[44,16,40,22,"sortDynamicConvention"],[44,37,40,43],[44,38,40,44,"aDynamic"],[44,46,40,52],[44,48,40,54,"bDynamic"],[44,56,40,62],[44,57,40,63],[45,8,41,12],[45,12,41,16,"s"],[45,13,41,17],[45,15,41,19],[46,10,42,16],[46,17,42,23,"s"],[46,18,42,24],[47,8,43,12],[48,6,44,8],[49,6,45,8],[49,13,45,15],[49,14,45,16],[50,4,46,4],[51,4,47,4],[51,8,47,10,"aIndex"],[51,14,47,16],[51,17,47,19,"a"],[51,18,47,20],[51,19,47,21,"route"],[51,24,47,26],[51,29,47,31],[51,36,47,38],[51,40,47,42],[51,41,47,43],[51,42,47,44],[51,44,47,46,"matchers_1"],[51,54,47,56],[51,55,47,57,"matchGroupName"],[51,69,47,71],[51,71,47,73,"a"],[51,72,47,74],[51,73,47,75,"route"],[51,78,47,80],[51,79,47,81],[51,83,47,85],[51,87,47,89],[52,4,48,4],[52,8,48,10,"bIndex"],[52,14,48,16],[52,17,48,19,"b"],[52,18,48,20],[52,19,48,21,"route"],[52,24,48,26],[52,29,48,31],[52,36,48,38],[52,40,48,42],[52,41,48,43],[52,42,48,44],[52,44,48,46,"matchers_1"],[52,54,48,56],[52,55,48,57,"matchGroupName"],[52,69,48,71],[52,71,48,73,"b"],[52,72,48,74],[52,73,48,75,"route"],[52,78,48,80],[52,79,48,81],[52,83,48,85],[52,87,48,89],[53,4,49,4],[53,8,49,8,"aIndex"],[53,14,49,14],[53,18,49,18],[53,19,49,19,"bIndex"],[53,25,49,25],[53,27,49,27],[54,6,50,8],[54,13,50,15],[54,14,50,16],[54,15,50,17],[55,4,51,4],[56,4,52,4],[56,8,52,8],[56,9,52,9,"aIndex"],[56,15,52,15],[56,19,52,19,"bIndex"],[56,25,52,25],[56,27,52,27],[57,6,53,8],[57,13,53,15],[57,14,53,16],[58,4,54,4],[59,4,55,4],[59,11,55,11,"a"],[59,12,55,12],[59,13,55,13,"route"],[59,18,55,18],[59,19,55,19,"length"],[59,25,55,25],[59,28,55,28,"b"],[59,29,55,29],[59,30,55,30,"route"],[59,35,55,35],[59,36,55,36,"length"],[59,42,55,42],[60,2,56,0],[61,2,57,0,"exports"],[61,9,57,7],[61,10,57,8,"sortRoutes"],[61,20,57,18],[61,23,57,21,"sortRoutes"],[61,33,57,31],[62,2,58,0],[62,11,58,9,"sortRoutesWithInitial"],[62,32,58,30,"sortRoutesWithInitial"],[62,33,58,31,"initialRouteName"],[62,49,58,47],[62,51,58,49],[63,4,59,4],[63,11,59,11],[63,12,59,12,"a"],[63,13,59,13],[63,15,59,15,"b"],[63,16,59,16],[63,21,59,21],[64,6,60,8],[64,10,60,12,"initialRouteName"],[64,26,60,28],[64,28,60,30],[65,8,61,12],[65,12,61,16,"a"],[65,13,61,17],[65,14,61,18,"route"],[65,19,61,23],[65,24,61,28,"initialRouteName"],[65,40,61,44],[65,42,61,46],[66,10,62,16],[66,17,62,23],[66,18,62,24],[66,19,62,25],[67,8,63,12],[68,8,64,12],[68,12,64,16,"b"],[68,13,64,17],[68,14,64,18,"route"],[68,19,64,23],[68,24,64,28,"initialRouteName"],[68,40,64,44],[68,42,64,46],[69,10,65,16],[69,17,65,23],[69,18,65,24],[70,8,66,12],[71,6,67,8],[72,6,68,8],[72,13,68,15,"sortRoutes"],[72,23,68,25],[72,24,68,26,"a"],[72,25,68,27],[72,27,68,29,"b"],[72,28,68,30],[72,29,68,31],[73,4,69,4],[73,5,69,5],[74,2,70,0],[75,2,71,0,"exports"],[75,9,71,7],[75,10,71,8,"sortRoutesWithInitial"],[75,31,71,29],[75,34,71,32,"sortRoutesWithInitial"],[75,55,71,53],[76,0,71,54],[76,3]],"functionMap":{"names":["<global>","sortDynamicConvention","sortRoutes","sortRoutesWithInitial","<anonymous>"],"mappings":"AAA;ACI;CDQ;AEC;CF0C;AGE;WCC;KDU;CHC"}},"type":"js/module"}]}