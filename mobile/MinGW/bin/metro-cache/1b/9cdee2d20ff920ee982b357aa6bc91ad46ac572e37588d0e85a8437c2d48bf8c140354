{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":88,"column":0,"index":1686}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":88,"column":0,"index":1686}}],"key":"8I802z/QkQYw0PV6ZCqhBNDwn0Q="}},{"name":"@babel/runtime/helpers/wrapAsyncGenerator","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":88,"column":0,"index":1686}}],"key":"Q34jBtfqFEZOuHnQUQqZu1j3ZM4="}},{"name":"@babel/runtime/helpers/awaitAsyncGenerator","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":88,"column":0,"index":1686}}],"key":"KCCfGbYhud/8hhSaB9A6dGsbQ8Y="}},{"name":"@babel/runtime/helpers/asyncGeneratorDelegate","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":88,"column":0,"index":1686}}],"key":"OiOi6fBoX2mmZK+yXTkLmJ65+no="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.trackStream = exports.streamChunk = exports.readBytes = void 0;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _wrapAsyncGenerator2 = _interopRequireDefault(require(_dependencyMap[2], \"@babel/runtime/helpers/wrapAsyncGenerator\"));\n  var _awaitAsyncGenerator2 = _interopRequireDefault(require(_dependencyMap[3], \"@babel/runtime/helpers/awaitAsyncGenerator\"));\n  var _asyncGeneratorDelegate2 = _interopRequireDefault(require(_dependencyMap[4], \"@babel/runtime/helpers/asyncGeneratorDelegate\"));\n  function _asyncIterator(r) { var n, t, o, e = 2; for (\"undefined\" != typeof Symbol && (t = Symbol.asyncIterator, o = Symbol.iterator); e--;) { if (t && null != (n = r[t])) return n.call(r); if (o && null != (n = r[o])) return new AsyncFromSyncIterator(n.call(r)); t = \"@@asyncIterator\", o = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\n  function AsyncFromSyncIterator(r) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var n = r.done; return Promise.resolve(r.value).then(function (r) { return { value: r, done: n }; }); } return AsyncFromSyncIterator = function (r) { this.s = r, this.n = r.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function () { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function (r) { var n = this.s.return; return void 0 === n ? Promise.resolve({ value: r, done: !0 }) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments)); }, throw: function (r) { var n = this.s.return; return void 0 === n ? Promise.reject(r) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(r); }\n  var streamChunk = function* (chunk, chunkSize) {\n    var len = chunk.byteLength;\n    if (!chunkSize || len < chunkSize) {\n      yield chunk;\n      return;\n    }\n    var pos = 0;\n    var end;\n    while (pos < len) {\n      end = pos + chunkSize;\n      yield chunk.slice(pos, end);\n      pos = end;\n    }\n  };\n  exports.streamChunk = streamChunk;\n  var readBytes = exports.readBytes = /*#__PURE__*/function () {\n    var _ref = (0, _wrapAsyncGenerator2.default)(function* (iterable, chunkSize) {\n      var _iteratorAbruptCompletion = false;\n      var _didIteratorError = false;\n      var _iteratorError;\n      try {\n        for (var _iterator = _asyncIterator(readStream(iterable)), _step; _iteratorAbruptCompletion = !(_step = yield (0, _awaitAsyncGenerator2.default)(_iterator.next())).done; _iteratorAbruptCompletion = false) {\n          var chunk = _step.value;\n          {\n            yield* (0, _asyncGeneratorDelegate2.default)(_asyncIterator(streamChunk(chunk, chunkSize)), _awaitAsyncGenerator2.default);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion && _iterator.return != null) {\n            yield (0, _awaitAsyncGenerator2.default)(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    });\n    return function readBytes(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var readStream = /*#__PURE__*/function () {\n    var _ref2 = (0, _wrapAsyncGenerator2.default)(function* (stream) {\n      if (stream[Symbol.asyncIterator]) {\n        yield* (0, _asyncGeneratorDelegate2.default)(_asyncIterator(stream), _awaitAsyncGenerator2.default);\n        return;\n      }\n      var reader = stream.getReader();\n      try {\n        for (;;) {\n          var _yield$_awaitAsyncGen = yield (0, _awaitAsyncGenerator2.default)(reader.read()),\n            done = _yield$_awaitAsyncGen.done,\n            value = _yield$_awaitAsyncGen.value;\n          if (done) {\n            break;\n          }\n          yield value;\n        }\n      } finally {\n        yield (0, _awaitAsyncGenerator2.default)(reader.cancel());\n      }\n    });\n    return function readStream(_x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var trackStream = (stream, chunkSize, onProgress, onFinish) => {\n    var iterator = readBytes(stream, chunkSize);\n    var bytes = 0;\n    var done;\n    var _onFinish = e => {\n      if (!done) {\n        done = true;\n        onFinish && onFinish(e);\n      }\n    };\n    return new ReadableStream({\n      pull(controller) {\n        return (0, _asyncToGenerator2.default)(function* () {\n          try {\n            var _yield$iterator$next = yield iterator.next(),\n              _done = _yield$iterator$next.done,\n              value = _yield$iterator$next.value;\n            if (_done) {\n              _onFinish();\n              controller.close();\n              return;\n            }\n            var len = value.byteLength;\n            if (onProgress) {\n              var loadedBytes = bytes += len;\n              onProgress(loadedBytes);\n            }\n            controller.enqueue(new Uint8Array(value));\n          } catch (err) {\n            _onFinish(err);\n            throw err;\n          }\n        })();\n      },\n      cancel(reason) {\n        _onFinish(reason);\n        return iterator.return();\n      }\n    }, {\n      highWaterMark: 2\n    });\n  };\n  exports.trackStream = trackStream;\n});","lineCount":127,"map":[[13,2,2,7],[13,6,2,13,"streamChunk"],[13,17,2,24],[13,20,2,27],[13,30,2,27,"streamChunk"],[13,31,2,38,"chunk"],[13,36,2,43],[13,38,2,45,"chunkSize"],[13,47,2,54],[13,49,2,56],[14,4,3,2],[14,8,3,6,"len"],[14,11,3,9],[14,14,3,12,"chunk"],[14,19,3,17],[14,20,3,18,"byteLength"],[14,30,3,28],[15,4,5,2],[15,8,5,6],[15,9,5,7,"chunkSize"],[15,18,5,16],[15,22,5,20,"len"],[15,25,5,23],[15,28,5,26,"chunkSize"],[15,37,5,35],[15,39,5,37],[16,6,6,4],[16,12,6,10,"chunk"],[16,17,6,15],[17,6,7,4],[18,4,8,2],[19,4,10,2],[19,8,10,6,"pos"],[19,11,10,9],[19,14,10,12],[19,15,10,13],[20,4,11,2],[20,8,11,6,"end"],[20,11,11,9],[21,4,13,2],[21,11,13,9,"pos"],[21,14,13,12],[21,17,13,15,"len"],[21,20,13,18],[21,22,13,20],[22,6,14,4,"end"],[22,9,14,7],[22,12,14,10,"pos"],[22,15,14,13],[22,18,14,16,"chunkSize"],[22,27,14,25],[23,6,15,4],[23,12,15,10,"chunk"],[23,17,15,15],[23,18,15,16,"slice"],[23,23,15,21],[23,24,15,22,"pos"],[23,27,15,25],[23,29,15,27,"end"],[23,32,15,30],[23,33,15,31],[24,6,16,4,"pos"],[24,9,16,7],[24,12,16,10,"end"],[24,15,16,13],[25,4,17,2],[26,2,18,0],[26,3,18,1],[27,2,18,1,"exports"],[27,9,18,1],[27,10,18,1,"streamChunk"],[27,21,18,1],[27,24,18,1,"streamChunk"],[27,35,18,1],[28,2,20,7],[28,6,20,13,"readBytes"],[28,15,20,22],[28,18,20,22,"exports"],[28,25,20,22],[28,26,20,22,"readBytes"],[28,35,20,22],[29,4,20,22],[29,8,20,22,"_ref"],[29,12,20,22],[29,19,20,22,"_wrapAsyncGenerator2"],[29,39,20,22],[29,40,20,22,"default"],[29,47,20,22],[29,49,20,25],[29,60,20,42,"iterable"],[29,68,20,50],[29,70,20,52,"chunkSize"],[29,79,20,61],[29,81,20,63],[30,6,20,63],[30,10,20,63,"_iteratorAbruptCompletion"],[30,35,20,63],[31,6,20,63],[31,10,20,63,"_didIteratorError"],[31,27,20,63],[32,6,20,63],[32,10,20,63,"_iteratorError"],[32,24,20,63],[33,6,20,63],[34,8,21,2],[34,17,21,2,"_iterator"],[34,26,21,2],[34,29,21,2,"_asyncIterator"],[34,43,21,2],[34,44,21,28,"readStream"],[34,54,21,38],[34,55,21,39,"iterable"],[34,63,21,47],[34,64,21,48],[34,67,21,48,"_step"],[34,72,21,48],[34,74,21,48,"_iteratorAbruptCompletion"],[34,99,21,48],[34,104,21,48,"_step"],[34,109,21,48],[34,122,21,48,"_awaitAsyncGenerator2"],[34,143,21,48],[34,144,21,48,"default"],[34,151,21,48],[34,153,21,48,"_iterator"],[34,162,21,48],[34,163,21,48,"next"],[34,167,21,48],[34,172,21,48,"done"],[34,176,21,48],[34,178,21,48,"_iteratorAbruptCompletion"],[34,203,21,48],[34,213,21,50],[35,10,21,50],[35,14,21,19,"chunk"],[35,19,21,24],[35,22,21,24,"_step"],[35,27,21,24],[35,28,21,24,"value"],[35,33,21,24],[36,10,21,24],[37,12,22,4],[37,23,22,4,"_asyncGeneratorDelegate2"],[37,47,22,4],[37,48,22,4,"default"],[37,55,22,4],[37,57,22,4,"_asyncIterator"],[37,71,22,4],[37,72,22,11,"streamChunk"],[37,83,22,22],[37,84,22,23,"chunk"],[37,89,22,28],[37,91,22,30,"chunkSize"],[37,100,22,39],[37,101,22,40],[37,104,22,40,"_awaitAsyncGenerator2"],[37,125,22,40],[37,126,22,40,"default"],[37,133,22,40],[38,10,22,41],[39,8,23,2],[40,6,23,3],[40,15,23,3,"err"],[40,18,23,3],[41,8,23,3,"_didIteratorError"],[41,25,23,3],[42,8,23,3,"_iteratorError"],[42,22,23,3],[42,25,23,3,"err"],[42,28,23,3],[43,6,23,3],[44,8,23,3],[45,10,23,3],[45,14,23,3,"_iteratorAbruptCompletion"],[45,39,23,3],[45,43,23,3,"_iterator"],[45,52,23,3],[45,53,23,3,"return"],[45,59,23,3],[46,12,23,3],[46,22,23,3,"_awaitAsyncGenerator2"],[46,43,23,3],[46,44,23,3,"default"],[46,51,23,3],[46,53,23,3,"_iterator"],[46,62,23,3],[46,63,23,3,"return"],[46,69,23,3],[47,10,23,3],[48,8,23,3],[49,10,23,3],[49,14,23,3,"_didIteratorError"],[49,31,23,3],[50,12,23,3],[50,18,23,3,"_iteratorError"],[50,32,23,3],[51,10,23,3],[52,8,23,3],[53,6,23,3],[54,4,24,0],[54,5,24,1],[55,4,24,1],[55,20,20,13,"readBytes"],[55,29,20,22,"readBytes"],[55,30,20,22,"_x"],[55,32,20,22],[55,34,20,22,"_x2"],[55,37,20,22],[56,6,20,22],[56,13,20,22,"_ref"],[56,17,20,22],[56,18,20,22,"apply"],[56,23,20,22],[56,30,20,22,"arguments"],[56,39,20,22],[57,4,20,22],[58,2,20,22],[58,5,24,1],[59,2,26,0],[59,6,26,6,"readStream"],[59,16,26,16],[60,4,26,16],[60,8,26,16,"_ref2"],[60,13,26,16],[60,20,26,16,"_wrapAsyncGenerator2"],[60,40,26,16],[60,41,26,16,"default"],[60,48,26,16],[60,50,26,19],[60,61,26,36,"stream"],[60,67,26,42],[60,69,26,44],[61,6,27,2],[61,10,27,6,"stream"],[61,16,27,12],[61,17,27,13,"Symbol"],[61,23,27,19],[61,24,27,20,"asyncIterator"],[61,37,27,33],[61,38,27,34],[61,40,27,36],[62,8,28,4],[62,19,28,4,"_asyncGeneratorDelegate2"],[62,43,28,4],[62,44,28,4,"default"],[62,51,28,4],[62,53,28,4,"_asyncIterator"],[62,67,28,4],[62,68,28,11,"stream"],[62,74,28,17],[62,77,28,17,"_awaitAsyncGenerator2"],[62,98,28,17],[62,99,28,17,"default"],[62,106,28,17],[63,8,29,4],[64,6,30,2],[65,6,32,2],[65,10,32,8,"reader"],[65,16,32,14],[65,19,32,17,"stream"],[65,25,32,23],[65,26,32,24,"getReader"],[65,35,32,33],[65,36,32,34],[65,37,32,35],[66,6,33,2],[66,10,33,6],[67,8,34,4],[67,17,34,13],[68,10,35,6],[68,14,35,6,"_yield$_awaitAsyncGen"],[68,35,35,6],[68,48,35,6,"_awaitAsyncGenerator2"],[68,69,35,6],[68,70,35,6,"default"],[68,77,35,6],[68,79,35,34,"reader"],[68,85,35,40],[68,86,35,41,"read"],[68,90,35,45],[68,91,35,46],[68,92,35,47],[69,12,35,13,"done"],[69,16,35,17],[69,19,35,17,"_yield$_awaitAsyncGen"],[69,40,35,17],[69,41,35,13,"done"],[69,45,35,17],[70,12,35,19,"value"],[70,17,35,24],[70,20,35,24,"_yield$_awaitAsyncGen"],[70,41,35,24],[70,42,35,19,"value"],[70,47,35,24],[71,10,36,6],[71,14,36,10,"done"],[71,18,36,14],[71,20,36,16],[72,12,37,8],[73,10,38,6],[74,10,39,6],[74,16,39,12,"value"],[74,21,39,17],[75,8,40,4],[76,6,41,2],[76,7,41,3],[76,16,41,12],[77,8,42,4],[77,18,42,4,"_awaitAsyncGenerator2"],[77,39,42,4],[77,40,42,4,"default"],[77,47,42,4],[77,49,42,10,"reader"],[77,55,42,16],[77,56,42,17,"cancel"],[77,62,42,23],[77,63,42,24],[77,64,42,25],[78,6,43,2],[79,4,44,0],[79,5,44,1],[80,4,44,1],[80,20,26,6,"readStream"],[80,30,26,16,"readStream"],[80,31,26,16,"_x3"],[80,34,26,16],[81,6,26,16],[81,13,26,16,"_ref2"],[81,18,26,16],[81,19,26,16,"apply"],[81,24,26,16],[81,31,26,16,"arguments"],[81,40,26,16],[82,4,26,16],[83,2,26,16],[83,5,44,1],[84,2,46,7],[84,6,46,13,"trackStream"],[84,17,46,24],[84,20,46,27,"trackStream"],[84,21,46,28,"stream"],[84,27,46,34],[84,29,46,36,"chunkSize"],[84,38,46,45],[84,40,46,47,"onProgress"],[84,50,46,57],[84,52,46,59,"onFinish"],[84,60,46,67],[84,65,46,72],[85,4,47,2],[85,8,47,8,"iterator"],[85,16,47,16],[85,19,47,19,"readBytes"],[85,28,47,28],[85,29,47,29,"stream"],[85,35,47,35],[85,37,47,37,"chunkSize"],[85,46,47,46],[85,47,47,47],[86,4,49,2],[86,8,49,6,"bytes"],[86,13,49,11],[86,16,49,14],[86,17,49,15],[87,4,50,2],[87,8,50,6,"done"],[87,12,50,10],[88,4,51,2],[88,8,51,6,"_onFinish"],[88,17,51,15],[88,20,51,19,"e"],[88,21,51,20],[88,25,51,25],[89,6,52,4],[89,10,52,8],[89,11,52,9,"done"],[89,15,52,13],[89,17,52,15],[90,8,53,6,"done"],[90,12,53,10],[90,15,53,13],[90,19,53,17],[91,8,54,6,"onFinish"],[91,16,54,14],[91,20,54,18,"onFinish"],[91,28,54,26],[91,29,54,27,"e"],[91,30,54,28],[91,31,54,29],[92,6,55,4],[93,4,56,2],[93,5,56,3],[94,4,58,2],[94,11,58,9],[94,15,58,13,"ReadableStream"],[94,29,58,27],[94,30,58,28],[95,6,59,10,"pull"],[95,10,59,14,"pull"],[95,11,59,15,"controller"],[95,21,59,25],[95,23,59,27],[96,8,59,27],[96,19,59,27,"_asyncToGenerator2"],[96,37,59,27],[96,38,59,27,"default"],[96,45,59,27],[97,10,60,6],[97,14,60,10],[98,12,61,8],[98,16,61,8,"_yield$iterator$next"],[98,36,61,8],[98,45,61,36,"iterator"],[98,53,61,44],[98,54,61,45,"next"],[98,58,61,49],[98,59,61,50],[98,60,61,51],[99,14,61,15,"done"],[99,19,61,19],[99,22,61,19,"_yield$iterator$next"],[99,42,61,19],[99,43,61,15,"done"],[99,47,61,19],[100,14,61,21,"value"],[100,19,61,26],[100,22,61,26,"_yield$iterator$next"],[100,42,61,26],[100,43,61,21,"value"],[100,48,61,26],[101,12,63,8],[101,16,63,12,"done"],[101,21,63,16],[101,23,63,18],[102,14,64,9,"_onFinish"],[102,23,64,18],[102,24,64,19],[102,25,64,20],[103,14,65,10,"controller"],[103,24,65,20],[103,25,65,21,"close"],[103,30,65,26],[103,31,65,27],[103,32,65,28],[104,14,66,10],[105,12,67,8],[106,12,69,8],[106,16,69,12,"len"],[106,19,69,15],[106,22,69,18,"value"],[106,27,69,23],[106,28,69,24,"byteLength"],[106,38,69,34],[107,12,70,8],[107,16,70,12,"onProgress"],[107,26,70,22],[107,28,70,24],[108,14,71,10],[108,18,71,14,"loadedBytes"],[108,29,71,25],[108,32,71,28,"bytes"],[108,37,71,33],[108,41,71,37,"len"],[108,44,71,40],[109,14,72,10,"onProgress"],[109,24,72,20],[109,25,72,21,"loadedBytes"],[109,36,72,32],[109,37,72,33],[110,12,73,8],[111,12,74,8,"controller"],[111,22,74,18],[111,23,74,19,"enqueue"],[111,30,74,26],[111,31,74,27],[111,35,74,31,"Uint8Array"],[111,45,74,41],[111,46,74,42,"value"],[111,51,74,47],[111,52,74,48],[111,53,74,49],[112,10,75,6],[112,11,75,7],[112,12,75,8],[112,19,75,15,"err"],[112,22,75,18],[112,24,75,20],[113,12,76,8,"_onFinish"],[113,21,76,17],[113,22,76,18,"err"],[113,25,76,21],[113,26,76,22],[114,12,77,8],[114,18,77,14,"err"],[114,21,77,17],[115,10,78,6],[116,8,78,7],[117,6,79,4],[117,7,79,5],[118,6,80,4,"cancel"],[118,12,80,10,"cancel"],[118,13,80,11,"reason"],[118,19,80,17],[118,21,80,19],[119,8,81,6,"_onFinish"],[119,17,81,15],[119,18,81,16,"reason"],[119,24,81,22],[119,25,81,23],[120,8,82,6],[120,15,82,13,"iterator"],[120,23,82,21],[120,24,82,22,"return"],[120,30,82,28],[120,31,82,29],[120,32,82,30],[121,6,83,4],[122,4,84,2],[122,5,84,3],[122,7,84,5],[123,6,85,4,"highWaterMark"],[123,19,85,17],[123,21,85,19],[124,4,86,2],[124,5,86,3],[124,6,86,4],[125,2,87,0],[125,3,87,1],[126,2,87,1,"exports"],[126,9,87,1],[126,10,87,1,"trackStream"],[126,21,87,1],[126,24,87,1,"trackStream"],[126,35,87,1],[127,0,87,1],[127,3]],"functionMap":{"names":["<global>","streamChunk","readBytes","readStream","trackStream","_onFinish","ReadableStream$argument_0.pull","ReadableStream$argument_0.cancel"],"mappings":"AAA;2BCC;CDgB;yBEE;CFI;mBGE;CHkB;2BIE;kBCK;GDK;IEG;KFoB;IGC;KHG;CJI"}},"type":"js/module"}]}