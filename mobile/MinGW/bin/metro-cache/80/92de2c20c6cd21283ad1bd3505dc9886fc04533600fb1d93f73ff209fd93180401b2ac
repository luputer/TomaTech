{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":68,"column":44,"index":2891}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"./fork/getStateFromPath-forks","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":4,"column":33,"index":183},"end":{"line":4,"column":73,"index":223}}],"key":"ipxv70qXETAA38UCDZpBXxWaERo="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getNormalizedStatePath = exports.getRouteInfoFromState = void 0;\n  var getStateFromPath_forks_1 = require(_dependencyMap[1], \"./fork/getStateFromPath-forks\");\n  function getRouteInfoFromState(getPathFromState, state, baseUrl) {\n    var _getPathFromState = getPathFromState(state, false),\n      path = _getPathFromState.path;\n    var qualified = getPathFromState(state, true);\n    return {\n      // TODO: This may have a predefined origin attached in the future.\n      unstable_globalHref: path,\n      pathname: (0, getStateFromPath_forks_1.stripBaseUrl)(path, baseUrl).split('?')['0'],\n      isIndex: isIndexPath(state),\n      ...getNormalizedStatePath(qualified, baseUrl)\n    };\n  }\n  exports.getRouteInfoFromState = getRouteInfoFromState;\n  function isIndexPath(state) {\n    var route = state.routes[state.index ?? state.routes.length - 1];\n    if (route.state) {\n      return isIndexPath(route.state);\n    }\n    // Index routes on the same level as a layout do not have `index` in their name\n    if (route.params && 'screen' in route.params) {\n      return route.params.screen === 'index';\n    }\n    // The `params` key will not exist if there are no params\n    // So we need to do a positive lookahead to check if the route ends with /index\n    // Nested routes that are hoisted will have a name ending with /index\n    // e.g name could be /user/[id]/index\n    if (route.name.match(/.+\\/index$/)) return true;\n    // The state will either have params (because there are multiple _layout) or it will be hoisted with a name\n    // If we don't match the above cases, then it's not an index route\n    return false;\n  }\n  // TODO: Split up getPathFromState to return all this info at once.\n  function getNormalizedStatePath(_ref, baseUrl) {\n    var statePath = _ref.path,\n      params = _ref.params;\n    var _statePath$split = statePath.split('?'),\n      _statePath$split2 = _slicedToArray(_statePath$split, 1),\n      pathname = _statePath$split2[0];\n    return {\n      // Strip empty path at the start\n      segments: (0, getStateFromPath_forks_1.stripBaseUrl)(pathname, baseUrl).split('/').filter(Boolean).map(decodeURIComponent),\n      // TODO: This is not efficient, we should generate based on the state instead\n      // of converting to string then back to object\n      params: decodeParams(params)\n    };\n  }\n  exports.getNormalizedStatePath = getNormalizedStatePath;\n  function decodeParams(params) {\n    var parsed = {};\n    for (var _ref2 of Object.entries(params)) {\n      var _ref3 = _slicedToArray(_ref2, 2);\n      var key = _ref3[0];\n      var value = _ref3[1];\n      try {\n        if (key === 'params' && typeof value === 'object') {\n          parsed[key] = decodeParams(value);\n        } else if (Array.isArray(value)) {\n          parsed[key] = value.map(v => decodeURIComponent(v));\n        } else {\n          parsed[key] = decodeURIComponent(value);\n        }\n      } catch {\n        parsed[key] = value;\n      }\n    }\n    return parsed;\n  }\n});","lineCount":77,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"require"],[4,30,1,13],[4,31,1,13,"_dependencyMap"],[4,45,1,13],[5,2,2,0,"Object"],[5,8,2,6],[5,9,2,7,"defineProperty"],[5,23,2,21],[5,24,2,22,"exports"],[5,31,2,29],[5,33,2,31],[5,45,2,43],[5,47,2,45],[6,4,2,47,"value"],[6,9,2,52],[6,11,2,54],[7,2,2,59],[7,3,2,60],[7,4,2,61],[8,2,3,0,"exports"],[8,9,3,7],[8,10,3,8,"getNormalizedStatePath"],[8,32,3,30],[8,35,3,33,"exports"],[8,42,3,40],[8,43,3,41,"getRouteInfoFromState"],[8,64,3,62],[8,67,3,65],[8,72,3,70],[8,73,3,71],[9,2,4,0],[9,6,4,6,"getStateFromPath_forks_1"],[9,30,4,30],[9,33,4,33,"require"],[9,40,4,40],[9,41,4,40,"_dependencyMap"],[9,55,4,40],[9,91,4,72],[9,92,4,73],[10,2,5,0],[10,11,5,9,"getRouteInfoFromState"],[10,32,5,30,"getRouteInfoFromState"],[10,33,5,31,"getPathFromState"],[10,49,5,47],[10,51,5,49,"state"],[10,56,5,54],[10,58,5,56,"baseUrl"],[10,65,5,63],[10,67,5,65],[11,4,6,4],[11,8,6,4,"_getPathFromState"],[11,25,6,4],[11,28,6,21,"getPathFromState"],[11,44,6,37],[11,45,6,38,"state"],[11,50,6,43],[11,52,6,45],[11,57,6,50],[11,58,6,51],[12,6,6,12,"path"],[12,10,6,16],[12,13,6,16,"_getPathFromState"],[12,30,6,16],[12,31,6,12,"path"],[12,35,6,16],[13,4,7,4],[13,8,7,10,"qualified"],[13,17,7,19],[13,20,7,22,"getPathFromState"],[13,36,7,38],[13,37,7,39,"state"],[13,42,7,44],[13,44,7,46],[13,48,7,50],[13,49,7,51],[14,4,8,4],[14,11,8,11],[15,6,9,8],[16,6,10,8,"unstable_globalHref"],[16,25,10,27],[16,27,10,29,"path"],[16,31,10,33],[17,6,11,8,"pathname"],[17,14,11,16],[17,16,11,18],[17,17,11,19],[17,18,11,20],[17,20,11,22,"getStateFromPath_forks_1"],[17,44,11,46],[17,45,11,47,"stripBaseUrl"],[17,57,11,59],[17,59,11,61,"path"],[17,63,11,65],[17,65,11,67,"baseUrl"],[17,72,11,74],[17,73,11,75],[17,74,11,76,"split"],[17,79,11,81],[17,80,11,82],[17,83,11,85],[17,84,11,86],[17,85,11,87],[17,88,11,90],[17,89,11,91],[18,6,12,8,"isIndex"],[18,13,12,15],[18,15,12,17,"isIndexPath"],[18,26,12,28],[18,27,12,29,"state"],[18,32,12,34],[18,33,12,35],[19,6,13,8],[19,9,13,11,"getNormalizedStatePath"],[19,31,13,33],[19,32,13,34,"qualified"],[19,41,13,43],[19,43,13,45,"baseUrl"],[19,50,13,52],[20,4,14,4],[20,5,14,5],[21,2,15,0],[22,2,16,0,"exports"],[22,9,16,7],[22,10,16,8,"getRouteInfoFromState"],[22,31,16,29],[22,34,16,32,"getRouteInfoFromState"],[22,55,16,53],[23,2,17,0],[23,11,17,9,"isIndexPath"],[23,22,17,20,"isIndexPath"],[23,23,17,21,"state"],[23,28,17,26],[23,30,17,28],[24,4,18,4],[24,8,18,10,"route"],[24,13,18,15],[24,16,18,18,"state"],[24,21,18,23],[24,22,18,24,"routes"],[24,28,18,30],[24,29,18,31,"state"],[24,34,18,36],[24,35,18,37,"index"],[24,40,18,42],[24,44,18,46,"state"],[24,49,18,51],[24,50,18,52,"routes"],[24,56,18,58],[24,57,18,59,"length"],[24,63,18,65],[24,66,18,68],[24,67,18,69],[24,68,18,70],[25,4,19,4],[25,8,19,8,"route"],[25,13,19,13],[25,14,19,14,"state"],[25,19,19,19],[25,21,19,21],[26,6,20,8],[26,13,20,15,"isIndexPath"],[26,24,20,26],[26,25,20,27,"route"],[26,30,20,32],[26,31,20,33,"state"],[26,36,20,38],[26,37,20,39],[27,4,21,4],[28,4,22,4],[29,4,23,4],[29,8,23,8,"route"],[29,13,23,13],[29,14,23,14,"params"],[29,20,23,20],[29,24,23,24],[29,32,23,32],[29,36,23,36,"route"],[29,41,23,41],[29,42,23,42,"params"],[29,48,23,48],[29,50,23,50],[30,6,24,8],[30,13,24,15,"route"],[30,18,24,20],[30,19,24,21,"params"],[30,25,24,27],[30,26,24,28,"screen"],[30,32,24,34],[30,37,24,39],[30,44,24,46],[31,4,25,4],[32,4,26,4],[33,4,27,4],[34,4,28,4],[35,4,29,4],[36,4,30,4],[36,8,30,8,"route"],[36,13,30,13],[36,14,30,14,"name"],[36,18,30,18],[36,19,30,19,"match"],[36,24,30,24],[36,25,30,25],[36,37,30,37],[36,38,30,38],[36,40,31,8],[36,47,31,15],[36,51,31,19],[37,4,32,4],[38,4,33,4],[39,4,34,4],[39,11,34,11],[39,16,34,16],[40,2,35,0],[41,2,36,0],[42,2,37,0],[42,11,37,9,"getNormalizedStatePath"],[42,33,37,31,"getNormalizedStatePath"],[42,34,37,31,"_ref"],[42,38,37,31],[42,40,37,62,"baseUrl"],[42,47,37,69],[42,49,37,71],[43,4,37,71],[43,8,37,40,"statePath"],[43,17,37,49],[43,20,37,49,"_ref"],[43,24,37,49],[43,25,37,34,"path"],[43,29,37,38],[44,6,37,51,"params"],[44,12,37,57],[44,15,37,57,"_ref"],[44,19,37,57],[44,20,37,51,"params"],[44,26,37,57],[45,4,38,4],[45,8,38,4,"_statePath$split"],[45,24,38,4],[45,27,38,23,"statePath"],[45,36,38,32],[45,37,38,33,"split"],[45,42,38,38],[45,43,38,39],[45,46,38,42],[45,47,38,43],[46,6,38,43,"_statePath$split2"],[46,23,38,43],[46,26,38,43,"_slicedToArray"],[46,40,38,43],[46,41,38,43,"_statePath$split"],[46,57,38,43],[47,6,38,11,"pathname"],[47,14,38,19],[47,17,38,19,"_statePath$split2"],[47,34,38,19],[48,4,39,4],[48,11,39,11],[49,6,40,8],[50,6,41,8,"segments"],[50,14,41,16],[50,16,41,18],[50,17,41,19],[50,18,41,20],[50,20,41,22,"getStateFromPath_forks_1"],[50,44,41,46],[50,45,41,47,"stripBaseUrl"],[50,57,41,59],[50,59,41,61,"pathname"],[50,67,41,69],[50,69,41,71,"baseUrl"],[50,76,41,78],[50,77,41,79],[50,78,41,80,"split"],[50,83,41,85],[50,84,41,86],[50,87,41,89],[50,88,41,90],[50,89,41,91,"filter"],[50,95,41,97],[50,96,41,98,"Boolean"],[50,103,41,105],[50,104,41,106],[50,105,41,107,"map"],[50,108,41,110],[50,109,41,111,"decodeURIComponent"],[50,127,41,129],[50,128,41,130],[51,6,42,8],[52,6,43,8],[53,6,44,8,"params"],[53,12,44,14],[53,14,44,16,"decodeParams"],[53,26,44,28],[53,27,44,29,"params"],[53,33,44,35],[54,4,45,4],[54,5,45,5],[55,2,46,0],[56,2,47,0,"exports"],[56,9,47,7],[56,10,47,8,"getNormalizedStatePath"],[56,32,47,30],[56,35,47,33,"getNormalizedStatePath"],[56,57,47,55],[57,2,48,0],[57,11,48,9,"decodeParams"],[57,23,48,21,"decodeParams"],[57,24,48,22,"params"],[57,30,48,28],[57,32,48,30],[58,4,49,4],[58,8,49,10,"parsed"],[58,14,49,16],[58,17,49,19],[58,18,49,20],[58,19,49,21],[59,4,50,4],[59,13,50,4,"_ref2"],[59,18,50,4],[59,22,50,31,"Object"],[59,28,50,37],[59,29,50,38,"entries"],[59,36,50,45],[59,37,50,46,"params"],[59,43,50,52],[59,44,50,53],[59,46,50,55],[60,6,50,55],[60,10,50,55,"_ref3"],[60,15,50,55],[60,18,50,55,"_slicedToArray"],[60,32,50,55],[60,33,50,55,"_ref2"],[60,38,50,55],[61,6,50,55],[61,10,50,16,"key"],[61,13,50,19],[61,16,50,19,"_ref3"],[61,21,50,19],[62,6,50,19],[62,10,50,21,"value"],[62,15,50,26],[62,18,50,26,"_ref3"],[62,23,50,26],[63,6,51,8],[63,10,51,12],[64,8,52,12],[64,12,52,16,"key"],[64,15,52,19],[64,20,52,24],[64,28,52,32],[64,32,52,36],[64,39,52,43,"value"],[64,44,52,48],[64,49,52,53],[64,57,52,61],[64,59,52,63],[65,10,53,16,"parsed"],[65,16,53,22],[65,17,53,23,"key"],[65,20,53,26],[65,21,53,27],[65,24,53,30,"decodeParams"],[65,36,53,42],[65,37,53,43,"value"],[65,42,53,48],[65,43,53,49],[66,8,54,12],[66,9,54,13],[66,15,55,17],[66,19,55,21,"Array"],[66,24,55,26],[66,25,55,27,"isArray"],[66,32,55,34],[66,33,55,35,"value"],[66,38,55,40],[66,39,55,41],[66,41,55,43],[67,10,56,16,"parsed"],[67,16,56,22],[67,17,56,23,"key"],[67,20,56,26],[67,21,56,27],[67,24,56,30,"value"],[67,29,56,35],[67,30,56,36,"map"],[67,33,56,39],[67,34,56,41,"v"],[67,35,56,42],[67,39,56,47,"decodeURIComponent"],[67,57,56,65],[67,58,56,66,"v"],[67,59,56,67],[67,60,56,68],[67,61,56,69],[68,8,57,12],[68,9,57,13],[68,15,58,17],[69,10,59,16,"parsed"],[69,16,59,22],[69,17,59,23,"key"],[69,20,59,26],[69,21,59,27],[69,24,59,30,"decodeURIComponent"],[69,42,59,48],[69,43,59,49,"value"],[69,48,59,54],[69,49,59,55],[70,8,60,12],[71,6,61,8],[71,7,61,9],[71,8,62,8],[71,14,62,14],[72,8,63,12,"parsed"],[72,14,63,18],[72,15,63,19,"key"],[72,18,63,22],[72,19,63,23],[72,22,63,26,"value"],[72,27,63,31],[73,6,64,8],[74,4,65,4],[75,4,66,4],[75,11,66,11,"parsed"],[75,17,66,17],[76,2,67,0],[77,0,67,1],[77,3]],"functionMap":{"names":["<global>","getRouteInfoFromState","isIndexPath","getNormalizedStatePath","decodeParams","value.map$argument_0"],"mappings":"AAA;ACI;CDU;AEE;CFkB;AGE;CHS;AIE;wCCQ,4BD;CJW"}},"type":"js/module"}]}